

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Feb 12 09:17:22 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	intentry,global,class=CODE,delta=2
    11                           	dabs	1,0x7E,2
    12  0000                     
    13                           ; Version 2.10
    14                           ; Generated 31/07/2019 GMT
    15                           ; 
    16                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution.
    30                           ; 
    31                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    32                           ;        software without specific prior written permission.
    33                           ; 
    34                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    35                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    36                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    37                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    38                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    39                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    40                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    41                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    42                           ; 
    43                           ; 
    44                           ; Code-generator required, PIC16F887 Definitions
    45                           ; 
    46                           ; SFR Addresses
    47  0000                     	;# 
    48  0001                     	;# 
    49  0002                     	;# 
    50  0003                     	;# 
    51  0004                     	;# 
    52  0005                     	;# 
    53  0006                     	;# 
    54  0007                     	;# 
    55  0008                     	;# 
    56  0009                     	;# 
    57  000A                     	;# 
    58  000B                     	;# 
    59  000C                     	;# 
    60  000D                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0013                     	;# 
    68  0014                     	;# 
    69  0015                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001B                     	;# 
    78  001C                     	;# 
    79  001D                     	;# 
    80  001E                     	;# 
    81  001F                     	;# 
    82  0081                     	;# 
    83  0085                     	;# 
    84  0086                     	;# 
    85  0087                     	;# 
    86  0088                     	;# 
    87  0089                     	;# 
    88  008C                     	;# 
    89  008D                     	;# 
    90  008E                     	;# 
    91  008F                     	;# 
    92  0090                     	;# 
    93  0091                     	;# 
    94  0092                     	;# 
    95  0093                     	;# 
    96  0093                     	;# 
    97  0093                     	;# 
    98  0094                     	;# 
    99  0095                     	;# 
   100  0096                     	;# 
   101  0097                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009A                     	;# 
   105  009B                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  0105                     	;# 
   111  0107                     	;# 
   112  0108                     	;# 
   113  0109                     	;# 
   114  010C                     	;# 
   115  010C                     	;# 
   116  010D                     	;# 
   117  010E                     	;# 
   118  010F                     	;# 
   119  0185                     	;# 
   120  0187                     	;# 
   121  0188                     	;# 
   122  0189                     	;# 
   123  018C                     	;# 
   124  018D                     	;# 
   125  0000                     	;# 
   126  0001                     	;# 
   127  0002                     	;# 
   128  0003                     	;# 
   129  0004                     	;# 
   130  0005                     	;# 
   131  0006                     	;# 
   132  0007                     	;# 
   133  0008                     	;# 
   134  0009                     	;# 
   135  000A                     	;# 
   136  000B                     	;# 
   137  000C                     	;# 
   138  000D                     	;# 
   139  000E                     	;# 
   140  000E                     	;# 
   141  000F                     	;# 
   142  0010                     	;# 
   143  0011                     	;# 
   144  0012                     	;# 
   145  0013                     	;# 
   146  0014                     	;# 
   147  0015                     	;# 
   148  0015                     	;# 
   149  0016                     	;# 
   150  0017                     	;# 
   151  0018                     	;# 
   152  0019                     	;# 
   153  001A                     	;# 
   154  001B                     	;# 
   155  001B                     	;# 
   156  001C                     	;# 
   157  001D                     	;# 
   158  001E                     	;# 
   159  001F                     	;# 
   160  0081                     	;# 
   161  0085                     	;# 
   162  0086                     	;# 
   163  0087                     	;# 
   164  0088                     	;# 
   165  0089                     	;# 
   166  008C                     	;# 
   167  008D                     	;# 
   168  008E                     	;# 
   169  008F                     	;# 
   170  0090                     	;# 
   171  0091                     	;# 
   172  0092                     	;# 
   173  0093                     	;# 
   174  0093                     	;# 
   175  0093                     	;# 
   176  0094                     	;# 
   177  0095                     	;# 
   178  0096                     	;# 
   179  0097                     	;# 
   180  0098                     	;# 
   181  0099                     	;# 
   182  009A                     	;# 
   183  009B                     	;# 
   184  009C                     	;# 
   185  009D                     	;# 
   186  009E                     	;# 
   187  009F                     	;# 
   188  0105                     	;# 
   189  0107                     	;# 
   190  0108                     	;# 
   191  0109                     	;# 
   192  010C                     	;# 
   193  010C                     	;# 
   194  010D                     	;# 
   195  010E                     	;# 
   196  010F                     	;# 
   197  0185                     	;# 
   198  0187                     	;# 
   199  0188                     	;# 
   200  0189                     	;# 
   201  018C                     	;# 
   202  018D                     	;# 
   203  0000                     	;# 
   204  0001                     	;# 
   205  0002                     	;# 
   206  0003                     	;# 
   207  0004                     	;# 
   208  0005                     	;# 
   209  0006                     	;# 
   210  0007                     	;# 
   211  0008                     	;# 
   212  0009                     	;# 
   213  000A                     	;# 
   214  000B                     	;# 
   215  000C                     	;# 
   216  000D                     	;# 
   217  000E                     	;# 
   218  000E                     	;# 
   219  000F                     	;# 
   220  0010                     	;# 
   221  0011                     	;# 
   222  0012                     	;# 
   223  0013                     	;# 
   224  0014                     	;# 
   225  0015                     	;# 
   226  0015                     	;# 
   227  0016                     	;# 
   228  0017                     	;# 
   229  0018                     	;# 
   230  0019                     	;# 
   231  001A                     	;# 
   232  001B                     	;# 
   233  001B                     	;# 
   234  001C                     	;# 
   235  001D                     	;# 
   236  001E                     	;# 
   237  001F                     	;# 
   238  0081                     	;# 
   239  0085                     	;# 
   240  0086                     	;# 
   241  0087                     	;# 
   242  0088                     	;# 
   243  0089                     	;# 
   244  008C                     	;# 
   245  008D                     	;# 
   246  008E                     	;# 
   247  008F                     	;# 
   248  0090                     	;# 
   249  0091                     	;# 
   250  0092                     	;# 
   251  0093                     	;# 
   252  0093                     	;# 
   253  0093                     	;# 
   254  0094                     	;# 
   255  0095                     	;# 
   256  0096                     	;# 
   257  0097                     	;# 
   258  0098                     	;# 
   259  0099                     	;# 
   260  009A                     	;# 
   261  009B                     	;# 
   262  009C                     	;# 
   263  009D                     	;# 
   264  009E                     	;# 
   265  009F                     	;# 
   266  0105                     	;# 
   267  0107                     	;# 
   268  0108                     	;# 
   269  0109                     	;# 
   270  010C                     	;# 
   271  010C                     	;# 
   272  010D                     	;# 
   273  010E                     	;# 
   274  010F                     	;# 
   275  0185                     	;# 
   276  0187                     	;# 
   277  0188                     	;# 
   278  0189                     	;# 
   279  018C                     	;# 
   280  018D                     	;# 
   281  0007                     _PORTC	set	7
   282  0006                     _PORTB	set	6
   283  001A                     _RCREG	set	26
   284  000C                     _PIR1bits	set	12
   285  000B                     _INTCONbits	set	11
   286  0019                     _TXREG	set	25
   287  0018                     _RCSTA	set	24
   288  0086                     _TRISB	set	134
   289  0098                     _TXSTAbits	set	152
   290  0099                     _SPBRG	set	153
   291  0098                     _TXSTA	set	152
   292  008C                     _PIE1bits	set	140
   293  0087                     _TRISC	set	135
   294  0187                     _BAUDCTLbits	set	391
   295                           
   296                           ; #config settings
   297  0000                     
   298                           	psect	cinit
   299  000F                     start_initialization:	
   300  000F                     __initialization:	
   301                           
   302                           ; Clear objects allocated to COMMON
   303  000F  01F5               	clrf	__pbssCOMMON& (0+127)
   304  0010                     end_of_initialization:	
   305                           ;End of C runtime variable initialization code
   306                           
   307  0010                     __end_of__initialization:	
   308  0010  0183               	clrf	3
   309  0011  120A  118A  2857   	ljmp	_main	;jump to C main() function
   310                           
   311                           	psect	bssCOMMON
   312  0075                     __pbssCOMMON:	
   313  0075                     _ttl:	
   314  0075                     	ds	1
   315                           
   316                           	psect	cstackCOMMON
   317  0070                     __pcstackCOMMON:	
   318  0070                     ?_ISR:	
   319  0070                     ??_ISR:	
   320                           ; 1 bytes @ 0x0
   321                           
   322  0070                     ?_main:	
   323                           ; 1 bytes @ 0x0
   324                           
   325                           
   326                           ; 1 bytes @ 0x0
   327  0070                     	ds	3
   328  0073                     ?_initSerial:	
   329  0073                     initSerial@baudrate:	
   330                           ; 1 bytes @ 0x3
   331                           
   332                           
   333                           ; 2 bytes @ 0x3
   334  0073                     	ds	2
   335  0075                     ??_initSerial:	
   336  0075                     ??_main:	
   337                           ; 1 bytes @ 0x5
   338                           
   339                           
   340                           	psect	maintext
   341  0057                     __pmaintext:	
   342                           ; 1 bytes @ 0x5
   343 ;;
   344 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   345 ;;
   346 ;; *************** function _main *****************
   347 ;; Defined at:
   348 ;;		line 44 in file "SPI.c"
   349 ;; Parameters:    Size  Location     Type
   350 ;;		None
   351 ;; Auto vars:     Size  Location     Type
   352 ;;		None
   353 ;; Return value:  Size  Location     Type
   354 ;;                  1    wreg      void 
   355 ;; Registers used:
   356 ;;		wreg, status,2, status,0, pclath, cstack
   357 ;; Tracked objects:
   358 ;;		On entry : B00/0
   359 ;;		On exit  : 0/0
   360 ;;		Unchanged: 0/0
   361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   362 ;;      Params:         0       0       0       0       0
   363 ;;      Locals:         0       0       0       0       0
   364 ;;      Temps:          0       0       0       0       0
   365 ;;      Totals:         0       0       0       0       0
   366 ;;Total ram usage:        0 bytes
   367 ;; Hardware stack levels required when called:    2
   368 ;; This function calls:
   369 ;;		_initSerial
   370 ;; This function is called by:
   371 ;;		Startup code after reset
   372 ;; This function uses a non-reentrant model
   373 ;;
   374                           
   375                           
   376                           ;psect for function _main
   377  0057                     _main:	
   378  0057                     l716:	
   379                           ;incstack = 0
   380                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   381                           
   382                           
   383                           ;SPI.c: 46:     TRISB = 0;
   384  0057  1683               	bsf	3,5	;RP0=1, select bank1
   385  0058  1303               	bcf	3,6	;RP1=0, select bank1
   386  0059  0186               	clrf	6	;volatile
   387                           
   388                           ;SPI.c: 47:     TRISC = 0;
   389  005A  0187               	clrf	7	;volatile
   390                           
   391                           ;SPI.c: 49:     PORTB = 0;
   392  005B  1283               	bcf	3,5	;RP0=0, select bank0
   393  005C  1303               	bcf	3,6	;RP1=0, select bank0
   394  005D  0186               	clrf	6	;volatile
   395                           
   396                           ;SPI.c: 50:     PORTC = 0;
   397  005E  0187               	clrf	7	;volatile
   398  005F                     l718:	
   399                           
   400                           ;SPI.c: 52:     initSerial(9600);
   401  005F  3080               	movlw	128
   402  0060  00F3               	movwf	initSerial@baudrate
   403  0061  3025               	movlw	37
   404  0062  00F4               	movwf	initSerial@baudrate+1
   405  0063  120A  118A  2014  120A  118A  	fcall	_initSerial
   406  0068                     l61:	
   407                           ;SPI.c: 54:     while (1){
   408                           
   409  0068                     l62:	
   410                           ;SPI.c: 56:     }
   411                           
   412  0068  2868               	goto	l61
   413  0069  120A  118A  280C   	ljmp	start
   414  006C                     __end_of_main:	
   415                           
   416                           	psect	text1
   417  0014                     __ptext1:	
   418 ;; *************** function _initSerial *****************
   419 ;; Defined at:
   420 ;;		line 7 in file "Serial_Init.c"
   421 ;; Parameters:    Size  Location     Type
   422 ;;  baudrate        2    3[COMMON] unsigned int 
   423 ;; Auto vars:     Size  Location     Type
   424 ;;		None
   425 ;; Return value:  Size  Location     Type
   426 ;;                  1    wreg      void 
   427 ;; Registers used:
   428 ;;		wreg, status,2, status,0
   429 ;; Tracked objects:
   430 ;;		On entry : 0/0
   431 ;;		On exit  : 0/0
   432 ;;		Unchanged: 0/0
   433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   434 ;;      Params:         2       0       0       0       0
   435 ;;      Locals:         0       0       0       0       0
   436 ;;      Temps:          0       0       0       0       0
   437 ;;      Totals:         2       0       0       0       0
   438 ;;Total ram usage:        2 bytes
   439 ;; Hardware stack levels used:    1
   440 ;; Hardware stack levels required when called:    1
   441 ;; This function calls:
   442 ;;		Nothing
   443 ;; This function is called by:
   444 ;;		_main
   445 ;; This function uses a non-reentrant model
   446 ;;
   447                           
   448                           
   449                           ;psect for function _initSerial
   450  0014                     _initSerial:	
   451  0014                     l694:	
   452                           ;incstack = 0
   453                           ; Regs used in _initSerial: [wreg+status,2+status,0]
   454                           
   455                           
   456                           ;Serial_Init.c: 8:     TRISC = 0x80;
   457  0014  3080               	movlw	128
   458  0015  1683               	bsf	3,5	;RP0=1, select bank1
   459  0016  1303               	bcf	3,6	;RP1=0, select bank1
   460  0017  0087               	movwf	7	;volatile
   461  0018                     l696:	
   462                           
   463                           ;Serial_Init.c: 10:     PIE1bits.RCIE = 0;
   464  0018  128C               	bcf	12,5	;volatile
   465                           
   466                           ;Serial_Init.c: 12:     TXSTA=0b00100110;
   467  0019  3026               	movlw	38
   468  001A  0098               	movwf	24	;volatile
   469                           
   470                           ;Serial_Init.c: 14:     RCSTA=0b10010000;
   471  001B  3090               	movlw	144
   472  001C  1283               	bcf	3,5	;RP0=0, select bank0
   473  001D  1303               	bcf	3,6	;RP1=0, select bank0
   474  001E  0098               	movwf	24	;volatile
   475  001F                     l698:	
   476                           
   477                           ;Serial_Init.c: 16:     BAUDCTLbits.BRG16 = 1;
   478  001F  1683               	bsf	3,5	;RP0=1, select bank3
   479  0020  1703               	bsf	3,6	;RP1=1, select bank3
   480  0021  1587               	bsf	7,3	;volatile
   481  0022                     l700:	
   482                           
   483                           ;Serial_Init.c: 18:     if(baudrate == 9600){
   484  0022  3080               	movlw	128
   485  0023  0673               	xorwf	initSerial@baudrate,w
   486  0024  3025               	movlw	37
   487  0025  1903               	skipnz
   488  0026  0674               	xorwf	initSerial@baudrate+1,w
   489  0027  1D03               	btfss	3,2
   490  0028  282A               	goto	u71
   491  0029  282B               	goto	u70
   492  002A                     u71:	
   493  002A  2830               	goto	l704
   494  002B                     u70:	
   495  002B                     l702:	
   496                           
   497                           ;Serial_Init.c: 19:         SPBRG = 103;
   498  002B  3067               	movlw	103
   499  002C  1683               	bsf	3,5	;RP0=1, select bank1
   500  002D  1303               	bcf	3,6	;RP1=0, select bank1
   501  002E  0099               	movwf	25	;volatile
   502                           
   503                           ;Serial_Init.c: 20:     } else if (baudrate == 10417){
   504  002F  2856               	goto	l26
   505  0030                     l704:	
   506  0030  30B1               	movlw	177
   507  0031  0673               	xorwf	initSerial@baudrate,w
   508  0032  3028               	movlw	40
   509  0033  1903               	skipnz
   510  0034  0674               	xorwf	initSerial@baudrate+1,w
   511  0035  1D03               	btfss	3,2
   512  0036  2838               	goto	u81
   513  0037  2839               	goto	u80
   514  0038                     u81:	
   515  0038  283E               	goto	l708
   516  0039                     u80:	
   517  0039                     l706:	
   518                           
   519                           ;Serial_Init.c: 21:         SPBRG = 95;
   520  0039  305F               	movlw	95
   521  003A  1683               	bsf	3,5	;RP0=1, select bank1
   522  003B  1303               	bcf	3,6	;RP1=0, select bank1
   523  003C  0099               	movwf	25	;volatile
   524                           
   525                           ;Serial_Init.c: 22:     } else if (baudrate == 19200){
   526  003D  2856               	goto	l26
   527  003E                     l708:	
   528  003E  304B               	movlw	75
   529  003F  0674               	xorwf	initSerial@baudrate+1,w
   530  0040  0473               	iorwf	initSerial@baudrate,w
   531  0041  1D03               	btfss	3,2
   532  0042  2844               	goto	u91
   533  0043  2845               	goto	u90
   534  0044                     u91:	
   535  0044  284A               	goto	l712
   536  0045                     u90:	
   537  0045                     l710:	
   538                           
   539                           ;Serial_Init.c: 23:         SPBRG = 51;
   540  0045  3033               	movlw	51
   541  0046  1683               	bsf	3,5	;RP0=1, select bank1
   542  0047  1303               	bcf	3,6	;RP1=0, select bank1
   543  0048  0099               	movwf	25	;volatile
   544                           
   545                           ;Serial_Init.c: 24:     } else if (baudrate == 57600){
   546  0049  2856               	goto	l26
   547  004A                     l712:	
   548  004A  30E1               	movlw	225
   549  004B  0674               	xorwf	initSerial@baudrate+1,w
   550  004C  0473               	iorwf	initSerial@baudrate,w
   551  004D  1D03               	btfss	3,2
   552  004E  2850               	goto	u101
   553  004F  2851               	goto	u100
   554  0050                     u101:	
   555  0050  2856               	goto	l22
   556  0051                     u100:	
   557  0051                     l714:	
   558                           
   559                           ;Serial_Init.c: 25:         SPBRG = 16;
   560  0051  3010               	movlw	16
   561  0052  1683               	bsf	3,5	;RP0=1, select bank1
   562  0053  1303               	bcf	3,6	;RP1=0, select bank1
   563  0054  0099               	movwf	25	;volatile
   564  0055  2856               	goto	l26
   565  0056                     l22:	
   566  0056                     l26:	
   567  0056  0008               	return
   568  0057                     __end_of_initSerial:	
   569                           
   570                           	psect	text2
   571  006C                     __ptext2:	
   572 ;; *************** function _ISR *****************
   573 ;; Defined at:
   574 ;;		line 32 in file "SPI.c"
   575 ;; Parameters:    Size  Location     Type
   576 ;;		None
   577 ;; Auto vars:     Size  Location     Type
   578 ;;		None
   579 ;; Return value:  Size  Location     Type
   580 ;;                  1    wreg      void 
   581 ;; Registers used:
   582 ;;		wreg
   583 ;; Tracked objects:
   584 ;;		On entry : 0/0
   585 ;;		On exit  : 0/0
   586 ;;		Unchanged: 0/0
   587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   588 ;;      Params:         0       0       0       0       0
   589 ;;      Locals:         0       0       0       0       0
   590 ;;      Temps:          3       0       0       0       0
   591 ;;      Totals:         3       0       0       0       0
   592 ;;Total ram usage:        3 bytes
   593 ;; Hardware stack levels used:    1
   594 ;; This function calls:
   595 ;;		Nothing
   596 ;; This function is called by:
   597 ;;		Interrupt level 1
   598 ;; This function uses a non-reentrant model
   599 ;;
   600                           
   601                           
   602                           ;psect for function _ISR
   603  006C                     _ISR:	
   604  006C                     i1l682:	
   605                           
   606                           ;SPI.c: 33:     INTCONbits.GIE = 0;
   607  006C  138B               	bcf	11,7	;volatile
   608                           
   609                           ;SPI.c: 34:     INTCONbits.PEIE = 0;
   610  006D  130B               	bcf	11,6	;volatile
   611                           
   612                           ;SPI.c: 36:     if (PIR1bits.RCIF == 1){
   613  006E  1283               	bcf	3,5	;RP0=0, select bank0
   614  006F  1303               	bcf	3,6	;RP1=0, select bank0
   615  0070  1E8C               	btfss	12,5	;volatile
   616  0071  2873               	goto	u6_21
   617  0072  2874               	goto	u6_20
   618  0073                     u6_21:	
   619  0073  2878               	goto	i1l686
   620  0074                     u6_20:	
   621  0074                     i1l684:	
   622                           
   623                           ;SPI.c: 37:         ttl = RCREG;
   624  0074  081A               	movf	26,w	;volatile
   625  0075  00F0               	movwf	??_ISR
   626  0076  0870               	movf	??_ISR,w
   627  0077  00F5               	movwf	_ttl
   628  0078                     i1l686:	
   629                           
   630                           ;SPI.c: 40:     INTCONbits.GIE = 1;
   631  0078  178B               	bsf	11,7	;volatile
   632  0079                     i1l688:	
   633                           
   634                           ;SPI.c: 41:     INTCONbits.PEIE = 1;
   635  0079  170B               	bsf	11,6	;volatile
   636  007A                     i1l56:	
   637  007A  0872               	movf	??_ISR+2,w
   638  007B  008A               	movwf	10
   639  007C  0E71               	swapf	(??_ISR+1)^(0+4294967168),w
   640  007D  0083               	movwf	3
   641  007E  0EFE               	swapf	btemp,f
   642  007F  0E7E               	swapf	btemp,w
   643  0080  0009               	retfie
   644  0081                     __end_of_ISR:	
   645  007E                     btemp	set	126	;btemp
   646  007E                     wtemp0	set	126
   647                           
   648                           	psect	intentry
   649  0004                     __pintentry:	
   650                           ;incstack = 0
   651                           ; Regs used in _ISR: [wreg]
   652                           
   653  0004                     interrupt_function:	
   654  007E                     saved_w	set	btemp
   655  0004  00FE               	movwf	btemp
   656  0005  0E03               	swapf	3,w
   657  0006  00F1               	movwf	??_ISR+1
   658  0007  080A               	movf	10,w
   659  0008  00F2               	movwf	??_ISR+2
   660  0009  120A  118A  286C   	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       6
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_initSerial

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     164
                         _initSerial
 ---------------------------------------------------------------------------------
 (1) _initSerial                                           2     0      2     164
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initSerial

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       6       1       42.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       6       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       6      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Feb 12 09:17:22 2020

             __CFG_CP$OFF 0000                        l22 0056                        l26 0056  
                      l61 0068                        l62 0068                        u70 002B  
                      u71 002A                        u80 0039                        u81 0038  
                      u90 0045                        u91 0044                       l700 0022  
                     l710 0045                       l702 002B                       l712 004A  
                     l704 0030                       l714 0051                       l706 0039  
                     l708 003E                       l716 0057                       l718 005F  
                     l694 0014                       l696 0018                       l698 001F  
                     u100 0051                       u101 0050              __CFG_CPD$OFF 0000  
                     _ISR 006C                       _ttl 0075              __CFG_LVP$OFF 0000  
                    ?_ISR 0070                      i1l56 007A                      u6_20 0074  
                    u6_21 0073              __CFG_WRT$OFF 0000                      _main 0057  
                    btemp 007E                      start 000C             __CFG_IESO$OFF 0000  
                   ??_ISR 0070                     ?_main 0070             __CFG_WDTE$OFF 0000  
                   i1l682 006C                     i1l684 0074                     i1l686 0078  
                   i1l688 0079                     _RCREG 001A                     _RCSTA 0018  
                   _SPBRG 0099                     _PORTB 0006                     _PORTC 0007  
                   _TRISB 0086                     _TRISC 0087                     _TXREG 0019  
                   _TXSTA 0098            __CFG_FCMEN$OFF 0000            __CFG_BOREN$OFF 0000  
                   pclath 000A                     status 0003                     wtemp0 007E  
          __CFG_MCLRE$OFF 0000           __initialization 000F              __end_of_main 006C  
                  ??_main 0075            __CFG_PWRTE$OFF 0000                    saved_w 007E  
 __end_of__initialization 0010            __pcstackCOMMON 0070                __pmaintext 0057  
              __pintentry 0004                _initSerial 0014                   __ptext1 0014  
                 __ptext2 006C              __size_of_ISR 0015      end_of_initialization 0010  
               _TXSTAbits 0098               ?_initSerial 0073               _BAUDCTLbits 0187  
     start_initialization 000F               __end_of_ISR 0081  __CFG_FOSC$INTRC_NOCLKOUT 0000  
      initSerial@baudrate 0073               __pbssCOMMON 0075                 ___latbits 0002  
     __size_of_initSerial 0043         interrupt_function 0004                  _PIE1bits 008C  
                _PIR1bits 000C              ??_initSerial 0075         __CFG_BOR4V$BOR40V 0000  
      __end_of_initSerial 0057             __size_of_main 0015                _INTCONbits 000B  
                intlevel1 0000  
