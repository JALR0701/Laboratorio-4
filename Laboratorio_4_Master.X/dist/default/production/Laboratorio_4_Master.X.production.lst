

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Feb 16 15:05:56 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.10
    20                           ; Generated 31/07/2019 GMT
    21                           ; 
    22                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F887 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  008F                     	;# 
    98  0090                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  0107                     	;# 
   118  0108                     	;# 
   119  0109                     	;# 
   120  010C                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  0185                     	;# 
   126  0187                     	;# 
   127  0188                     	;# 
   128  0189                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  0008                     	;# 
   140  0009                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000D                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0014                     	;# 
   153  0015                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0017                     	;# 
   157  0018                     	;# 
   158  0019                     	;# 
   159  001A                     	;# 
   160  001B                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001D                     	;# 
   164  001E                     	;# 
   165  001F                     	;# 
   166  0081                     	;# 
   167  0085                     	;# 
   168  0086                     	;# 
   169  0087                     	;# 
   170  0088                     	;# 
   171  0089                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  008F                     	;# 
   176  0090                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0094                     	;# 
   183  0095                     	;# 
   184  0096                     	;# 
   185  0097                     	;# 
   186  0098                     	;# 
   187  0099                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  0105                     	;# 
   195  0107                     	;# 
   196  0108                     	;# 
   197  0109                     	;# 
   198  010C                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  010F                     	;# 
   203  0185                     	;# 
   204  0187                     	;# 
   205  0188                     	;# 
   206  0189                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  0007                     	;# 
   217  0008                     	;# 
   218  0009                     	;# 
   219  000A                     	;# 
   220  000B                     	;# 
   221  000C                     	;# 
   222  000D                     	;# 
   223  000E                     	;# 
   224  000E                     	;# 
   225  000F                     	;# 
   226  0010                     	;# 
   227  0011                     	;# 
   228  0012                     	;# 
   229  0013                     	;# 
   230  0014                     	;# 
   231  0015                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0017                     	;# 
   235  0018                     	;# 
   236  0019                     	;# 
   237  001A                     	;# 
   238  001B                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  001D                     	;# 
   242  001E                     	;# 
   243  001F                     	;# 
   244  0081                     	;# 
   245  0085                     	;# 
   246  0086                     	;# 
   247  0087                     	;# 
   248  0088                     	;# 
   249  0089                     	;# 
   250  008C                     	;# 
   251  008D                     	;# 
   252  008E                     	;# 
   253  008F                     	;# 
   254  0090                     	;# 
   255  0091                     	;# 
   256  0092                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0093                     	;# 
   260  0094                     	;# 
   261  0095                     	;# 
   262  0096                     	;# 
   263  0097                     	;# 
   264  0098                     	;# 
   265  0099                     	;# 
   266  009A                     	;# 
   267  009B                     	;# 
   268  009C                     	;# 
   269  009D                     	;# 
   270  009E                     	;# 
   271  009F                     	;# 
   272  0105                     	;# 
   273  0107                     	;# 
   274  0108                     	;# 
   275  0109                     	;# 
   276  010C                     	;# 
   277  010C                     	;# 
   278  010D                     	;# 
   279  010E                     	;# 
   280  010F                     	;# 
   281  0185                     	;# 
   282  0187                     	;# 
   283  0188                     	;# 
   284  0189                     	;# 
   285  018C                     	;# 
   286  018D                     	;# 
   287  0000                     	;# 
   288  0001                     	;# 
   289  0002                     	;# 
   290  0003                     	;# 
   291  0004                     	;# 
   292  0005                     	;# 
   293  0006                     	;# 
   294  0007                     	;# 
   295  0008                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000D                     	;# 
   301  000E                     	;# 
   302  000E                     	;# 
   303  000F                     	;# 
   304  0010                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0013                     	;# 
   308  0014                     	;# 
   309  0015                     	;# 
   310  0015                     	;# 
   311  0016                     	;# 
   312  0017                     	;# 
   313  0018                     	;# 
   314  0019                     	;# 
   315  001A                     	;# 
   316  001B                     	;# 
   317  001B                     	;# 
   318  001C                     	;# 
   319  001D                     	;# 
   320  001E                     	;# 
   321  001F                     	;# 
   322  0081                     	;# 
   323  0085                     	;# 
   324  0086                     	;# 
   325  0087                     	;# 
   326  0088                     	;# 
   327  0089                     	;# 
   328  008C                     	;# 
   329  008D                     	;# 
   330  008E                     	;# 
   331  008F                     	;# 
   332  0090                     	;# 
   333  0091                     	;# 
   334  0092                     	;# 
   335  0093                     	;# 
   336  0093                     	;# 
   337  0093                     	;# 
   338  0094                     	;# 
   339  0095                     	;# 
   340  0096                     	;# 
   341  0097                     	;# 
   342  0098                     	;# 
   343  0099                     	;# 
   344  009A                     	;# 
   345  009B                     	;# 
   346  009C                     	;# 
   347  009D                     	;# 
   348  009E                     	;# 
   349  009F                     	;# 
   350  0105                     	;# 
   351  0107                     	;# 
   352  0108                     	;# 
   353  0109                     	;# 
   354  010C                     	;# 
   355  010C                     	;# 
   356  010D                     	;# 
   357  010E                     	;# 
   358  010F                     	;# 
   359  0185                     	;# 
   360  0187                     	;# 
   361  0188                     	;# 
   362  0189                     	;# 
   363  018C                     	;# 
   364  018D                     	;# 
   365  0013                     _SSPBUF	set	19
   366  0014                     _SSPCON	set	20
   367  0019                     _TXREG	set	25
   368  0018                     _RCSTA	set	24
   369  0007                     _PORTCbits	set	7
   370  0008                     _PORTD	set	8
   371  0006                     _PORTB	set	6
   372  001A                     _RCREG	set	26
   373  000C                     _PIR1bits	set	12
   374  000B                     _INTCONbits	set	11
   375  0094                     _SSPSTATbits	set	148
   376  0094                     _SSPSTAT	set	148
   377  0098                     _TXSTAbits	set	152
   378  0099                     _SPBRG	set	153
   379  009A                     _SPBRGH	set	154
   380  0098                     _TXSTA	set	152
   381  008C                     _PIE1bits	set	140
   382  0087                     _TRISCbits	set	135
   383  0088                     _TRISD	set	136
   384  0086                     _TRISB	set	134
   385  043B                     _TRISC3	set	1083
   386  043D                     _TRISC5	set	1085
   387  043A                     _TRISC2	set	1082
   388  0187                     _BAUDCTLbits	set	391
   389  0189                     _ANSELH	set	393
   390  0188                     _ANSEL	set	392
   391                           
   392                           ; #config settings
   393  0000                     
   394                           	psect	cinit
   395  000F                     start_initialization:	
   396  000F                     __initialization:	
   397                           
   398                           ; Clear objects allocated to COMMON
   399  000F  01F7               	clrf	__pbssCOMMON& (0+127)
   400  0010  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   401  0011  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   402  0012                     end_of_initialization:	
   403                           ;End of C runtime variable initialization code
   404                           
   405  0012                     __end_of__initialization:	
   406  0012  0183               	clrf	3
   407  0013  120A  118A  2816   	ljmp	_main	;jump to C main() function
   408                           
   409                           	psect	bssCOMMON
   410  0077                     __pbssCOMMON:	
   411  0077                     _ttl:	
   412  0077                     	ds	1
   413  0078                     _read2:	
   414  0078                     	ds	1
   415  0079                     _read1:	
   416  0079                     	ds	1
   417                           
   418                           	psect	cstackCOMMON
   419  0070                     __pcstackCOMMON:	
   420  0070                     ?_spiWrite:	
   421  0070                     ?_spiRead:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0070                     ?_ISR:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0070                     ??_ISR:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0070                     ?_main:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0070                     ?_spiReceiveWait:	
   434                           ; 1 bytes @ 0x0
   435                           
   436                           
   437                           ; 1 bytes @ 0x0
   438  0070                     	ds	3
   439  0073                     ?_spiInit:	
   440  0073                     ?_initSerial:	
   441                           ; 1 bytes @ 0x3
   442                           
   443  0073                     ??_spiWrite:	
   444                           ; 1 bytes @ 0x3
   445                           
   446  0073                     ??_spiRead:	
   447                           ; 1 bytes @ 0x3
   448                           
   449  0073                     ?_send_int:	
   450                           ; 1 bytes @ 0x3
   451                           
   452  0073                     ??_spiReceiveWait:	
   453                           ; 1 bytes @ 0x3
   454                           
   455  0073                     spiInit@sDataSample:	
   456                           ; 1 bytes @ 0x3
   457                           
   458  0073                     spiWrite@dat:	
   459                           ; 1 bytes @ 0x3
   460                           
   461  0073                     initSerial@baudrate:	
   462                           ; 1 bytes @ 0x3
   463                           
   464  0073                     send_int@msg:	
   465                           ; 2 bytes @ 0x3
   466                           
   467                           
   468                           ; 2 bytes @ 0x3
   469  0073                     	ds	1
   470  0074                     spiInit@sClockIdle:	
   471                           
   472                           ; 1 bytes @ 0x4
   473  0074                     	ds	1
   474  0075                     ??_initSerial:	
   475  0075                     ??_send_int:	
   476                           ; 1 bytes @ 0x5
   477                           
   478  0075                     spiInit@sTransmitEdge:	
   479                           ; 1 bytes @ 0x5
   480                           
   481                           
   482                           ; 1 bytes @ 0x5
   483  0075                     	ds	1
   484  0076                     ??_spiInit:	
   485  0076                     spiInit@sType:	
   486                           ; 1 bytes @ 0x6
   487                           
   488                           
   489                           ; 1 bytes @ 0x6
   490  0076                     	ds	1
   491                           
   492                           	psect	cstackBANK0
   493  0020                     __pcstackBANK0:	
   494  0020                     ??_main:	
   495                           
   496                           ; 1 bytes @ 0x0
   497  0020                     	ds	2
   498                           
   499                           	psect	maintext
   500  0016                     __pmaintext:	
   501 ;;
   502 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   503 ;;
   504 ;; *************** function _main *****************
   505 ;; Defined at:
   506 ;;		line 51 in file "SPI.c"
   507 ;; Parameters:    Size  Location     Type
   508 ;;		None
   509 ;; Auto vars:     Size  Location     Type
   510 ;;		None
   511 ;; Return value:  Size  Location     Type
   512 ;;                  1    wreg      void 
   513 ;; Registers used:
   514 ;;		wreg, status,2, status,0, pclath, cstack
   515 ;; Tracked objects:
   516 ;;		On entry : B00/0
   517 ;;		On exit  : 0/0
   518 ;;		Unchanged: 0/0
   519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   520 ;;      Params:         0       0       0       0       0
   521 ;;      Locals:         0       0       0       0       0
   522 ;;      Temps:          0       2       0       0       0
   523 ;;      Totals:         0       2       0       0       0
   524 ;;Total ram usage:        2 bytes
   525 ;; Hardware stack levels required when called:    3
   526 ;; This function calls:
   527 ;;		_initSerial
   528 ;;		_send_int
   529 ;;		_spiInit
   530 ;;		_spiRead
   531 ;;		_spiWrite
   532 ;; This function is called by:
   533 ;;		Startup code after reset
   534 ;; This function uses a non-reentrant model
   535 ;;
   536                           
   537                           
   538                           ;psect for function _main
   539  0016                     _main:	
   540  0016                     l876:	
   541                           ;incstack = 0
   542                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   543                           
   544                           
   545                           ;SPI.c: 53:     ANSEL = 0;
   546  0016  1683               	bsf	3,5	;RP0=1, select bank3
   547  0017  1703               	bsf	3,6	;RP1=1, select bank3
   548  0018  0188               	clrf	8	;volatile
   549                           
   550                           ;SPI.c: 54:     ANSELH = 0;
   551  0019  0189               	clrf	9	;volatile
   552  001A                     l878:	
   553                           
   554                           ;SPI.c: 55:     TRISC2 = 0;
   555  001A  1683               	bsf	3,5	;RP0=1, select bank1
   556  001B  1303               	bcf	3,6	;RP1=0, select bank1
   557  001C  1107               	bcf	7,2	;volatile
   558                           
   559                           ;SPI.c: 56:     TRISB = 0;
   560  001D  0186               	clrf	6	;volatile
   561                           
   562                           ;SPI.c: 57:     TRISD = 0;
   563  001E  0188               	clrf	8	;volatile
   564                           
   565                           ;SPI.c: 58:     PORTB = 0;
   566  001F  1283               	bcf	3,5	;RP0=0, select bank0
   567  0020  1303               	bcf	3,6	;RP1=0, select bank0
   568  0021  0186               	clrf	6	;volatile
   569                           
   570                           ;SPI.c: 59:     PORTD = 0;
   571  0022  0188               	clrf	8	;volatile
   572  0023                     l880:	
   573                           
   574                           ;SPI.c: 60:     PORTCbits.RC2 = 1;
   575  0023  1507               	bsf	7,2	;volatile
   576  0024                     l882:	
   577                           
   578                           ;SPI.c: 61:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LOW,
      +                           SPI_IDLE_2_ACTIVE);
   579  0024  01F3               	clrf	spiInit@sDataSample
   580  0025  01F4               	clrf	spiInit@sClockIdle
   581  0026  01F5               	clrf	spiInit@sTransmitEdge
   582  0027  3020               	movlw	32
   583  0028  120A  118A  20D7  120A  118A  	fcall	_spiInit
   584  002D                     l884:	
   585                           
   586                           ;SPI.c: 62:     initSerial(9600);
   587  002D  3080               	movlw	128
   588  002E  00F3               	movwf	initSerial@baudrate
   589  002F  3025               	movlw	37
   590  0030  00F4               	movwf	initSerial@baudrate+1
   591  0031  120A  118A  2097  120A  118A  	fcall	_initSerial
   592  0036                     l886:	
   593                           
   594                           ;SPI.c: 66:        spiWrite(1);
   595  0036  3001               	movlw	1
   596  0037  120A  118A  211D  120A  118A  	fcall	_spiWrite
   597  003C                     l888:	
   598                           
   599                           ;SPI.c: 67:        read1 = spiRead();
   600  003C  120A  118A  210D  120A  118A  	fcall	_spiRead
   601  0041  1283               	bcf	3,5	;RP0=0, select bank0
   602  0042  1303               	bcf	3,6	;RP1=0, select bank0
   603  0043  00A0               	movwf	??_main
   604  0044  0820               	movf	??_main,w
   605  0045  00F9               	movwf	_read1
   606  0046                     l890:	
   607                           
   608                           ;SPI.c: 68:        _delay((unsigned long)((10)*(4000000/4000.0)));
   609  0046  300D               	movlw	13
   610  0047  1283               	bcf	3,5	;RP0=0, select bank0
   611  0048  1303               	bcf	3,6	;RP1=0, select bank0
   612  0049  00A1               	movwf	??_main+1
   613  004A  30FB               	movlw	251
   614  004B  00A0               	movwf	??_main
   615  004C                     u157:	
   616  004C  0BA0               	decfsz	??_main,f
   617  004D  284C               	goto	u157
   618  004E  0BA1               	decfsz	??_main+1,f
   619  004F  284C               	goto	u157
   620  0050                     l892:	
   621                           
   622                           ;SPI.c: 70:        spiWrite(2);
   623  0050  3002               	movlw	2
   624  0051  120A  118A  211D  120A  118A  	fcall	_spiWrite
   625  0056                     l894:	
   626                           
   627                           ;SPI.c: 71:        read2 = spiRead();
   628  0056  120A  118A  210D  120A  118A  	fcall	_spiRead
   629  005B  1283               	bcf	3,5	;RP0=0, select bank0
   630  005C  1303               	bcf	3,6	;RP1=0, select bank0
   631  005D  00A0               	movwf	??_main
   632  005E  0820               	movf	??_main,w
   633  005F  00F8               	movwf	_read2
   634  0060                     l896:	
   635                           
   636                           ;SPI.c: 72:        _delay((unsigned long)((10)*(4000000/4000.0)));
   637  0060  300D               	movlw	13
   638  0061  1283               	bcf	3,5	;RP0=0, select bank0
   639  0062  1303               	bcf	3,6	;RP1=0, select bank0
   640  0063  00A1               	movwf	??_main+1
   641  0064  30FB               	movlw	251
   642  0065  00A0               	movwf	??_main
   643  0066                     u167:	
   644  0066  0BA0               	decfsz	??_main,f
   645  0067  2866               	goto	u167
   646  0068  0BA1               	decfsz	??_main+1,f
   647  0069  2866               	goto	u167
   648  006A                     l898:	
   649                           
   650                           ;SPI.c: 74:        send_int(read1);
   651  006A  0879               	movf	_read1,w
   652  006B  1283               	bcf	3,5	;RP0=0, select bank0
   653  006C  1303               	bcf	3,6	;RP1=0, select bank0
   654  006D  00A0               	movwf	??_main
   655  006E  01A1               	clrf	??_main+1
   656  006F  0820               	movf	??_main,w
   657  0070  00F3               	movwf	send_int@msg
   658  0071  0821               	movf	??_main+1,w
   659  0072  00F4               	movwf	send_int@msg+1
   660  0073  120A  118A  2102  120A  118A  	fcall	_send_int
   661  0078                     l900:	
   662                           
   663                           ;SPI.c: 75:        send_int(read2);
   664  0078  0878               	movf	_read2,w
   665  0079  1283               	bcf	3,5	;RP0=0, select bank0
   666  007A  1303               	bcf	3,6	;RP1=0, select bank0
   667  007B  00A0               	movwf	??_main
   668  007C  01A1               	clrf	??_main+1
   669  007D  0820               	movf	??_main,w
   670  007E  00F3               	movwf	send_int@msg
   671  007F  0821               	movf	??_main+1,w
   672  0080  00F4               	movwf	send_int@msg+1
   673  0081  120A  118A  2102  120A  118A  	fcall	_send_int
   674  0086                     l902:	
   675                           
   676                           ;SPI.c: 76:        send_int(255);
   677  0086  30FF               	movlw	255
   678  0087  00F3               	movwf	send_int@msg
   679  0088  3000               	movlw	0
   680  0089  00F4               	movwf	send_int@msg+1
   681  008A  120A  118A  2102  120A  118A  	fcall	_send_int
   682  008F                     l904:	
   683                           
   684                           ;SPI.c: 77:        PORTB = ttl;
   685  008F  0877               	movf	_ttl,w
   686  0090  1283               	bcf	3,5	;RP0=0, select bank0
   687  0091  1303               	bcf	3,6	;RP1=0, select bank0
   688  0092  0086               	movwf	6	;volatile
   689  0093  2836               	goto	l886
   690  0094  120A  118A  280C   	ljmp	start
   691  0097                     __end_of_main:	
   692                           
   693                           	psect	text1
   694  011D                     __ptext1:	
   695 ;; *************** function _spiWrite *****************
   696 ;; Defined at:
   697 ;;		line 29 in file "SPI_Init.c"
   698 ;; Parameters:    Size  Location     Type
   699 ;;  dat             1    wreg     unsigned char 
   700 ;; Auto vars:     Size  Location     Type
   701 ;;  dat             1    3[COMMON] unsigned char 
   702 ;; Return value:  Size  Location     Type
   703 ;;                  1    wreg      void 
   704 ;; Registers used:
   705 ;;		wreg
   706 ;; Tracked objects:
   707 ;;		On entry : 0/0
   708 ;;		On exit  : 0/0
   709 ;;		Unchanged: 0/0
   710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   711 ;;      Params:         0       0       0       0       0
   712 ;;      Locals:         1       0       0       0       0
   713 ;;      Temps:          0       0       0       0       0
   714 ;;      Totals:         1       0       0       0       0
   715 ;;Total ram usage:        1 bytes
   716 ;; Hardware stack levels used:    1
   717 ;; Hardware stack levels required when called:    1
   718 ;; This function calls:
   719 ;;		Nothing
   720 ;; This function is called by:
   721 ;;		_main
   722 ;; This function uses a non-reentrant model
   723 ;;
   724                           
   725                           
   726                           ;psect for function _spiWrite
   727  011D                     _spiWrite:	
   728                           
   729                           ;incstack = 0
   730                           ; Regs used in _spiWrite: [wreg]
   731                           ;spiWrite@dat stored from wreg
   732  011D  00F3               	movwf	spiWrite@dat
   733  011E                     l752:	
   734                           
   735                           ;SPI_Init.c: 29: void spiWrite(char dat);SPI_Init.c: 30: {;SPI_Init.c: 31:     SSPBUF = 
      +                          dat;
   736  011E  0873               	movf	spiWrite@dat,w
   737  011F  1283               	bcf	3,5	;RP0=0, select bank0
   738  0120  1303               	bcf	3,6	;RP1=0, select bank0
   739  0121  0093               	movwf	19	;volatile
   740  0122                     l116:	
   741  0122  0008               	return
   742  0123                     __end_of_spiWrite:	
   743                           
   744                           	psect	text2
   745  010D                     __ptext2:	
   746 ;; *************** function _spiRead *****************
   747 ;; Defined at:
   748 ;;		line 42 in file "SPI_Init.c"
   749 ;; Parameters:    Size  Location     Type
   750 ;;		None
   751 ;; Auto vars:     Size  Location     Type
   752 ;;		None
   753 ;; Return value:  Size  Location     Type
   754 ;;                  1    wreg      unsigned char 
   755 ;; Registers used:
   756 ;;		wreg, status,2, status,0, pclath, cstack
   757 ;; Tracked objects:
   758 ;;		On entry : 0/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   762 ;;      Params:         0       0       0       0       0
   763 ;;      Locals:         0       0       0       0       0
   764 ;;      Temps:          0       0       0       0       0
   765 ;;      Totals:         0       0       0       0       0
   766 ;;Total ram usage:        0 bytes
   767 ;; Hardware stack levels used:    1
   768 ;; Hardware stack levels required when called:    2
   769 ;; This function calls:
   770 ;;		_spiReceiveWait
   771 ;; This function is called by:
   772 ;;		_main
   773 ;; This function uses a non-reentrant model
   774 ;;
   775                           
   776                           
   777                           ;psect for function _spiRead
   778  010D                     _spiRead:	
   779  010D                     l754:	
   780                           ;incstack = 0
   781                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
   782                           
   783                           
   784                           ;SPI_Init.c: 44:     spiReceiveWait();
   785  010D  120A  118A  2116  120A  118A  	fcall	_spiReceiveWait
   786  0112                     l756:	
   787                           
   788                           ;SPI_Init.c: 45:     return(SSPBUF);
   789  0112  1283               	bcf	3,5	;RP0=0, select bank0
   790  0113  1303               	bcf	3,6	;RP1=0, select bank0
   791  0114  0813               	movf	19,w	;volatile
   792  0115                     l124:	
   793  0115  0008               	return
   794  0116                     __end_of_spiRead:	
   795                           
   796                           	psect	text3
   797  0116                     __ptext3:	
   798 ;; *************** function _spiReceiveWait *****************
   799 ;; Defined at:
   800 ;;		line 24 in file "SPI_Init.c"
   801 ;; Parameters:    Size  Location     Type
   802 ;;		None
   803 ;; Auto vars:     Size  Location     Type
   804 ;;		None
   805 ;; Return value:  Size  Location     Type
   806 ;;                  1    wreg      void 
   807 ;; Registers used:
   808 ;;		None
   809 ;; Tracked objects:
   810 ;;		On entry : 0/0
   811 ;;		On exit  : 0/0
   812 ;;		Unchanged: 0/0
   813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   814 ;;      Params:         0       0       0       0       0
   815 ;;      Locals:         0       0       0       0       0
   816 ;;      Temps:          0       0       0       0       0
   817 ;;      Totals:         0       0       0       0       0
   818 ;;Total ram usage:        0 bytes
   819 ;; Hardware stack levels used:    1
   820 ;; Hardware stack levels required when called:    1
   821 ;; This function calls:
   822 ;;		Nothing
   823 ;; This function is called by:
   824 ;;		_spiRead
   825 ;; This function uses a non-reentrant model
   826 ;;
   827                           
   828                           
   829                           ;psect for function _spiReceiveWait
   830  0116                     _spiReceiveWait:	
   831  0116                     l716:	
   832                           ;incstack = 0
   833                           ; Regs used in _spiReceiveWait: []
   834                           
   835  0116                     l110:	
   836                           ;SPI_Init.c: 26:     while ( !SSPSTATbits.BF );
   837                           
   838  0116  1683               	bsf	3,5	;RP0=1, select bank1
   839  0117  1303               	bcf	3,6	;RP1=0, select bank1
   840  0118  1C14               	btfss	20,0	;volatile
   841  0119  291B               	goto	u11
   842  011A  291C               	goto	u10
   843  011B                     u11:	
   844  011B  2916               	goto	l110
   845  011C                     u10:	
   846  011C                     l113:	
   847  011C  0008               	return
   848  011D                     __end_of_spiReceiveWait:	
   849                           
   850                           	psect	text4
   851  00D7                     __ptext4:	
   852 ;; *************** function _spiInit *****************
   853 ;; Defined at:
   854 ;;		line 7 in file "SPI_Init.c"
   855 ;; Parameters:    Size  Location     Type
   856 ;;  sType           1    wreg     enum E1292
   857 ;;  sDataSample     1    3[COMMON] enum E1300
   858 ;;  sClockIdle      1    4[COMMON] enum E1304
   859 ;;  sTransmitEdg    1    5[COMMON] enum E1308
   860 ;; Auto vars:     Size  Location     Type
   861 ;;  sType           1    6[COMMON] enum E1292
   862 ;; Return value:  Size  Location     Type
   863 ;;                  1    wreg      void 
   864 ;; Registers used:
   865 ;;		wreg, status,2, status,0
   866 ;; Tracked objects:
   867 ;;		On entry : 0/0
   868 ;;		On exit  : 0/0
   869 ;;		Unchanged: 0/0
   870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   871 ;;      Params:         3       0       0       0       0
   872 ;;      Locals:         1       0       0       0       0
   873 ;;      Temps:          0       0       0       0       0
   874 ;;      Totals:         4       0       0       0       0
   875 ;;Total ram usage:        4 bytes
   876 ;; Hardware stack levels used:    1
   877 ;; Hardware stack levels required when called:    1
   878 ;; This function calls:
   879 ;;		Nothing
   880 ;; This function is called by:
   881 ;;		_main
   882 ;; This function uses a non-reentrant model
   883 ;;
   884                           
   885                           
   886                           ;psect for function _spiInit
   887  00D7                     _spiInit:	
   888                           
   889                           ;incstack = 0
   890                           ; Regs used in _spiInit: [wreg+status,2+status,0]
   891                           ;spiInit@sType stored from wreg
   892  00D7  00F6               	movwf	spiInit@sType
   893  00D8                     l808:	
   894                           
   895                           ;SPI_Init.c: 7: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle
      +                           sClockIdle, Spi_Transmit_Edge sTransmitEdge);SPI_Init.c: 8: {;SPI_Init.c: 9:     TRISC5
      +                           = 0;
   896  00D8  1683               	bsf	3,5	;RP0=1, select bank1
   897  00D9  1303               	bcf	3,6	;RP1=0, select bank1
   898  00DA  1287               	bcf	7,5	;volatile
   899                           
   900                           ;SPI_Init.c: 10:     if(sType & 0b00000100)
   901  00DB  1D76               	btfss	spiInit@sType,2
   902  00DC  28DE               	goto	u91
   903  00DD  28DF               	goto	u90
   904  00DE                     u91:	
   905  00DE  28E3               	goto	l814
   906  00DF                     u90:	
   907  00DF                     l810:	
   908                           
   909                           ;SPI_Init.c: 11:     {;SPI_Init.c: 12:         SSPSTAT = sTransmitEdge;
   910  00DF  0875               	movf	spiInit@sTransmitEdge,w
   911  00E0  0094               	movwf	20	;volatile
   912  00E1                     l812:	
   913                           
   914                           ;SPI_Init.c: 13:         TRISC3 = 1;
   915  00E1  1587               	bsf	7,3	;volatile
   916                           
   917                           ;SPI_Init.c: 14:     }
   918  00E2  28E7               	goto	l106
   919  00E3                     l814:	
   920                           
   921                           ;SPI_Init.c: 16:     {;SPI_Init.c: 17:         SSPSTAT = sDataSample | sTransmitEdge;
   922  00E3  0873               	movf	spiInit@sDataSample,w
   923  00E4  0475               	iorwf	spiInit@sTransmitEdge,w
   924  00E5  0094               	movwf	20	;volatile
   925  00E6                     l816:	
   926                           
   927                           ;SPI_Init.c: 18:         TRISC3 = 0;
   928  00E6  1187               	bcf	7,3	;volatile
   929  00E7                     l106:	
   930                           ;SPI_Init.c: 19:     }
   931                           
   932                           
   933                           ;SPI_Init.c: 21:     SSPCON = sType | sClockIdle;
   934  00E7  0876               	movf	spiInit@sType,w
   935  00E8  0474               	iorwf	spiInit@sClockIdle,w
   936  00E9  1283               	bcf	3,5	;RP0=0, select bank0
   937  00EA  1303               	bcf	3,6	;RP1=0, select bank0
   938  00EB  0094               	movwf	20	;volatile
   939  00EC                     l107:	
   940  00EC  0008               	return
   941  00ED                     __end_of_spiInit:	
   942                           
   943                           	psect	text5
   944  0102                     __ptext5:	
   945 ;; *************** function _send_int *****************
   946 ;; Defined at:
   947 ;;		line 33 in file "Serial_Init.c"
   948 ;; Parameters:    Size  Location     Type
   949 ;;  msg             2    3[COMMON] int 
   950 ;; Auto vars:     Size  Location     Type
   951 ;;		None
   952 ;; Return value:  Size  Location     Type
   953 ;;                  1    wreg      void 
   954 ;; Registers used:
   955 ;;		wreg
   956 ;; Tracked objects:
   957 ;;		On entry : 0/0
   958 ;;		On exit  : 0/0
   959 ;;		Unchanged: 0/0
   960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   961 ;;      Params:         2       0       0       0       0
   962 ;;      Locals:         0       0       0       0       0
   963 ;;      Temps:          0       0       0       0       0
   964 ;;      Totals:         2       0       0       0       0
   965 ;;Total ram usage:        2 bytes
   966 ;; Hardware stack levels used:    1
   967 ;; Hardware stack levels required when called:    1
   968 ;; This function calls:
   969 ;;		Nothing
   970 ;; This function is called by:
   971 ;;		_main
   972 ;; This function uses a non-reentrant model
   973 ;;
   974                           
   975                           
   976                           ;psect for function _send_int
   977  0102                     _send_int:	
   978  0102                     l842:	
   979                           ;incstack = 0
   980                           ; Regs used in _send_int: [wreg]
   981                           
   982  0102                     l87:	
   983                           ;Serial_Init.c: 35:     }
   984                           
   985                           
   986                           ;Serial_Init.c: 34:     while (TXSTAbits.TRMT == 0){
   987  0102  1683               	bsf	3,5	;RP0=1, select bank1
   988  0103  1303               	bcf	3,6	;RP1=0, select bank1
   989  0104  1C98               	btfss	24,1	;volatile
   990  0105  2907               	goto	u141
   991  0106  2908               	goto	u140
   992  0107                     u141:	
   993  0107  2902               	goto	l87
   994  0108                     u140:	
   995  0108                     l844:	
   996                           
   997                           ;Serial_Init.c: 36:     TXREG = msg;
   998  0108  0873               	movf	send_int@msg,w
   999  0109  1283               	bcf	3,5	;RP0=0, select bank0
  1000  010A  1303               	bcf	3,6	;RP1=0, select bank0
  1001  010B  0099               	movwf	25	;volatile
  1002  010C                     l90:	
  1003  010C  0008               	return
  1004  010D                     __end_of_send_int:	
  1005                           
  1006                           	psect	text6
  1007  0097                     __ptext6:	
  1008 ;; *************** function _initSerial *****************
  1009 ;; Defined at:
  1010 ;;		line 5 in file "Serial_Init.c"
  1011 ;; Parameters:    Size  Location     Type
  1012 ;;  baudrate        2    3[COMMON] unsigned int 
  1013 ;; Auto vars:     Size  Location     Type
  1014 ;;		None
  1015 ;; Return value:  Size  Location     Type
  1016 ;;                  1    wreg      void 
  1017 ;; Registers used:
  1018 ;;		wreg, status,2, status,0
  1019 ;; Tracked objects:
  1020 ;;		On entry : 0/0
  1021 ;;		On exit  : 0/0
  1022 ;;		Unchanged: 0/0
  1023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1024 ;;      Params:         2       0       0       0       0
  1025 ;;      Locals:         0       0       0       0       0
  1026 ;;      Temps:          0       0       0       0       0
  1027 ;;      Totals:         2       0       0       0       0
  1028 ;;Total ram usage:        2 bytes
  1029 ;; Hardware stack levels used:    1
  1030 ;; Hardware stack levels required when called:    1
  1031 ;; This function calls:
  1032 ;;		Nothing
  1033 ;; This function is called by:
  1034 ;;		_main
  1035 ;; This function uses a non-reentrant model
  1036 ;;
  1037                           
  1038                           
  1039                           ;psect for function _initSerial
  1040  0097                     _initSerial:	
  1041  0097                     l818:	
  1042                           ;incstack = 0
  1043                           ; Regs used in _initSerial: [wreg+status,2+status,0]
  1044                           
  1045                           
  1046                           ;Serial_Init.c: 6:     INTCONbits.GIE = 1;
  1047  0097  178B               	bsf	11,7	;volatile
  1048                           
  1049                           ;Serial_Init.c: 7:     INTCONbits.PEIE = 1;
  1050  0098  170B               	bsf	11,6	;volatile
  1051                           
  1052                           ;Serial_Init.c: 9:     TRISCbits.TRISC7 = 1;
  1053  0099  1683               	bsf	3,5	;RP0=1, select bank1
  1054  009A  1303               	bcf	3,6	;RP1=0, select bank1
  1055  009B  1787               	bsf	7,7	;volatile
  1056                           
  1057                           ;Serial_Init.c: 10:     TRISCbits.TRISC6 = 0;
  1058  009C  1307               	bcf	7,6	;volatile
  1059                           
  1060                           ;Serial_Init.c: 12:     PIE1bits.RCIE = 1;
  1061  009D  168C               	bsf	12,5	;volatile
  1062  009E                     l820:	
  1063                           
  1064                           ;Serial_Init.c: 14:     TXSTA=0b00100110;
  1065  009E  3026               	movlw	38
  1066  009F  0098               	movwf	24	;volatile
  1067                           
  1068                           ;Serial_Init.c: 16:     RCSTA=0b10010000;
  1069  00A0  3090               	movlw	144
  1070  00A1  1283               	bcf	3,5	;RP0=0, select bank0
  1071  00A2  1303               	bcf	3,6	;RP1=0, select bank0
  1072  00A3  0098               	movwf	24	;volatile
  1073  00A4                     l822:	
  1074                           
  1075                           ;Serial_Init.c: 18:     BAUDCTLbits.BRG16 = 1;
  1076  00A4  1683               	bsf	3,5	;RP0=1, select bank3
  1077  00A5  1703               	bsf	3,6	;RP1=1, select bank3
  1078  00A6  1587               	bsf	7,3	;volatile
  1079  00A7                     l824:	
  1080                           
  1081                           ;Serial_Init.c: 19:     SPBRGH = 0;
  1082  00A7  1683               	bsf	3,5	;RP0=1, select bank1
  1083  00A8  1303               	bcf	3,6	;RP1=0, select bank1
  1084  00A9  019A               	clrf	26	;volatile
  1085  00AA                     l826:	
  1086                           
  1087                           ;Serial_Init.c: 22:     if(baudrate == 9600){
  1088  00AA  3080               	movlw	128
  1089  00AB  0673               	xorwf	initSerial@baudrate,w
  1090  00AC  3025               	movlw	37
  1091  00AD  1903               	skipnz
  1092  00AE  0674               	xorwf	initSerial@baudrate+1,w
  1093  00AF  1D03               	btfss	3,2
  1094  00B0  28B2               	goto	u101
  1095  00B1  28B3               	goto	u100
  1096  00B2                     u101:	
  1097  00B2  28B6               	goto	l830
  1098  00B3                     u100:	
  1099  00B3                     l828:	
  1100                           
  1101                           ;Serial_Init.c: 23:         SPBRG = 103;
  1102  00B3  3067               	movlw	103
  1103  00B4  0099               	movwf	25	;volatile
  1104                           
  1105                           ;Serial_Init.c: 24:     } else if (baudrate == 10417){
  1106  00B5  28D6               	goto	l84
  1107  00B6                     l830:	
  1108  00B6  30B1               	movlw	177
  1109  00B7  0673               	xorwf	initSerial@baudrate,w
  1110  00B8  3028               	movlw	40
  1111  00B9  1903               	skipnz
  1112  00BA  0674               	xorwf	initSerial@baudrate+1,w
  1113  00BB  1D03               	btfss	3,2
  1114  00BC  28BE               	goto	u111
  1115  00BD  28BF               	goto	u110
  1116  00BE                     u111:	
  1117  00BE  28C2               	goto	l834
  1118  00BF                     u110:	
  1119  00BF                     l832:	
  1120                           
  1121                           ;Serial_Init.c: 25:         SPBRG = 95;
  1122  00BF  305F               	movlw	95
  1123  00C0  0099               	movwf	25	;volatile
  1124                           
  1125                           ;Serial_Init.c: 26:     } else if (baudrate == 19200){
  1126  00C1  28D6               	goto	l84
  1127  00C2                     l834:	
  1128  00C2  304B               	movlw	75
  1129  00C3  0674               	xorwf	initSerial@baudrate+1,w
  1130  00C4  0473               	iorwf	initSerial@baudrate,w
  1131  00C5  1D03               	btfss	3,2
  1132  00C6  28C8               	goto	u121
  1133  00C7  28C9               	goto	u120
  1134  00C8                     u121:	
  1135  00C8  28CC               	goto	l838
  1136  00C9                     u120:	
  1137  00C9                     l836:	
  1138                           
  1139                           ;Serial_Init.c: 27:         SPBRG = 51;
  1140  00C9  3033               	movlw	51
  1141  00CA  0099               	movwf	25	;volatile
  1142                           
  1143                           ;Serial_Init.c: 28:     } else if (baudrate == 57600){
  1144  00CB  28D6               	goto	l84
  1145  00CC                     l838:	
  1146  00CC  30E1               	movlw	225
  1147  00CD  0674               	xorwf	initSerial@baudrate+1,w
  1148  00CE  0473               	iorwf	initSerial@baudrate,w
  1149  00CF  1D03               	btfss	3,2
  1150  00D0  28D2               	goto	u131
  1151  00D1  28D3               	goto	u130
  1152  00D2                     u131:	
  1153  00D2  28D6               	goto	l80
  1154  00D3                     u130:	
  1155  00D3                     l840:	
  1156                           
  1157                           ;Serial_Init.c: 29:         SPBRG = 16;
  1158  00D3  3010               	movlw	16
  1159  00D4  0099               	movwf	25	;volatile
  1160  00D5  28D6               	goto	l84
  1161  00D6                     l80:	
  1162  00D6                     l84:	
  1163  00D6  0008               	return
  1164  00D7                     __end_of_initSerial:	
  1165                           
  1166                           	psect	text7
  1167  00ED                     __ptext7:	
  1168 ;; *************** function _ISR *****************
  1169 ;; Defined at:
  1170 ;;		line 39 in file "SPI.c"
  1171 ;; Parameters:    Size  Location     Type
  1172 ;;		None
  1173 ;; Auto vars:     Size  Location     Type
  1174 ;;		None
  1175 ;; Return value:  Size  Location     Type
  1176 ;;                  1    wreg      void 
  1177 ;; Registers used:
  1178 ;;		wreg
  1179 ;; Tracked objects:
  1180 ;;		On entry : 0/0
  1181 ;;		On exit  : 0/0
  1182 ;;		Unchanged: 0/0
  1183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1184 ;;      Params:         0       0       0       0       0
  1185 ;;      Locals:         0       0       0       0       0
  1186 ;;      Temps:          3       0       0       0       0
  1187 ;;      Totals:         3       0       0       0       0
  1188 ;;Total ram usage:        3 bytes
  1189 ;; Hardware stack levels used:    1
  1190 ;; This function calls:
  1191 ;;		Nothing
  1192 ;; This function is called by:
  1193 ;;		Interrupt level 1
  1194 ;; This function uses a non-reentrant model
  1195 ;;
  1196                           
  1197                           
  1198                           ;psect for function _ISR
  1199  00ED                     _ISR:	
  1200  00ED                     i1l764:	
  1201                           
  1202                           ;SPI.c: 40:     INTCONbits.GIE = 0;
  1203  00ED  138B               	bcf	11,7	;volatile
  1204                           
  1205                           ;SPI.c: 41:     INTCONbits.PEIE = 0;
  1206  00EE  130B               	bcf	11,6	;volatile
  1207                           
  1208                           ;SPI.c: 43:     if (PIR1bits.RCIF == 1){
  1209  00EF  1283               	bcf	3,5	;RP0=0, select bank0
  1210  00F0  1303               	bcf	3,6	;RP1=0, select bank0
  1211  00F1  1E8C               	btfss	12,5	;volatile
  1212  00F2  28F4               	goto	u8_21
  1213  00F3  28F5               	goto	u8_20
  1214  00F4                     u8_21:	
  1215  00F4  28F9               	goto	i1l768
  1216  00F5                     u8_20:	
  1217  00F5                     i1l766:	
  1218                           
  1219                           ;SPI.c: 44:         ttl = RCREG;
  1220  00F5  081A               	movf	26,w	;volatile
  1221  00F6  00F0               	movwf	??_ISR
  1222  00F7  0870               	movf	??_ISR,w
  1223  00F8  00F7               	movwf	_ttl
  1224  00F9                     i1l768:	
  1225                           
  1226                           ;SPI.c: 47:     INTCONbits.GIE = 1;
  1227  00F9  178B               	bsf	11,7	;volatile
  1228  00FA                     i1l770:	
  1229                           
  1230                           ;SPI.c: 48:     INTCONbits.PEIE = 1;
  1231  00FA  170B               	bsf	11,6	;volatile
  1232  00FB                     i1l46:	
  1233  00FB  0872               	movf	??_ISR+2,w
  1234  00FC  008A               	movwf	10
  1235  00FD  0E71               	swapf	(??_ISR+1)^(0+4294967168),w
  1236  00FE  0083               	movwf	3
  1237  00FF  0EFE               	swapf	btemp,f
  1238  0100  0E7E               	swapf	btemp,w
  1239  0101  0009               	retfie
  1240  0102                     __end_of_ISR:	
  1241  007E                     btemp	set	126	;btemp
  1242  007E                     wtemp0	set	126
  1243                           
  1244                           	psect	intentry
  1245  0004                     __pintentry:	
  1246                           ;incstack = 0
  1247                           ; Regs used in _ISR: [wreg]
  1248                           
  1249  0004                     interrupt_function:	
  1250  007E                     saved_w	set	btemp
  1251  0004  00FE               	movwf	btemp
  1252  0005  0E03               	swapf	3,w
  1253  0006  00F1               	movwf	??_ISR+1
  1254  0007  080A               	movf	10,w
  1255  0008  00F2               	movwf	??_ISR+2
  1256  0009  120A  118A  28ED   	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80      2       2
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_spiInit

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     789
                                              0 BANK0      2     2      0
                         _initSerial
                           _send_int
                            _spiInit
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      15
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _spiInit                                              4     1      3     360
                                              3 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _send_int                                             2     0      2     250
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _initSerial                                           2     0      2     164
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initSerial
   _send_int
   _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      2       2       5        2.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       C      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Feb 16 15:05:56 2020

             __CFG_CP$OFF 0000               _SSPSTATbits 0094                        l80 00D6  
                      l90 010C                        l84 00D6                        l87 0102  
                      u10 011C                        u11 011B                        u90 00DF  
                      u91 00DE                       l110 0116                       l113 011C  
                     l106 00E7                       l107 00EC                       l124 0115  
                     l116 0122                       l810 00DF                       l820 009E  
                     l812 00E1                       l716 0116                       l900 0078  
                     l830 00B6                       l822 00A4                       l814 00E3  
                     l902 0086                       l840 00D3                       l832 00BF  
                     l824 00A7                       l816 00E6                       l808 00D8  
                     l752 011E                       l904 008F                       l834 00C2  
                     l826 00AA                       l818 0097                       l842 0102  
                     l754 010D                       l836 00C9                       l828 00B3  
                     l844 0108                       l756 0112                       l838 00CC  
                     l880 0023                       l890 0046                       l882 0024  
                     l892 0050                       l884 002D                       l876 0016  
                     l894 0056                       l886 0036                       l878 001A  
                     l896 0060                       l888 003C                       l898 006A  
                     u100 00B3                       u101 00B2                       u110 00BF  
                     u111 00BE                       u120 00C9                       u121 00C8  
                     u130 00D3                       u131 00D2                       u140 0108  
                     u141 0107                       u157 004C                       u167 0066  
            __CFG_CPD$OFF 0000                       _ISR 00ED                       _ttl 0077  
            __CFG_LVP$OFF 0000                      ?_ISR 0070                      i1l46 00FB  
                    u8_20 00F5                      u8_21 00F4              __CFG_WRT$OFF 0000  
                    _main 0016                      btemp 007E                      start 000C  
           __CFG_IESO$OFF 0000                     ??_ISR 0070                     ?_main 0070  
           __CFG_WDTE$OFF 0000                     _ANSEL 0188                     i1l770 00FA  
                   i1l764 00ED                     i1l766 00F5                     i1l768 00F9  
                   _RCREG 001A                     _RCSTA 0018                     _SPBRG 0099  
                   _PORTB 0006                     _PORTD 0008                     _TRISB 0086  
                   _TRISD 0088                     _TXREG 0019                     _TXSTA 0098  
          __CFG_FCMEN$OFF 0000                     _read1 0079                     _read2 0078  
          __CFG_BOREN$OFF 0000                     pclath 000A           __end_of_spiInit 00ED  
         __end_of_spiRead 0116                     status 0003                     wtemp0 007E  
          __CFG_MCLRE$OFF 0000           __initialization 000F              __end_of_main 0097  
                  ??_main 0020                    _ANSELH 0189                    _SPBRGH 009A  
                  _TRISC2 043A                    _TRISC3 043B                    _TRISC5 043D  
                  _SSPCON 0014                    _SSPBUF 0013            __CFG_PWRTE$OFF 0000  
        __end_of_send_int 010D                    saved_w 007E          __end_of_spiWrite 0123  
               ??_spiInit 0076                 ??_spiRead 0073   __end_of__initialization 0012  
          __pcstackCOMMON 0070                __pmaintext 0016                __pintentry 0004  
 __size_of_spiReceiveWait 0007                   _SSPSTAT 0094               send_int@msg 0073  
               ?_send_int 0073                 ?_spiWrite 0070                _initSerial 0097  
                 __ptext1 011D                   __ptext2 010D                   __ptext3 0116  
                 __ptext4 00D7                   __ptext5 0102                   __ptext6 0097  
                 __ptext7 00ED              __size_of_ISR 0015                   _spiInit 00D7  
                 _spiRead 010D      end_of_initialization 0012                ??_send_int 0075  
              ??_spiWrite 0073                 _PORTCbits 0007                 _TRISCbits 0087  
             spiWrite@dat 0073                 _TXSTAbits 0098               ?_initSerial 0073  
          _spiReceiveWait 0116               _BAUDCTLbits 0187       start_initialization 000F  
             __end_of_ISR 0102  __CFG_FOSC$INTRC_NOCLKOUT 0000    __end_of_spiReceiveWait 011D  
      initSerial@baudrate 0073               __pbssCOMMON 0077                 ___latbits 0002  
           __pcstackBANK0 0020       __size_of_initSerial 0040           ?_spiReceiveWait 0070  
       __size_of_send_int 000B         __size_of_spiWrite 0006                  ?_spiInit 0073  
                ?_spiRead 0070      spiInit@sTransmitEdge 0075         interrupt_function 0004  
                _PIE1bits 008C        spiInit@sDataSample 0073                  _PIR1bits 000C  
            ??_initSerial 0075          __size_of_spiInit 0016          __size_of_spiRead 0009  
       __CFG_BOR4V$BOR40V 0000        __end_of_initSerial 00D7             __size_of_main 0081  
                _send_int 0102                  _spiWrite 011D              spiInit@sType 0076  
       spiInit@sClockIdle 0074                _INTCONbits 000B                  intlevel1 0000  
        ??_spiReceiveWait 0073  
