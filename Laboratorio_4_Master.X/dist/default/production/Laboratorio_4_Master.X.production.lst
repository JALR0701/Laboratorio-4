

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Feb 12 15:49:05 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	intentry,global,class=CODE,delta=2
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 2.10
    15                           ; Generated 31/07/2019 GMT
    16                           ; 
    17                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F887 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  008F                     	;# 
    93  0090                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0093                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0095                     	;# 
   101  0096                     	;# 
   102  0097                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009A                     	;# 
   106  009B                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  0105                     	;# 
   112  0107                     	;# 
   113  0108                     	;# 
   114  0109                     	;# 
   115  010C                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  0185                     	;# 
   121  0187                     	;# 
   122  0188                     	;# 
   123  0189                     	;# 
   124  018C                     	;# 
   125  018D                     	;# 
   126  0000                     	;# 
   127  0001                     	;# 
   128  0002                     	;# 
   129  0003                     	;# 
   130  0004                     	;# 
   131  0005                     	;# 
   132  0006                     	;# 
   133  0007                     	;# 
   134  0008                     	;# 
   135  0009                     	;# 
   136  000A                     	;# 
   137  000B                     	;# 
   138  000C                     	;# 
   139  000D                     	;# 
   140  000E                     	;# 
   141  000E                     	;# 
   142  000F                     	;# 
   143  0010                     	;# 
   144  0011                     	;# 
   145  0012                     	;# 
   146  0013                     	;# 
   147  0014                     	;# 
   148  0015                     	;# 
   149  0015                     	;# 
   150  0016                     	;# 
   151  0017                     	;# 
   152  0018                     	;# 
   153  0019                     	;# 
   154  001A                     	;# 
   155  001B                     	;# 
   156  001B                     	;# 
   157  001C                     	;# 
   158  001D                     	;# 
   159  001E                     	;# 
   160  001F                     	;# 
   161  0081                     	;# 
   162  0085                     	;# 
   163  0086                     	;# 
   164  0087                     	;# 
   165  0088                     	;# 
   166  0089                     	;# 
   167  008C                     	;# 
   168  008D                     	;# 
   169  008E                     	;# 
   170  008F                     	;# 
   171  0090                     	;# 
   172  0091                     	;# 
   173  0092                     	;# 
   174  0093                     	;# 
   175  0093                     	;# 
   176  0093                     	;# 
   177  0094                     	;# 
   178  0095                     	;# 
   179  0096                     	;# 
   180  0097                     	;# 
   181  0098                     	;# 
   182  0099                     	;# 
   183  009A                     	;# 
   184  009B                     	;# 
   185  009C                     	;# 
   186  009D                     	;# 
   187  009E                     	;# 
   188  009F                     	;# 
   189  0105                     	;# 
   190  0107                     	;# 
   191  0108                     	;# 
   192  0109                     	;# 
   193  010C                     	;# 
   194  010C                     	;# 
   195  010D                     	;# 
   196  010E                     	;# 
   197  010F                     	;# 
   198  0185                     	;# 
   199  0187                     	;# 
   200  0188                     	;# 
   201  0189                     	;# 
   202  018C                     	;# 
   203  018D                     	;# 
   204  0000                     	;# 
   205  0001                     	;# 
   206  0002                     	;# 
   207  0003                     	;# 
   208  0004                     	;# 
   209  0005                     	;# 
   210  0006                     	;# 
   211  0007                     	;# 
   212  0008                     	;# 
   213  0009                     	;# 
   214  000A                     	;# 
   215  000B                     	;# 
   216  000C                     	;# 
   217  000D                     	;# 
   218  000E                     	;# 
   219  000E                     	;# 
   220  000F                     	;# 
   221  0010                     	;# 
   222  0011                     	;# 
   223  0012                     	;# 
   224  0013                     	;# 
   225  0014                     	;# 
   226  0015                     	;# 
   227  0015                     	;# 
   228  0016                     	;# 
   229  0017                     	;# 
   230  0018                     	;# 
   231  0019                     	;# 
   232  001A                     	;# 
   233  001B                     	;# 
   234  001B                     	;# 
   235  001C                     	;# 
   236  001D                     	;# 
   237  001E                     	;# 
   238  001F                     	;# 
   239  0081                     	;# 
   240  0085                     	;# 
   241  0086                     	;# 
   242  0087                     	;# 
   243  0088                     	;# 
   244  0089                     	;# 
   245  008C                     	;# 
   246  008D                     	;# 
   247  008E                     	;# 
   248  008F                     	;# 
   249  0090                     	;# 
   250  0091                     	;# 
   251  0092                     	;# 
   252  0093                     	;# 
   253  0093                     	;# 
   254  0093                     	;# 
   255  0094                     	;# 
   256  0095                     	;# 
   257  0096                     	;# 
   258  0097                     	;# 
   259  0098                     	;# 
   260  0099                     	;# 
   261  009A                     	;# 
   262  009B                     	;# 
   263  009C                     	;# 
   264  009D                     	;# 
   265  009E                     	;# 
   266  009F                     	;# 
   267  0105                     	;# 
   268  0107                     	;# 
   269  0108                     	;# 
   270  0109                     	;# 
   271  010C                     	;# 
   272  010C                     	;# 
   273  010D                     	;# 
   274  010E                     	;# 
   275  010F                     	;# 
   276  0185                     	;# 
   277  0187                     	;# 
   278  0188                     	;# 
   279  0189                     	;# 
   280  018C                     	;# 
   281  018D                     	;# 
   282  0000                     	;# 
   283  0001                     	;# 
   284  0002                     	;# 
   285  0003                     	;# 
   286  0004                     	;# 
   287  0005                     	;# 
   288  0006                     	;# 
   289  0007                     	;# 
   290  0008                     	;# 
   291  0009                     	;# 
   292  000A                     	;# 
   293  000B                     	;# 
   294  000C                     	;# 
   295  000D                     	;# 
   296  000E                     	;# 
   297  000E                     	;# 
   298  000F                     	;# 
   299  0010                     	;# 
   300  0011                     	;# 
   301  0012                     	;# 
   302  0013                     	;# 
   303  0014                     	;# 
   304  0015                     	;# 
   305  0015                     	;# 
   306  0016                     	;# 
   307  0017                     	;# 
   308  0018                     	;# 
   309  0019                     	;# 
   310  001A                     	;# 
   311  001B                     	;# 
   312  001B                     	;# 
   313  001C                     	;# 
   314  001D                     	;# 
   315  001E                     	;# 
   316  001F                     	;# 
   317  0081                     	;# 
   318  0085                     	;# 
   319  0086                     	;# 
   320  0087                     	;# 
   321  0088                     	;# 
   322  0089                     	;# 
   323  008C                     	;# 
   324  008D                     	;# 
   325  008E                     	;# 
   326  008F                     	;# 
   327  0090                     	;# 
   328  0091                     	;# 
   329  0092                     	;# 
   330  0093                     	;# 
   331  0093                     	;# 
   332  0093                     	;# 
   333  0094                     	;# 
   334  0095                     	;# 
   335  0096                     	;# 
   336  0097                     	;# 
   337  0098                     	;# 
   338  0099                     	;# 
   339  009A                     	;# 
   340  009B                     	;# 
   341  009C                     	;# 
   342  009D                     	;# 
   343  009E                     	;# 
   344  009F                     	;# 
   345  0105                     	;# 
   346  0107                     	;# 
   347  0108                     	;# 
   348  0109                     	;# 
   349  010C                     	;# 
   350  010C                     	;# 
   351  010D                     	;# 
   352  010E                     	;# 
   353  010F                     	;# 
   354  0185                     	;# 
   355  0187                     	;# 
   356  0188                     	;# 
   357  0189                     	;# 
   358  018C                     	;# 
   359  018D                     	;# 
   360  0019                     _TXREG	set	25
   361  0018                     _RCSTA	set	24
   362  0007                     _PORTC	set	7
   363  0006                     _PORTB	set	6
   364  001A                     _RCREG	set	26
   365  000C                     _PIR1bits	set	12
   366  000B                     _INTCONbits	set	11
   367  0098                     _TXSTAbits	set	152
   368  0099                     _SPBRG	set	153
   369  009A                     _SPBRGH	set	154
   370  0098                     _TXSTA	set	152
   371  008C                     _PIE1bits	set	140
   372  0087                     _TRISC	set	135
   373  0086                     _TRISB	set	134
   374  0187                     _BAUDCTLbits	set	391
   375                           
   376                           ; #config settings
   377  0000                     
   378                           	psect	cinit
   379  000F                     start_initialization:	
   380  000F                     __initialization:	
   381                           
   382                           ; Clear objects allocated to COMMON
   383  000F  01F5               	clrf	__pbssCOMMON& (0+127)
   384  0010                     end_of_initialization:	
   385                           ;End of C runtime variable initialization code
   386                           
   387  0010                     __end_of__initialization:	
   388  0010  0183               	clrf	3
   389  0011  120A  118A  2814   	ljmp	_main	;jump to C main() function
   390                           
   391                           	psect	bssCOMMON
   392  0075                     __pbssCOMMON:	
   393  0075                     _ttl:	
   394  0075                     	ds	1
   395                           
   396                           	psect	cstackCOMMON
   397  0070                     __pcstackCOMMON:	
   398  0070                     ?_ISR:	
   399  0070                     ??_ISR:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ?_main:	
   403                           ; 1 bytes @ 0x0
   404                           
   405                           
   406                           ; 1 bytes @ 0x0
   407  0070                     	ds	3
   408  0073                     ?_initSerial:	
   409  0073                     ?_send_int:	
   410                           ; 1 bytes @ 0x3
   411                           
   412  0073                     initSerial@baudrate:	
   413                           ; 1 bytes @ 0x3
   414                           
   415  0073                     send_int@msg:	
   416                           ; 2 bytes @ 0x3
   417                           
   418                           
   419                           ; 2 bytes @ 0x3
   420  0073                     	ds	2
   421  0075                     ??_initSerial:	
   422  0075                     ??_send_int:	
   423                           ; 1 bytes @ 0x5
   424                           
   425  0075                     ??_main:	
   426                           ; 1 bytes @ 0x5
   427                           
   428                           
   429                           	psect	maintext
   430  0014                     __pmaintext:	
   431                           ; 1 bytes @ 0x5
   432 ;;
   433 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   434 ;;
   435 ;; *************** function _main *****************
   436 ;; Defined at:
   437 ;;		line 44 in file "SPI.c"
   438 ;; Parameters:    Size  Location     Type
   439 ;;		None
   440 ;; Auto vars:     Size  Location     Type
   441 ;;		None
   442 ;; Return value:  Size  Location     Type
   443 ;;                  1    wreg      void 
   444 ;; Registers used:
   445 ;;		wreg, status,2, status,0, pclath, cstack
   446 ;; Tracked objects:
   447 ;;		On entry : B00/0
   448 ;;		On exit  : 0/0
   449 ;;		Unchanged: 0/0
   450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   451 ;;      Params:         0       0       0       0       0
   452 ;;      Locals:         0       0       0       0       0
   453 ;;      Temps:          0       0       0       0       0
   454 ;;      Totals:         0       0       0       0       0
   455 ;;Total ram usage:        0 bytes
   456 ;; Hardware stack levels required when called:    2
   457 ;; This function calls:
   458 ;;		_initSerial
   459 ;;		_send_int
   460 ;; This function is called by:
   461 ;;		Startup code after reset
   462 ;; This function uses a non-reentrant model
   463 ;;
   464                           
   465                           
   466                           ;psect for function _main
   467  0014                     _main:	
   468  0014                     l749:	
   469                           ;incstack = 0
   470                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   471                           
   472                           
   473                           ;SPI.c: 46:     TRISB = 0;
   474  0014  1683               	bsf	3,5	;RP0=1, select bank1
   475  0015  1303               	bcf	3,6	;RP1=0, select bank1
   476  0016  0186               	clrf	6	;volatile
   477                           
   478                           ;SPI.c: 47:     TRISC = 0;
   479  0017  0187               	clrf	7	;volatile
   480                           
   481                           ;SPI.c: 49:     PORTB = 0;
   482  0018  1283               	bcf	3,5	;RP0=0, select bank0
   483  0019  1303               	bcf	3,6	;RP1=0, select bank0
   484  001A  0186               	clrf	6	;volatile
   485                           
   486                           ;SPI.c: 50:     PORTC = 0;
   487  001B  0187               	clrf	7	;volatile
   488  001C                     l751:	
   489                           
   490                           ;SPI.c: 52:     initSerial(9600);
   491  001C  3080               	movlw	128
   492  001D  00F3               	movwf	initSerial@baudrate
   493  001E  3025               	movlw	37
   494  001F  00F4               	movwf	initSerial@baudrate+1
   495  0020  120A  118A  205A  120A  118A  	fcall	_initSerial
   496  0025                     l753:	
   497                           
   498                           ;SPI.c: 56:         send_int(255);
   499  0025  30FF               	movlw	255
   500  0026  00F3               	movwf	send_int@msg
   501  0027  3000               	movlw	0
   502  0028  00F4               	movwf	send_int@msg+1
   503  0029  120A  118A  20AF  120A  118A  	fcall	_send_int
   504  002E                     l755:	
   505                           
   506                           ;SPI.c: 57:         send_int(5);
   507  002E  3005               	movlw	5
   508  002F  00F3               	movwf	send_int@msg
   509  0030  3000               	movlw	0
   510  0031  00F4               	movwf	send_int@msg+1
   511  0032  120A  118A  20AF  120A  118A  	fcall	_send_int
   512  0037                     l757:	
   513                           
   514                           ;SPI.c: 58:         send_int(4);
   515  0037  3004               	movlw	4
   516  0038  00F3               	movwf	send_int@msg
   517  0039  3000               	movlw	0
   518  003A  00F4               	movwf	send_int@msg+1
   519  003B  120A  118A  20AF  120A  118A  	fcall	_send_int
   520  0040                     l759:	
   521                           
   522                           ;SPI.c: 59:         send_int(3);
   523  0040  3003               	movlw	3
   524  0041  00F3               	movwf	send_int@msg
   525  0042  3000               	movlw	0
   526  0043  00F4               	movwf	send_int@msg+1
   527  0044  120A  118A  20AF  120A  118A  	fcall	_send_int
   528  0049                     l761:	
   529                           
   530                           ;SPI.c: 60:         send_int(2);
   531  0049  3002               	movlw	2
   532  004A  00F3               	movwf	send_int@msg
   533  004B  3000               	movlw	0
   534  004C  00F4               	movwf	send_int@msg+1
   535  004D  120A  118A  20AF  120A  118A  	fcall	_send_int
   536  0052                     l763:	
   537                           
   538                           ;SPI.c: 61:         PORTB = ttl;
   539  0052  0875               	movf	_ttl,w
   540  0053  1283               	bcf	3,5	;RP0=0, select bank0
   541  0054  1303               	bcf	3,6	;RP1=0, select bank0
   542  0055  0086               	movwf	6	;volatile
   543  0056  2825               	goto	l753
   544  0057  120A  118A  280C   	ljmp	start
   545  005A                     __end_of_main:	
   546                           
   547                           	psect	text1
   548  00AF                     __ptext1:	
   549 ;; *************** function _send_int *****************
   550 ;; Defined at:
   551 ;;		line 32 in file "Serial_Init.c"
   552 ;; Parameters:    Size  Location     Type
   553 ;;  msg             2    3[COMMON] int 
   554 ;; Auto vars:     Size  Location     Type
   555 ;;		None
   556 ;; Return value:  Size  Location     Type
   557 ;;                  1    wreg      void 
   558 ;; Registers used:
   559 ;;		wreg
   560 ;; Tracked objects:
   561 ;;		On entry : 0/0
   562 ;;		On exit  : 0/0
   563 ;;		Unchanged: 0/0
   564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   565 ;;      Params:         2       0       0       0       0
   566 ;;      Locals:         0       0       0       0       0
   567 ;;      Temps:          0       0       0       0       0
   568 ;;      Totals:         2       0       0       0       0
   569 ;;Total ram usage:        2 bytes
   570 ;; Hardware stack levels used:    1
   571 ;; Hardware stack levels required when called:    1
   572 ;; This function calls:
   573 ;;		Nothing
   574 ;; This function is called by:
   575 ;;		_main
   576 ;; This function uses a non-reentrant model
   577 ;;
   578                           
   579                           
   580                           ;psect for function _send_int
   581  00AF                     _send_int:	
   582  00AF                     l745:	
   583                           ;incstack = 0
   584                           ; Regs used in _send_int: [wreg]
   585                           
   586  00AF                     l67:	
   587                           ;Serial_Init.c: 34:     }
   588                           
   589                           
   590                           ;Serial_Init.c: 33:     while (TXSTAbits.TRMT == 0){
   591  00AF  1683               	bsf	3,5	;RP0=1, select bank1
   592  00B0  1303               	bcf	3,6	;RP1=0, select bank1
   593  00B1  1C98               	btfss	24,1	;volatile
   594  00B2  28B4               	goto	u111
   595  00B3  28B5               	goto	u110
   596  00B4                     u111:	
   597  00B4  28AF               	goto	l67
   598  00B5                     u110:	
   599  00B5                     l747:	
   600                           
   601                           ;Serial_Init.c: 35:     TXREG = msg;
   602  00B5  0873               	movf	send_int@msg,w
   603  00B6  1283               	bcf	3,5	;RP0=0, select bank0
   604  00B7  1303               	bcf	3,6	;RP1=0, select bank0
   605  00B8  0099               	movwf	25	;volatile
   606  00B9                     l70:	
   607  00B9  0008               	return
   608  00BA                     __end_of_send_int:	
   609                           
   610                           	psect	text2
   611  005A                     __ptext2:	
   612 ;; *************** function _initSerial *****************
   613 ;; Defined at:
   614 ;;		line 5 in file "Serial_Init.c"
   615 ;; Parameters:    Size  Location     Type
   616 ;;  baudrate        2    3[COMMON] unsigned int 
   617 ;; Auto vars:     Size  Location     Type
   618 ;;		None
   619 ;; Return value:  Size  Location     Type
   620 ;;                  1    wreg      void 
   621 ;; Registers used:
   622 ;;		wreg, status,2, status,0
   623 ;; Tracked objects:
   624 ;;		On entry : 0/0
   625 ;;		On exit  : 0/0
   626 ;;		Unchanged: 0/0
   627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   628 ;;      Params:         2       0       0       0       0
   629 ;;      Locals:         0       0       0       0       0
   630 ;;      Temps:          0       0       0       0       0
   631 ;;      Totals:         2       0       0       0       0
   632 ;;Total ram usage:        2 bytes
   633 ;; Hardware stack levels used:    1
   634 ;; Hardware stack levels required when called:    1
   635 ;; This function calls:
   636 ;;		Nothing
   637 ;; This function is called by:
   638 ;;		_main
   639 ;; This function uses a non-reentrant model
   640 ;;
   641                           
   642                           
   643                           ;psect for function _initSerial
   644  005A                     _initSerial:	
   645  005A                     l719:	
   646                           ;incstack = 0
   647                           ; Regs used in _initSerial: [wreg+status,2+status,0]
   648                           
   649                           
   650                           ;Serial_Init.c: 6:     INTCONbits.GIE = 1;
   651  005A  178B               	bsf	11,7	;volatile
   652                           
   653                           ;Serial_Init.c: 7:     INTCONbits.PEIE = 1;
   654  005B  170B               	bsf	11,6	;volatile
   655  005C                     l721:	
   656                           
   657                           ;Serial_Init.c: 9:     TRISC = 0x80;
   658  005C  3080               	movlw	128
   659  005D  1683               	bsf	3,5	;RP0=1, select bank1
   660  005E  1303               	bcf	3,6	;RP1=0, select bank1
   661  005F  0087               	movwf	7	;volatile
   662  0060                     l723:	
   663                           
   664                           ;Serial_Init.c: 11:     PIE1bits.RCIE = 1;
   665  0060  168C               	bsf	12,5	;volatile
   666                           
   667                           ;Serial_Init.c: 13:     TXSTA=0b00100110;
   668  0061  3026               	movlw	38
   669  0062  0098               	movwf	24	;volatile
   670                           
   671                           ;Serial_Init.c: 15:     RCSTA=0b10010000;
   672  0063  3090               	movlw	144
   673  0064  1283               	bcf	3,5	;RP0=0, select bank0
   674  0065  1303               	bcf	3,6	;RP1=0, select bank0
   675  0066  0098               	movwf	24	;volatile
   676  0067                     l725:	
   677                           
   678                           ;Serial_Init.c: 17:     BAUDCTLbits.BRG16 = 1;
   679  0067  1683               	bsf	3,5	;RP0=1, select bank3
   680  0068  1703               	bsf	3,6	;RP1=1, select bank3
   681  0069  1587               	bsf	7,3	;volatile
   682  006A                     l727:	
   683                           
   684                           ;Serial_Init.c: 18:     SPBRGH = 0;
   685  006A  1683               	bsf	3,5	;RP0=1, select bank1
   686  006B  1303               	bcf	3,6	;RP1=0, select bank1
   687  006C  019A               	clrf	26	;volatile
   688  006D                     l729:	
   689                           
   690                           ;Serial_Init.c: 21:     if(baudrate == 9600){
   691  006D  3080               	movlw	128
   692  006E  0673               	xorwf	initSerial@baudrate,w
   693  006F  3025               	movlw	37
   694  0070  1903               	skipnz
   695  0071  0674               	xorwf	initSerial@baudrate+1,w
   696  0072  1D03               	btfss	3,2
   697  0073  2875               	goto	u71
   698  0074  2876               	goto	u70
   699  0075                     u71:	
   700  0075  2879               	goto	l733
   701  0076                     u70:	
   702  0076                     l731:	
   703                           
   704                           ;Serial_Init.c: 22:         SPBRG = 103;
   705  0076  3067               	movlw	103
   706  0077  0099               	movwf	25	;volatile
   707                           
   708                           ;Serial_Init.c: 23:     } else if (baudrate == 10417){
   709  0078  2899               	goto	l64
   710  0079                     l733:	
   711  0079  30B1               	movlw	177
   712  007A  0673               	xorwf	initSerial@baudrate,w
   713  007B  3028               	movlw	40
   714  007C  1903               	skipnz
   715  007D  0674               	xorwf	initSerial@baudrate+1,w
   716  007E  1D03               	btfss	3,2
   717  007F  2881               	goto	u81
   718  0080  2882               	goto	u80
   719  0081                     u81:	
   720  0081  2885               	goto	l737
   721  0082                     u80:	
   722  0082                     l735:	
   723                           
   724                           ;Serial_Init.c: 24:         SPBRG = 95;
   725  0082  305F               	movlw	95
   726  0083  0099               	movwf	25	;volatile
   727                           
   728                           ;Serial_Init.c: 25:     } else if (baudrate == 19200){
   729  0084  2899               	goto	l64
   730  0085                     l737:	
   731  0085  304B               	movlw	75
   732  0086  0674               	xorwf	initSerial@baudrate+1,w
   733  0087  0473               	iorwf	initSerial@baudrate,w
   734  0088  1D03               	btfss	3,2
   735  0089  288B               	goto	u91
   736  008A  288C               	goto	u90
   737  008B                     u91:	
   738  008B  288F               	goto	l741
   739  008C                     u90:	
   740  008C                     l739:	
   741                           
   742                           ;Serial_Init.c: 26:         SPBRG = 51;
   743  008C  3033               	movlw	51
   744  008D  0099               	movwf	25	;volatile
   745                           
   746                           ;Serial_Init.c: 27:     } else if (baudrate == 57600){
   747  008E  2899               	goto	l64
   748  008F                     l741:	
   749  008F  30E1               	movlw	225
   750  0090  0674               	xorwf	initSerial@baudrate+1,w
   751  0091  0473               	iorwf	initSerial@baudrate,w
   752  0092  1D03               	btfss	3,2
   753  0093  2895               	goto	u101
   754  0094  2896               	goto	u100
   755  0095                     u101:	
   756  0095  2899               	goto	l60
   757  0096                     u100:	
   758  0096                     l743:	
   759                           
   760                           ;Serial_Init.c: 28:         SPBRG = 16;
   761  0096  3010               	movlw	16
   762  0097  0099               	movwf	25	;volatile
   763  0098  2899               	goto	l64
   764  0099                     l60:	
   765  0099                     l64:	
   766  0099  0008               	return
   767  009A                     __end_of_initSerial:	
   768                           
   769                           	psect	text3
   770  009A                     __ptext3:	
   771 ;; *************** function _ISR *****************
   772 ;; Defined at:
   773 ;;		line 32 in file "SPI.c"
   774 ;; Parameters:    Size  Location     Type
   775 ;;		None
   776 ;; Auto vars:     Size  Location     Type
   777 ;;		None
   778 ;; Return value:  Size  Location     Type
   779 ;;                  1    wreg      void 
   780 ;; Registers used:
   781 ;;		wreg
   782 ;; Tracked objects:
   783 ;;		On entry : 0/0
   784 ;;		On exit  : 0/0
   785 ;;		Unchanged: 0/0
   786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   787 ;;      Params:         0       0       0       0       0
   788 ;;      Locals:         0       0       0       0       0
   789 ;;      Temps:          3       0       0       0       0
   790 ;;      Totals:         3       0       0       0       0
   791 ;;Total ram usage:        3 bytes
   792 ;; Hardware stack levels used:    1
   793 ;; This function calls:
   794 ;;		Nothing
   795 ;; This function is called by:
   796 ;;		Interrupt level 1
   797 ;; This function uses a non-reentrant model
   798 ;;
   799                           
   800                           
   801                           ;psect for function _ISR
   802  009A                     _ISR:	
   803  009A                     i1l695:	
   804                           
   805                           ;SPI.c: 33:     INTCONbits.GIE = 0;
   806  009A  138B               	bcf	11,7	;volatile
   807                           
   808                           ;SPI.c: 34:     INTCONbits.PEIE = 0;
   809  009B  130B               	bcf	11,6	;volatile
   810                           
   811                           ;SPI.c: 36:     if (PIR1bits.RCIF == 1){
   812  009C  1283               	bcf	3,5	;RP0=0, select bank0
   813  009D  1303               	bcf	3,6	;RP1=0, select bank0
   814  009E  1E8C               	btfss	12,5	;volatile
   815  009F  28A1               	goto	u6_21
   816  00A0  28A2               	goto	u6_20
   817  00A1                     u6_21:	
   818  00A1  28A6               	goto	i1l699
   819  00A2                     u6_20:	
   820  00A2                     i1l697:	
   821                           
   822                           ;SPI.c: 37:         ttl = RCREG;
   823  00A2  081A               	movf	26,w	;volatile
   824  00A3  00F0               	movwf	??_ISR
   825  00A4  0870               	movf	??_ISR,w
   826  00A5  00F5               	movwf	_ttl
   827  00A6                     i1l699:	
   828                           
   829                           ;SPI.c: 40:     INTCONbits.GIE = 1;
   830  00A6  178B               	bsf	11,7	;volatile
   831  00A7                     i1l701:	
   832                           
   833                           ;SPI.c: 41:     INTCONbits.PEIE = 1;
   834  00A7  170B               	bsf	11,6	;volatile
   835  00A8                     i1l26:	
   836  00A8  0872               	movf	??_ISR+2,w
   837  00A9  008A               	movwf	10
   838  00AA  0E71               	swapf	(??_ISR+1)^(0+4294967168),w
   839  00AB  0083               	movwf	3
   840  00AC  0EFE               	swapf	btemp,f
   841  00AD  0E7E               	swapf	btemp,w
   842  00AE  0009               	retfie
   843  00AF                     __end_of_ISR:	
   844  007E                     btemp	set	126	;btemp
   845  007E                     wtemp0	set	126
   846                           
   847                           	psect	intentry
   848  0004                     __pintentry:	
   849                           ;incstack = 0
   850                           ; Regs used in _ISR: [wreg]
   851                           
   852  0004                     interrupt_function:	
   853  007E                     saved_w	set	btemp
   854  0004  00FE               	movwf	btemp
   855  0005  0E03               	swapf	3,w
   856  0006  00F1               	movwf	??_ISR+1
   857  0007  080A               	movf	10,w
   858  0008  00F2               	movwf	??_ISR+2
   859  0009  120A  118A  289A   	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       6
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_initSerial
    _main->_send_int

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     566
                         _initSerial
                           _send_int
 ---------------------------------------------------------------------------------
 (1) _send_int                                             2     0      2     402
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _initSerial                                           2     0      2     164
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initSerial
   _send_int

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       6       1       42.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       6       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       6      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Feb 12 15:49:05 2020

             __CFG_CP$OFF 0000                        l60 0099                        l70 00B9  
                      l64 0099                        l67 00AF                        u70 0076  
                      u71 0075                        u80 0082                        u81 0081  
                      u90 008C                        u91 008B                       l721 005C  
                     l731 0076                       l723 0060                       l741 008F  
                     l733 0079                       l725 0067                       l743 0096  
                     l735 0082                       l727 006A                       l719 005A  
                     l751 001C                       l737 0085                       l729 006D  
                     l745 00AF                       l761 0049                       l753 0025  
                     l739 008C                       l747 00B5                       l763 0052  
                     l755 002E                       l757 0037                       l749 0014  
                     l759 0040                       u100 0096                       u101 0095  
                     u110 00B5                       u111 00B4              __CFG_CPD$OFF 0000  
                     _ISR 009A                       _ttl 0075              __CFG_LVP$OFF 0000  
                    ?_ISR 0070                      i1l26 00A8                      u6_20 00A2  
                    u6_21 00A1              __CFG_WRT$OFF 0000                      _main 0014  
                    btemp 007E                      start 000C             __CFG_IESO$OFF 0000  
                   ??_ISR 0070                     ?_main 0070             __CFG_WDTE$OFF 0000  
                   i1l701 00A7                     i1l695 009A                     i1l697 00A2  
                   i1l699 00A6                     _RCREG 001A                     _RCSTA 0018  
                   _SPBRG 0099                     _PORTB 0006                     _PORTC 0007  
                   _TRISB 0086                     _TRISC 0087                     _TXREG 0019  
                   _TXSTA 0098            __CFG_FCMEN$OFF 0000            __CFG_BOREN$OFF 0000  
                   pclath 000A                     status 0003                     wtemp0 007E  
          __CFG_MCLRE$OFF 0000           __initialization 000F              __end_of_main 005A  
                  ??_main 0075                    _SPBRGH 009A            __CFG_PWRTE$OFF 0000  
        __end_of_send_int 00BA                    saved_w 007E   __end_of__initialization 0010  
          __pcstackCOMMON 0070                __pmaintext 0014                __pintentry 0004  
             send_int@msg 0073                 ?_send_int 0073                _initSerial 005A  
                 __ptext1 00AF                   __ptext2 005A                   __ptext3 009A  
            __size_of_ISR 0015      end_of_initialization 0010                ??_send_int 0075  
               _TXSTAbits 0098               ?_initSerial 0073               _BAUDCTLbits 0187  
     start_initialization 000F               __end_of_ISR 00AF  __CFG_FOSC$INTRC_NOCLKOUT 0000  
      initSerial@baudrate 0073               __pbssCOMMON 0075                 ___latbits 0002  
     __size_of_initSerial 0040         __size_of_send_int 000B         interrupt_function 0004  
                _PIE1bits 008C                  _PIR1bits 000C              ??_initSerial 0075  
       __CFG_BOR4V$BOR40V 0000        __end_of_initSerial 009A             __size_of_main 0046  
                _send_int 00AF                _INTCONbits 000B                  intlevel1 0000  
