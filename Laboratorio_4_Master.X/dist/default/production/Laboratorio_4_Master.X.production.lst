

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Feb 16 11:38:22 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.10
    20                           ; Generated 31/07/2019 GMT
    21                           ; 
    22                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F887 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  008F                     	;# 
    98  0090                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0095                     	;# 
   106  0096                     	;# 
   107  0097                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009A                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  0105                     	;# 
   117  0107                     	;# 
   118  0108                     	;# 
   119  0109                     	;# 
   120  010C                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  010F                     	;# 
   125  0185                     	;# 
   126  0187                     	;# 
   127  0188                     	;# 
   128  0189                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  0000                     	;# 
   132  0001                     	;# 
   133  0002                     	;# 
   134  0003                     	;# 
   135  0004                     	;# 
   136  0005                     	;# 
   137  0006                     	;# 
   138  0007                     	;# 
   139  0008                     	;# 
   140  0009                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000D                     	;# 
   145  000E                     	;# 
   146  000E                     	;# 
   147  000F                     	;# 
   148  0010                     	;# 
   149  0011                     	;# 
   150  0012                     	;# 
   151  0013                     	;# 
   152  0014                     	;# 
   153  0015                     	;# 
   154  0015                     	;# 
   155  0016                     	;# 
   156  0017                     	;# 
   157  0018                     	;# 
   158  0019                     	;# 
   159  001A                     	;# 
   160  001B                     	;# 
   161  001B                     	;# 
   162  001C                     	;# 
   163  001D                     	;# 
   164  001E                     	;# 
   165  001F                     	;# 
   166  0081                     	;# 
   167  0085                     	;# 
   168  0086                     	;# 
   169  0087                     	;# 
   170  0088                     	;# 
   171  0089                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  008F                     	;# 
   176  0090                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0093                     	;# 
   182  0094                     	;# 
   183  0095                     	;# 
   184  0096                     	;# 
   185  0097                     	;# 
   186  0098                     	;# 
   187  0099                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009C                     	;# 
   191  009D                     	;# 
   192  009E                     	;# 
   193  009F                     	;# 
   194  0105                     	;# 
   195  0107                     	;# 
   196  0108                     	;# 
   197  0109                     	;# 
   198  010C                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  010F                     	;# 
   203  0185                     	;# 
   204  0187                     	;# 
   205  0188                     	;# 
   206  0189                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  0000                     	;# 
   210  0001                     	;# 
   211  0002                     	;# 
   212  0003                     	;# 
   213  0004                     	;# 
   214  0005                     	;# 
   215  0006                     	;# 
   216  0007                     	;# 
   217  0008                     	;# 
   218  0009                     	;# 
   219  000A                     	;# 
   220  000B                     	;# 
   221  000C                     	;# 
   222  000D                     	;# 
   223  000E                     	;# 
   224  000E                     	;# 
   225  000F                     	;# 
   226  0010                     	;# 
   227  0011                     	;# 
   228  0012                     	;# 
   229  0013                     	;# 
   230  0014                     	;# 
   231  0015                     	;# 
   232  0015                     	;# 
   233  0016                     	;# 
   234  0017                     	;# 
   235  0018                     	;# 
   236  0019                     	;# 
   237  001A                     	;# 
   238  001B                     	;# 
   239  001B                     	;# 
   240  001C                     	;# 
   241  001D                     	;# 
   242  001E                     	;# 
   243  001F                     	;# 
   244  0081                     	;# 
   245  0085                     	;# 
   246  0086                     	;# 
   247  0087                     	;# 
   248  0088                     	;# 
   249  0089                     	;# 
   250  008C                     	;# 
   251  008D                     	;# 
   252  008E                     	;# 
   253  008F                     	;# 
   254  0090                     	;# 
   255  0091                     	;# 
   256  0092                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0093                     	;# 
   260  0094                     	;# 
   261  0095                     	;# 
   262  0096                     	;# 
   263  0097                     	;# 
   264  0098                     	;# 
   265  0099                     	;# 
   266  009A                     	;# 
   267  009B                     	;# 
   268  009C                     	;# 
   269  009D                     	;# 
   270  009E                     	;# 
   271  009F                     	;# 
   272  0105                     	;# 
   273  0107                     	;# 
   274  0108                     	;# 
   275  0109                     	;# 
   276  010C                     	;# 
   277  010C                     	;# 
   278  010D                     	;# 
   279  010E                     	;# 
   280  010F                     	;# 
   281  0185                     	;# 
   282  0187                     	;# 
   283  0188                     	;# 
   284  0189                     	;# 
   285  018C                     	;# 
   286  018D                     	;# 
   287  0000                     	;# 
   288  0001                     	;# 
   289  0002                     	;# 
   290  0003                     	;# 
   291  0004                     	;# 
   292  0005                     	;# 
   293  0006                     	;# 
   294  0007                     	;# 
   295  0008                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000D                     	;# 
   301  000E                     	;# 
   302  000E                     	;# 
   303  000F                     	;# 
   304  0010                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0013                     	;# 
   308  0014                     	;# 
   309  0015                     	;# 
   310  0015                     	;# 
   311  0016                     	;# 
   312  0017                     	;# 
   313  0018                     	;# 
   314  0019                     	;# 
   315  001A                     	;# 
   316  001B                     	;# 
   317  001B                     	;# 
   318  001C                     	;# 
   319  001D                     	;# 
   320  001E                     	;# 
   321  001F                     	;# 
   322  0081                     	;# 
   323  0085                     	;# 
   324  0086                     	;# 
   325  0087                     	;# 
   326  0088                     	;# 
   327  0089                     	;# 
   328  008C                     	;# 
   329  008D                     	;# 
   330  008E                     	;# 
   331  008F                     	;# 
   332  0090                     	;# 
   333  0091                     	;# 
   334  0092                     	;# 
   335  0093                     	;# 
   336  0093                     	;# 
   337  0093                     	;# 
   338  0094                     	;# 
   339  0095                     	;# 
   340  0096                     	;# 
   341  0097                     	;# 
   342  0098                     	;# 
   343  0099                     	;# 
   344  009A                     	;# 
   345  009B                     	;# 
   346  009C                     	;# 
   347  009D                     	;# 
   348  009E                     	;# 
   349  009F                     	;# 
   350  0105                     	;# 
   351  0107                     	;# 
   352  0108                     	;# 
   353  0109                     	;# 
   354  010C                     	;# 
   355  010C                     	;# 
   356  010D                     	;# 
   357  010E                     	;# 
   358  010F                     	;# 
   359  0185                     	;# 
   360  0187                     	;# 
   361  0188                     	;# 
   362  0189                     	;# 
   363  018C                     	;# 
   364  018D                     	;# 
   365  0013                     _SSPBUF	set	19
   366  0014                     _SSPCON	set	20
   367  0019                     _TXREG	set	25
   368  0018                     _RCSTA	set	24
   369  0007                     _PORTC	set	7
   370  0006                     _PORTB	set	6
   371  001A                     _RCREG	set	26
   372  000C                     _PIR1bits	set	12
   373  000B                     _INTCONbits	set	11
   374  0094                     _SSPSTATbits	set	148
   375  0094                     _SSPSTAT	set	148
   376  0098                     _TXSTAbits	set	152
   377  0099                     _SPBRG	set	153
   378  009A                     _SPBRGH	set	154
   379  0098                     _TXSTA	set	152
   380  008C                     _PIE1bits	set	140
   381  0087                     _TRISC	set	135
   382  0086                     _TRISB	set	134
   383  043B                     _TRISC3	set	1083
   384  043D                     _TRISC5	set	1085
   385  0187                     _BAUDCTLbits	set	391
   386                           
   387                           ; #config settings
   388  0000                     
   389                           	psect	cinit
   390  000F                     start_initialization:	
   391  000F                     __initialization:	
   392                           
   393                           ; Clear objects allocated to COMMON
   394  000F  01F7               	clrf	__pbssCOMMON& (0+127)
   395  0010  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   396  0011  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   397  0012                     end_of_initialization:	
   398                           ;End of C runtime variable initialization code
   399                           
   400  0012                     __end_of__initialization:	
   401  0012  0183               	clrf	3
   402  0013  120A  118A  2816   	ljmp	_main	;jump to C main() function
   403                           
   404                           	psect	bssCOMMON
   405  0077                     __pbssCOMMON:	
   406  0077                     _adc2:	
   407  0077                     	ds	1
   408  0078                     _adc1:	
   409  0078                     	ds	1
   410  0079                     _ttl:	
   411  0079                     	ds	1
   412                           
   413                           	psect	cstackCOMMON
   414  0070                     __pcstackCOMMON:	
   415  0070                     ?_spiWrite:	
   416  0070                     ?_spiRead:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0070                     ?_ISR:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0070                     ??_ISR:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0070                     ?_main:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0070                     ?_spiReceiveWait:	
   429                           ; 1 bytes @ 0x0
   430                           
   431                           
   432                           ; 1 bytes @ 0x0
   433  0070                     	ds	3
   434  0073                     ?_initSerial:	
   435  0073                     ?_spiInit:	
   436                           ; 1 bytes @ 0x3
   437                           
   438  0073                     ??_spiWrite:	
   439                           ; 1 bytes @ 0x3
   440                           
   441  0073                     ??_spiRead:	
   442                           ; 1 bytes @ 0x3
   443                           
   444  0073                     ?_send_int:	
   445                           ; 1 bytes @ 0x3
   446                           
   447  0073                     ??_spiReceiveWait:	
   448                           ; 1 bytes @ 0x3
   449                           
   450  0073                     spiInit@sDataSample:	
   451                           ; 1 bytes @ 0x3
   452                           
   453  0073                     spiWrite@dat:	
   454                           ; 1 bytes @ 0x3
   455                           
   456  0073                     initSerial@baudrate:	
   457                           ; 1 bytes @ 0x3
   458                           
   459  0073                     send_int@msg:	
   460                           ; 2 bytes @ 0x3
   461                           
   462                           
   463                           ; 2 bytes @ 0x3
   464  0073                     	ds	1
   465  0074                     spiInit@sClockIdle:	
   466                           
   467                           ; 1 bytes @ 0x4
   468  0074                     	ds	1
   469  0075                     ??_initSerial:	
   470  0075                     ??_send_int:	
   471                           ; 1 bytes @ 0x5
   472                           
   473  0075                     spiInit@sTransmitEdge:	
   474                           ; 1 bytes @ 0x5
   475                           
   476                           
   477                           ; 1 bytes @ 0x5
   478  0075                     	ds	1
   479  0076                     ??_spiInit:	
   480  0076                     spiInit@sType:	
   481                           ; 1 bytes @ 0x6
   482                           
   483                           
   484                           ; 1 bytes @ 0x6
   485  0076                     	ds	1
   486                           
   487                           	psect	cstackBANK0
   488  0020                     __pcstackBANK0:	
   489  0020                     ??_main:	
   490                           
   491                           ; 1 bytes @ 0x0
   492  0020                     	ds	2
   493                           
   494                           	psect	maintext
   495  0016                     __pmaintext:	
   496 ;;
   497 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   498 ;;
   499 ;; *************** function _main *****************
   500 ;; Defined at:
   501 ;;		line 45 in file "SPI.c"
   502 ;; Parameters:    Size  Location     Type
   503 ;;		None
   504 ;; Auto vars:     Size  Location     Type
   505 ;;		None
   506 ;; Return value:  Size  Location     Type
   507 ;;                  1    wreg      void 
   508 ;; Registers used:
   509 ;;		wreg, status,2, status,0, pclath, cstack
   510 ;; Tracked objects:
   511 ;;		On entry : B00/0
   512 ;;		On exit  : 0/0
   513 ;;		Unchanged: 0/0
   514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   515 ;;      Params:         0       0       0       0       0
   516 ;;      Locals:         0       0       0       0       0
   517 ;;      Temps:          0       2       0       0       0
   518 ;;      Totals:         0       2       0       0       0
   519 ;;Total ram usage:        2 bytes
   520 ;; Hardware stack levels required when called:    3
   521 ;; This function calls:
   522 ;;		_initSerial
   523 ;;		_send_int
   524 ;;		_spiInit
   525 ;;		_spiRead
   526 ;;		_spiWrite
   527 ;; This function is called by:
   528 ;;		Startup code after reset
   529 ;; This function uses a non-reentrant model
   530 ;;
   531                           
   532                           
   533                           ;psect for function _main
   534  0016                     _main:	
   535  0016                     l884:	
   536                           ;incstack = 0
   537                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   538                           
   539                           
   540                           ;SPI.c: 47:     TRISB = 0;
   541  0016  1683               	bsf	3,5	;RP0=1, select bank1
   542  0017  1303               	bcf	3,6	;RP1=0, select bank1
   543  0018  0186               	clrf	6	;volatile
   544  0019                     l886:	
   545                           
   546                           ;SPI.c: 48:     TRISC = 0B00010000;
   547  0019  3010               	movlw	16
   548  001A  0087               	movwf	7	;volatile
   549  001B                     l888:	
   550                           
   551                           ;SPI.c: 50:     PORTB = 0;
   552  001B  1283               	bcf	3,5	;RP0=0, select bank0
   553  001C  1303               	bcf	3,6	;RP1=0, select bank0
   554  001D  0186               	clrf	6	;volatile
   555  001E                     l890:	
   556                           
   557                           ;SPI.c: 51:     PORTC = 0;
   558  001E  0187               	clrf	7	;volatile
   559  001F                     l892:	
   560                           
   561                           ;SPI.c: 53:     initSerial(9600);
   562  001F  3080               	movlw	128
   563  0020  00F3               	movwf	initSerial@baudrate
   564  0021  3025               	movlw	37
   565  0022  00F4               	movwf	initSerial@baudrate+1
   566  0023  120A  118A  20A3  120A  118A  	fcall	_initSerial
   567  0028                     l894:	
   568                           
   569                           ;SPI.c: 54:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LOW,
      +                           SPI_IDLE_2_ACTIVE);
   570  0028  01F3               	clrf	spiInit@sDataSample
   571  0029  01F4               	clrf	spiInit@sClockIdle
   572  002A  01F5               	clrf	spiInit@sTransmitEdge
   573  002B  3020               	movlw	32
   574  002C  120A  118A  20E3  120A  118A  	fcall	_spiInit
   575  0031                     l896:	
   576                           
   577                           ;SPI.c: 58:        spiWrite(0);
   578  0031  3000               	movlw	0
   579  0032  120A  118A  2129  120A  118A  	fcall	_spiWrite
   580  0037                     l898:	
   581                           
   582                           ;SPI.c: 59:        adc1 = spiRead();
   583  0037  120A  118A  2119  120A  118A  	fcall	_spiRead
   584  003C  1283               	bcf	3,5	;RP0=0, select bank0
   585  003D  1303               	bcf	3,6	;RP1=0, select bank0
   586  003E  00A0               	movwf	??_main
   587  003F  0820               	movf	??_main,w
   588  0040  00F8               	movwf	_adc1
   589  0041                     l900:	
   590                           
   591                           ;SPI.c: 60:        _delay((unsigned long)((10)*(4000000/4000.0)));
   592  0041  300D               	movlw	13
   593  0042  1283               	bcf	3,5	;RP0=0, select bank0
   594  0043  1303               	bcf	3,6	;RP1=0, select bank0
   595  0044  00A1               	movwf	??_main+1
   596  0045  30FB               	movlw	251
   597  0046  00A0               	movwf	??_main
   598  0047                     u157:	
   599  0047  0BA0               	decfsz	??_main,f
   600  0048  2847               	goto	u157
   601  0049  0BA1               	decfsz	??_main+1,f
   602  004A  2847               	goto	u157
   603  004B                     l902:	
   604                           
   605                           ;SPI.c: 62:        spiWrite(1);
   606  004B  3001               	movlw	1
   607  004C  120A  118A  2129  120A  118A  	fcall	_spiWrite
   608  0051                     l904:	
   609                           
   610                           ;SPI.c: 63:        adc2 = spiRead();
   611  0051  120A  118A  2119  120A  118A  	fcall	_spiRead
   612  0056  1283               	bcf	3,5	;RP0=0, select bank0
   613  0057  1303               	bcf	3,6	;RP1=0, select bank0
   614  0058  00A0               	movwf	??_main
   615  0059  0820               	movf	??_main,w
   616  005A  00F7               	movwf	_adc2
   617  005B                     l906:	
   618                           
   619                           ;SPI.c: 64:        _delay((unsigned long)((10)*(4000000/4000.0)));
   620  005B  300D               	movlw	13
   621  005C  1283               	bcf	3,5	;RP0=0, select bank0
   622  005D  1303               	bcf	3,6	;RP1=0, select bank0
   623  005E  00A1               	movwf	??_main+1
   624  005F  30FB               	movlw	251
   625  0060  00A0               	movwf	??_main
   626  0061                     u167:	
   627  0061  0BA0               	decfsz	??_main,f
   628  0062  2861               	goto	u167
   629  0063  0BA1               	decfsz	??_main+1,f
   630  0064  2861               	goto	u167
   631  0065                     l908:	
   632                           
   633                           ;SPI.c: 66:         send_int(255);
   634  0065  30FF               	movlw	255
   635  0066  00F3               	movwf	send_int@msg
   636  0067  3000               	movlw	0
   637  0068  00F4               	movwf	send_int@msg+1
   638  0069  120A  118A  210E  120A  118A  	fcall	_send_int
   639  006E                     l910:	
   640                           
   641                           ;SPI.c: 67:         send_int(adc1);
   642  006E  0878               	movf	_adc1,w
   643  006F  1283               	bcf	3,5	;RP0=0, select bank0
   644  0070  1303               	bcf	3,6	;RP1=0, select bank0
   645  0071  00A0               	movwf	??_main
   646  0072  01A1               	clrf	??_main+1
   647  0073  0820               	movf	??_main,w
   648  0074  00F3               	movwf	send_int@msg
   649  0075  0821               	movf	??_main+1,w
   650  0076  00F4               	movwf	send_int@msg+1
   651  0077  120A  118A  210E  120A  118A  	fcall	_send_int
   652  007C                     l912:	
   653                           
   654                           ;SPI.c: 68:         send_int(0);
   655  007C  3000               	movlw	0
   656  007D  00F3               	movwf	send_int@msg
   657  007E  00F4               	movwf	send_int@msg+1
   658  007F  120A  118A  210E  120A  118A  	fcall	_send_int
   659  0084                     l914:	
   660                           
   661                           ;SPI.c: 69:         send_int(adc2);
   662  0084  0877               	movf	_adc2,w
   663  0085  1283               	bcf	3,5	;RP0=0, select bank0
   664  0086  1303               	bcf	3,6	;RP1=0, select bank0
   665  0087  00A0               	movwf	??_main
   666  0088  01A1               	clrf	??_main+1
   667  0089  0820               	movf	??_main,w
   668  008A  00F3               	movwf	send_int@msg
   669  008B  0821               	movf	??_main+1,w
   670  008C  00F4               	movwf	send_int@msg+1
   671  008D  120A  118A  210E  120A  118A  	fcall	_send_int
   672  0092                     l916:	
   673                           
   674                           ;SPI.c: 70:         send_int(1);
   675  0092  3001               	movlw	1
   676  0093  00F3               	movwf	send_int@msg
   677  0094  3000               	movlw	0
   678  0095  00F4               	movwf	send_int@msg+1
   679  0096  120A  118A  210E  120A  118A  	fcall	_send_int
   680  009B                     l918:	
   681                           
   682                           ;SPI.c: 71:         PORTB = ttl;
   683  009B  0879               	movf	_ttl,w
   684  009C  1283               	bcf	3,5	;RP0=0, select bank0
   685  009D  1303               	bcf	3,6	;RP1=0, select bank0
   686  009E  0086               	movwf	6	;volatile
   687  009F  2831               	goto	l896
   688  00A0  120A  118A  280C   	ljmp	start
   689  00A3                     __end_of_main:	
   690                           
   691                           	psect	text1
   692  0129                     __ptext1:	
   693 ;; *************** function _spiWrite *****************
   694 ;; Defined at:
   695 ;;		line 29 in file "SPI_Init.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;  dat             1    wreg     unsigned char 
   698 ;; Auto vars:     Size  Location     Type
   699 ;;  dat             1    3[COMMON] unsigned char 
   700 ;; Return value:  Size  Location     Type
   701 ;;                  1    wreg      void 
   702 ;; Registers used:
   703 ;;		wreg
   704 ;; Tracked objects:
   705 ;;		On entry : 0/0
   706 ;;		On exit  : 0/0
   707 ;;		Unchanged: 0/0
   708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   709 ;;      Params:         0       0       0       0       0
   710 ;;      Locals:         1       0       0       0       0
   711 ;;      Temps:          0       0       0       0       0
   712 ;;      Totals:         1       0       0       0       0
   713 ;;Total ram usage:        1 bytes
   714 ;; Hardware stack levels used:    1
   715 ;; Hardware stack levels required when called:    1
   716 ;; This function calls:
   717 ;;		Nothing
   718 ;; This function is called by:
   719 ;;		_main
   720 ;; This function uses a non-reentrant model
   721 ;;
   722                           
   723                           
   724                           ;psect for function _spiWrite
   725  0129                     _spiWrite:	
   726                           
   727                           ;incstack = 0
   728                           ; Regs used in _spiWrite: [wreg]
   729                           ;spiWrite@dat stored from wreg
   730  0129  00F3               	movwf	spiWrite@dat
   731  012A                     l746:	
   732                           
   733                           ;SPI_Init.c: 29: void spiWrite(char dat);SPI_Init.c: 30: {;SPI_Init.c: 31:     SSPBUF = 
      +                          dat;
   734  012A  0873               	movf	spiWrite@dat,w
   735  012B  1283               	bcf	3,5	;RP0=0, select bank0
   736  012C  1303               	bcf	3,6	;RP1=0, select bank0
   737  012D  0093               	movwf	19	;volatile
   738  012E                     l108:	
   739  012E  0008               	return
   740  012F                     __end_of_spiWrite:	
   741                           
   742                           	psect	text2
   743  0119                     __ptext2:	
   744 ;; *************** function _spiRead *****************
   745 ;; Defined at:
   746 ;;		line 42 in file "SPI_Init.c"
   747 ;; Parameters:    Size  Location     Type
   748 ;;		None
   749 ;; Auto vars:     Size  Location     Type
   750 ;;		None
   751 ;; Return value:  Size  Location     Type
   752 ;;                  1    wreg      unsigned char 
   753 ;; Registers used:
   754 ;;		wreg, status,2, status,0, pclath, cstack
   755 ;; Tracked objects:
   756 ;;		On entry : 0/0
   757 ;;		On exit  : 0/0
   758 ;;		Unchanged: 0/0
   759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   760 ;;      Params:         0       0       0       0       0
   761 ;;      Locals:         0       0       0       0       0
   762 ;;      Temps:          0       0       0       0       0
   763 ;;      Totals:         0       0       0       0       0
   764 ;;Total ram usage:        0 bytes
   765 ;; Hardware stack levels used:    1
   766 ;; Hardware stack levels required when called:    2
   767 ;; This function calls:
   768 ;;		_spiReceiveWait
   769 ;; This function is called by:
   770 ;;		_main
   771 ;; This function uses a non-reentrant model
   772 ;;
   773                           
   774                           
   775                           ;psect for function _spiRead
   776  0119                     _spiRead:	
   777  0119                     l748:	
   778                           ;incstack = 0
   779                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
   780                           
   781                           
   782                           ;SPI_Init.c: 44:     spiReceiveWait();
   783  0119  120A  118A  2122  120A  118A  	fcall	_spiReceiveWait
   784  011E                     l750:	
   785                           
   786                           ;SPI_Init.c: 45:     return(SSPBUF);
   787  011E  1283               	bcf	3,5	;RP0=0, select bank0
   788  011F  1303               	bcf	3,6	;RP1=0, select bank0
   789  0120  0813               	movf	19,w	;volatile
   790  0121                     l116:	
   791  0121  0008               	return
   792  0122                     __end_of_spiRead:	
   793                           
   794                           	psect	text3
   795  0122                     __ptext3:	
   796 ;; *************** function _spiReceiveWait *****************
   797 ;; Defined at:
   798 ;;		line 24 in file "SPI_Init.c"
   799 ;; Parameters:    Size  Location     Type
   800 ;;		None
   801 ;; Auto vars:     Size  Location     Type
   802 ;;		None
   803 ;; Return value:  Size  Location     Type
   804 ;;                  1    wreg      void 
   805 ;; Registers used:
   806 ;;		None
   807 ;; Tracked objects:
   808 ;;		On entry : 0/0
   809 ;;		On exit  : 0/0
   810 ;;		Unchanged: 0/0
   811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   812 ;;      Params:         0       0       0       0       0
   813 ;;      Locals:         0       0       0       0       0
   814 ;;      Temps:          0       0       0       0       0
   815 ;;      Totals:         0       0       0       0       0
   816 ;;Total ram usage:        0 bytes
   817 ;; Hardware stack levels used:    1
   818 ;; Hardware stack levels required when called:    1
   819 ;; This function calls:
   820 ;;		Nothing
   821 ;; This function is called by:
   822 ;;		_spiRead
   823 ;; This function uses a non-reentrant model
   824 ;;
   825                           
   826                           
   827                           ;psect for function _spiReceiveWait
   828  0122                     _spiReceiveWait:	
   829  0122                     l708:	
   830                           ;incstack = 0
   831                           ; Regs used in _spiReceiveWait: []
   832                           
   833  0122                     l102:	
   834                           ;SPI_Init.c: 26:     while ( !SSPSTATbits.BF );
   835                           
   836  0122  1683               	bsf	3,5	;RP0=1, select bank1
   837  0123  1303               	bcf	3,6	;RP1=0, select bank1
   838  0124  1C14               	btfss	20,0	;volatile
   839  0125  2927               	goto	u11
   840  0126  2928               	goto	u10
   841  0127                     u11:	
   842  0127  2922               	goto	l102
   843  0128                     u10:	
   844  0128                     l105:	
   845  0128  0008               	return
   846  0129                     __end_of_spiReceiveWait:	
   847                           
   848                           	psect	text4
   849  00E3                     __ptext4:	
   850 ;; *************** function _spiInit *****************
   851 ;; Defined at:
   852 ;;		line 7 in file "SPI_Init.c"
   853 ;; Parameters:    Size  Location     Type
   854 ;;  sType           1    wreg     enum E1292
   855 ;;  sDataSample     1    3[COMMON] enum E1300
   856 ;;  sClockIdle      1    4[COMMON] enum E1304
   857 ;;  sTransmitEdg    1    5[COMMON] enum E1308
   858 ;; Auto vars:     Size  Location     Type
   859 ;;  sType           1    6[COMMON] enum E1292
   860 ;; Return value:  Size  Location     Type
   861 ;;                  1    wreg      void 
   862 ;; Registers used:
   863 ;;		wreg, status,2, status,0
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   869 ;;      Params:         3       0       0       0       0
   870 ;;      Locals:         1       0       0       0       0
   871 ;;      Temps:          0       0       0       0       0
   872 ;;      Totals:         4       0       0       0       0
   873 ;;Total ram usage:        4 bytes
   874 ;; Hardware stack levels used:    1
   875 ;; Hardware stack levels required when called:    1
   876 ;; This function calls:
   877 ;;		Nothing
   878 ;; This function is called by:
   879 ;;		_main
   880 ;; This function uses a non-reentrant model
   881 ;;
   882                           
   883                           
   884                           ;psect for function _spiInit
   885  00E3                     _spiInit:	
   886                           
   887                           ;incstack = 0
   888                           ; Regs used in _spiInit: [wreg+status,2+status,0]
   889                           ;spiInit@sType stored from wreg
   890  00E3  00F6               	movwf	spiInit@sType
   891  00E4                     l834:	
   892                           
   893                           ;SPI_Init.c: 7: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle
      +                           sClockIdle, Spi_Transmit_Edge sTransmitEdge);SPI_Init.c: 8: {;SPI_Init.c: 9:     TRISC5
      +                           = 0;
   894  00E4  1683               	bsf	3,5	;RP0=1, select bank1
   895  00E5  1303               	bcf	3,6	;RP1=0, select bank1
   896  00E6  1287               	bcf	7,5	;volatile
   897                           
   898                           ;SPI_Init.c: 10:     if(sType & 0b00000100)
   899  00E7  1D76               	btfss	spiInit@sType,2
   900  00E8  28EA               	goto	u131
   901  00E9  28EB               	goto	u130
   902  00EA                     u131:	
   903  00EA  28EF               	goto	l840
   904  00EB                     u130:	
   905  00EB                     l836:	
   906                           
   907                           ;SPI_Init.c: 11:     {;SPI_Init.c: 12:         SSPSTAT = sTransmitEdge;
   908  00EB  0875               	movf	spiInit@sTransmitEdge,w
   909  00EC  0094               	movwf	20	;volatile
   910  00ED                     l838:	
   911                           
   912                           ;SPI_Init.c: 13:         TRISC3 = 1;
   913  00ED  1587               	bsf	7,3	;volatile
   914                           
   915                           ;SPI_Init.c: 14:     }
   916  00EE  28F3               	goto	l98
   917  00EF                     l840:	
   918                           
   919                           ;SPI_Init.c: 16:     {;SPI_Init.c: 17:         SSPSTAT = sDataSample | sTransmitEdge;
   920  00EF  0873               	movf	spiInit@sDataSample,w
   921  00F0  0475               	iorwf	spiInit@sTransmitEdge,w
   922  00F1  0094               	movwf	20	;volatile
   923  00F2                     l842:	
   924                           
   925                           ;SPI_Init.c: 18:         TRISC3 = 0;
   926  00F2  1187               	bcf	7,3	;volatile
   927  00F3                     l98:	
   928                           ;SPI_Init.c: 19:     }
   929                           
   930                           
   931                           ;SPI_Init.c: 21:     SSPCON = sType | sClockIdle;
   932  00F3  0876               	movf	spiInit@sType,w
   933  00F4  0474               	iorwf	spiInit@sClockIdle,w
   934  00F5  1283               	bcf	3,5	;RP0=0, select bank0
   935  00F6  1303               	bcf	3,6	;RP1=0, select bank0
   936  00F7  0094               	movwf	20	;volatile
   937  00F8                     l99:	
   938  00F8  0008               	return
   939  00F9                     __end_of_spiInit:	
   940                           
   941                           	psect	text5
   942  010E                     __ptext5:	
   943 ;; *************** function _send_int *****************
   944 ;; Defined at:
   945 ;;		line 32 in file "Serial_Init.c"
   946 ;; Parameters:    Size  Location     Type
   947 ;;  msg             2    3[COMMON] int 
   948 ;; Auto vars:     Size  Location     Type
   949 ;;		None
   950 ;; Return value:  Size  Location     Type
   951 ;;                  1    wreg      void 
   952 ;; Registers used:
   953 ;;		wreg
   954 ;; Tracked objects:
   955 ;;		On entry : 0/0
   956 ;;		On exit  : 0/0
   957 ;;		Unchanged: 0/0
   958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   959 ;;      Params:         2       0       0       0       0
   960 ;;      Locals:         0       0       0       0       0
   961 ;;      Temps:          0       0       0       0       0
   962 ;;      Totals:         2       0       0       0       0
   963 ;;Total ram usage:        2 bytes
   964 ;; Hardware stack levels used:    1
   965 ;; Hardware stack levels required when called:    1
   966 ;; This function calls:
   967 ;;		Nothing
   968 ;; This function is called by:
   969 ;;		_main
   970 ;; This function uses a non-reentrant model
   971 ;;
   972                           
   973                           
   974                           ;psect for function _send_int
   975  010E                     _send_int:	
   976  010E                     l844:	
   977                           ;incstack = 0
   978                           ; Regs used in _send_int: [wreg]
   979                           
   980  010E                     l79:	
   981                           ;Serial_Init.c: 34:     }
   982                           
   983                           
   984                           ;Serial_Init.c: 33:     while (TXSTAbits.TRMT == 0){
   985  010E  1683               	bsf	3,5	;RP0=1, select bank1
   986  010F  1303               	bcf	3,6	;RP1=0, select bank1
   987  0110  1C98               	btfss	24,1	;volatile
   988  0111  2913               	goto	u141
   989  0112  2914               	goto	u140
   990  0113                     u141:	
   991  0113  290E               	goto	l79
   992  0114                     u140:	
   993  0114                     l846:	
   994                           
   995                           ;Serial_Init.c: 35:     TXREG = msg;
   996  0114  0873               	movf	send_int@msg,w
   997  0115  1283               	bcf	3,5	;RP0=0, select bank0
   998  0116  1303               	bcf	3,6	;RP1=0, select bank0
   999  0117  0099               	movwf	25	;volatile
  1000  0118                     l82:	
  1001  0118  0008               	return
  1002  0119                     __end_of_send_int:	
  1003                           
  1004                           	psect	text6
  1005  00A3                     __ptext6:	
  1006 ;; *************** function _initSerial *****************
  1007 ;; Defined at:
  1008 ;;		line 5 in file "Serial_Init.c"
  1009 ;; Parameters:    Size  Location     Type
  1010 ;;  baudrate        2    3[COMMON] unsigned int 
  1011 ;; Auto vars:     Size  Location     Type
  1012 ;;		None
  1013 ;; Return value:  Size  Location     Type
  1014 ;;                  1    wreg      void 
  1015 ;; Registers used:
  1016 ;;		wreg, status,2, status,0
  1017 ;; Tracked objects:
  1018 ;;		On entry : 0/0
  1019 ;;		On exit  : 0/0
  1020 ;;		Unchanged: 0/0
  1021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1022 ;;      Params:         2       0       0       0       0
  1023 ;;      Locals:         0       0       0       0       0
  1024 ;;      Temps:          0       0       0       0       0
  1025 ;;      Totals:         2       0       0       0       0
  1026 ;;Total ram usage:        2 bytes
  1027 ;; Hardware stack levels used:    1
  1028 ;; Hardware stack levels required when called:    1
  1029 ;; This function calls:
  1030 ;;		Nothing
  1031 ;; This function is called by:
  1032 ;;		_main
  1033 ;; This function uses a non-reentrant model
  1034 ;;
  1035                           
  1036                           
  1037                           ;psect for function _initSerial
  1038  00A3                     _initSerial:	
  1039  00A3                     l808:	
  1040                           ;incstack = 0
  1041                           ; Regs used in _initSerial: [wreg+status,2+status,0]
  1042                           
  1043                           
  1044                           ;Serial_Init.c: 6:     INTCONbits.GIE = 1;
  1045  00A3  178B               	bsf	11,7	;volatile
  1046                           
  1047                           ;Serial_Init.c: 7:     INTCONbits.PEIE = 1;
  1048  00A4  170B               	bsf	11,6	;volatile
  1049  00A5                     l810:	
  1050                           
  1051                           ;Serial_Init.c: 9:     TRISC = 0x80;
  1052  00A5  3080               	movlw	128
  1053  00A6  1683               	bsf	3,5	;RP0=1, select bank1
  1054  00A7  1303               	bcf	3,6	;RP1=0, select bank1
  1055  00A8  0087               	movwf	7	;volatile
  1056  00A9                     l812:	
  1057                           
  1058                           ;Serial_Init.c: 11:     PIE1bits.RCIE = 1;
  1059  00A9  168C               	bsf	12,5	;volatile
  1060                           
  1061                           ;Serial_Init.c: 13:     TXSTA=0b00100110;
  1062  00AA  3026               	movlw	38
  1063  00AB  0098               	movwf	24	;volatile
  1064                           
  1065                           ;Serial_Init.c: 15:     RCSTA=0b10010000;
  1066  00AC  3090               	movlw	144
  1067  00AD  1283               	bcf	3,5	;RP0=0, select bank0
  1068  00AE  1303               	bcf	3,6	;RP1=0, select bank0
  1069  00AF  0098               	movwf	24	;volatile
  1070  00B0                     l814:	
  1071                           
  1072                           ;Serial_Init.c: 17:     BAUDCTLbits.BRG16 = 1;
  1073  00B0  1683               	bsf	3,5	;RP0=1, select bank3
  1074  00B1  1703               	bsf	3,6	;RP1=1, select bank3
  1075  00B2  1587               	bsf	7,3	;volatile
  1076  00B3                     l816:	
  1077                           
  1078                           ;Serial_Init.c: 18:     SPBRGH = 0;
  1079  00B3  1683               	bsf	3,5	;RP0=1, select bank1
  1080  00B4  1303               	bcf	3,6	;RP1=0, select bank1
  1081  00B5  019A               	clrf	26	;volatile
  1082  00B6                     l818:	
  1083                           
  1084                           ;Serial_Init.c: 21:     if(baudrate == 9600){
  1085  00B6  3080               	movlw	128
  1086  00B7  0673               	xorwf	initSerial@baudrate,w
  1087  00B8  3025               	movlw	37
  1088  00B9  1903               	skipnz
  1089  00BA  0674               	xorwf	initSerial@baudrate+1,w
  1090  00BB  1D03               	btfss	3,2
  1091  00BC  28BE               	goto	u91
  1092  00BD  28BF               	goto	u90
  1093  00BE                     u91:	
  1094  00BE  28C2               	goto	l822
  1095  00BF                     u90:	
  1096  00BF                     l820:	
  1097                           
  1098                           ;Serial_Init.c: 22:         SPBRG = 103;
  1099  00BF  3067               	movlw	103
  1100  00C0  0099               	movwf	25	;volatile
  1101                           
  1102                           ;Serial_Init.c: 23:     } else if (baudrate == 10417){
  1103  00C1  28E2               	goto	l76
  1104  00C2                     l822:	
  1105  00C2  30B1               	movlw	177
  1106  00C3  0673               	xorwf	initSerial@baudrate,w
  1107  00C4  3028               	movlw	40
  1108  00C5  1903               	skipnz
  1109  00C6  0674               	xorwf	initSerial@baudrate+1,w
  1110  00C7  1D03               	btfss	3,2
  1111  00C8  28CA               	goto	u101
  1112  00C9  28CB               	goto	u100
  1113  00CA                     u101:	
  1114  00CA  28CE               	goto	l826
  1115  00CB                     u100:	
  1116  00CB                     l824:	
  1117                           
  1118                           ;Serial_Init.c: 24:         SPBRG = 95;
  1119  00CB  305F               	movlw	95
  1120  00CC  0099               	movwf	25	;volatile
  1121                           
  1122                           ;Serial_Init.c: 25:     } else if (baudrate == 19200){
  1123  00CD  28E2               	goto	l76
  1124  00CE                     l826:	
  1125  00CE  304B               	movlw	75
  1126  00CF  0674               	xorwf	initSerial@baudrate+1,w
  1127  00D0  0473               	iorwf	initSerial@baudrate,w
  1128  00D1  1D03               	btfss	3,2
  1129  00D2  28D4               	goto	u111
  1130  00D3  28D5               	goto	u110
  1131  00D4                     u111:	
  1132  00D4  28D8               	goto	l830
  1133  00D5                     u110:	
  1134  00D5                     l828:	
  1135                           
  1136                           ;Serial_Init.c: 26:         SPBRG = 51;
  1137  00D5  3033               	movlw	51
  1138  00D6  0099               	movwf	25	;volatile
  1139                           
  1140                           ;Serial_Init.c: 27:     } else if (baudrate == 57600){
  1141  00D7  28E2               	goto	l76
  1142  00D8                     l830:	
  1143  00D8  30E1               	movlw	225
  1144  00D9  0674               	xorwf	initSerial@baudrate+1,w
  1145  00DA  0473               	iorwf	initSerial@baudrate,w
  1146  00DB  1D03               	btfss	3,2
  1147  00DC  28DE               	goto	u121
  1148  00DD  28DF               	goto	u120
  1149  00DE                     u121:	
  1150  00DE  28E2               	goto	l72
  1151  00DF                     u120:	
  1152  00DF                     l832:	
  1153                           
  1154                           ;Serial_Init.c: 28:         SPBRG = 16;
  1155  00DF  3010               	movlw	16
  1156  00E0  0099               	movwf	25	;volatile
  1157  00E1  28E2               	goto	l76
  1158  00E2                     l72:	
  1159  00E2                     l76:	
  1160  00E2  0008               	return
  1161  00E3                     __end_of_initSerial:	
  1162                           
  1163                           	psect	text7
  1164  00F9                     __ptext7:	
  1165 ;; *************** function _ISR *****************
  1166 ;; Defined at:
  1167 ;;		line 33 in file "SPI.c"
  1168 ;; Parameters:    Size  Location     Type
  1169 ;;		None
  1170 ;; Auto vars:     Size  Location     Type
  1171 ;;		None
  1172 ;; Return value:  Size  Location     Type
  1173 ;;                  1    wreg      void 
  1174 ;; Registers used:
  1175 ;;		wreg
  1176 ;; Tracked objects:
  1177 ;;		On entry : 0/0
  1178 ;;		On exit  : 0/0
  1179 ;;		Unchanged: 0/0
  1180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1181 ;;      Params:         0       0       0       0       0
  1182 ;;      Locals:         0       0       0       0       0
  1183 ;;      Temps:          3       0       0       0       0
  1184 ;;      Totals:         3       0       0       0       0
  1185 ;;Total ram usage:        3 bytes
  1186 ;; Hardware stack levels used:    1
  1187 ;; This function calls:
  1188 ;;		Nothing
  1189 ;; This function is called by:
  1190 ;;		Interrupt level 1
  1191 ;; This function uses a non-reentrant model
  1192 ;;
  1193                           
  1194                           
  1195                           ;psect for function _ISR
  1196  00F9                     _ISR:	
  1197  00F9                     i1l758:	
  1198                           
  1199                           ;SPI.c: 34:     INTCONbits.GIE = 0;
  1200  00F9  138B               	bcf	11,7	;volatile
  1201                           
  1202                           ;SPI.c: 35:     INTCONbits.PEIE = 0;
  1203  00FA  130B               	bcf	11,6	;volatile
  1204                           
  1205                           ;SPI.c: 37:     if (PIR1bits.RCIF == 1){
  1206  00FB  1283               	bcf	3,5	;RP0=0, select bank0
  1207  00FC  1303               	bcf	3,6	;RP1=0, select bank0
  1208  00FD  1E8C               	btfss	12,5	;volatile
  1209  00FE  2900               	goto	u8_21
  1210  00FF  2901               	goto	u8_20
  1211  0100                     u8_21:	
  1212  0100  2905               	goto	i1l762
  1213  0101                     u8_20:	
  1214  0101                     i1l760:	
  1215                           
  1216                           ;SPI.c: 38:         ttl = RCREG;
  1217  0101  081A               	movf	26,w	;volatile
  1218  0102  00F0               	movwf	??_ISR
  1219  0103  0870               	movf	??_ISR,w
  1220  0104  00F9               	movwf	_ttl
  1221  0105                     i1l762:	
  1222                           
  1223                           ;SPI.c: 41:     INTCONbits.GIE = 1;
  1224  0105  178B               	bsf	11,7	;volatile
  1225  0106                     i1l764:	
  1226                           
  1227                           ;SPI.c: 42:     INTCONbits.PEIE = 1;
  1228  0106  170B               	bsf	11,6	;volatile
  1229  0107                     i1l38:	
  1230  0107  0872               	movf	??_ISR+2,w
  1231  0108  008A               	movwf	10
  1232  0109  0E71               	swapf	(??_ISR+1)^(0+4294967168),w
  1233  010A  0083               	movwf	3
  1234  010B  0EFE               	swapf	btemp,f
  1235  010C  0E7E               	swapf	btemp,w
  1236  010D  0009               	retfie
  1237  010E                     __end_of_ISR:	
  1238  007E                     btemp	set	126	;btemp
  1239  007E                     wtemp0	set	126
  1240                           
  1241                           	psect	intentry
  1242  0004                     __pintentry:	
  1243                           ;incstack = 0
  1244                           ; Regs used in _ISR: [wreg]
  1245                           
  1246  0004                     interrupt_function:	
  1247  007E                     saved_w	set	btemp
  1248  0004  00FE               	movwf	btemp
  1249  0005  0E03               	swapf	3,w
  1250  0006  00F1               	movwf	??_ISR+1
  1251  0007  080A               	movf	10,w
  1252  0008  00F2               	movwf	??_ISR+2
  1253  0009  120A  118A  28F9   	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80      2       2
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_spiInit

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     941
                                              0 BANK0      2     2      0
                         _initSerial
                           _send_int
                            _spiInit
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      15
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _spiInit                                              4     1      3     360
                                              3 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _send_int                                             2     0      2     402
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _initSerial                                           2     0      2     164
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initSerial
   _send_int
   _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      2       2       5        2.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       C      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Feb 16 11:38:22 2020

             __CFG_CP$OFF 0000               _SSPSTATbits 0094                        l72 00E2  
                      l82 0118                        l76 00E2                        l79 010E  
                      l98 00F3                        l99 00F8                        u10 0128  
                      u11 0127                        u90 00BF                        u91 00BE  
                     l102 0122                       l105 0128                       l116 0121  
                     l108 012E                       l810 00A5                       l820 00BF  
                     l812 00A9                       l708 0122                       l900 0041  
                     l830 00D8                       l822 00C2                       l814 00B0  
                     l750 011E                       l910 006E                       l902 004B  
                     l832 00DF                       l824 00CB                       l816 00B3  
                     l808 00A3                       l840 00EF                       l912 007C  
                     l904 0051                       l826 00CE                       l818 00B6  
                     l842 00F2                       l834 00E4                       l746 012A  
                     l914 0084                       l906 005B                       l828 00D5  
                     l844 010E                       l836 00EB                       l748 0119  
                     l916 0092                       l908 0065                       l846 0114  
                     l838 00ED                       l918 009B                       l890 001E  
                     l892 001F                       l884 0016                       l894 0028  
                     l886 0019                       l896 0031                       l888 001B  
                     l898 0037                       u100 00CB                       u101 00CA  
                     u110 00D5                       u111 00D4                       u120 00DF  
                     u121 00DE                       u130 00EB                       u131 00EA  
                     u140 0114                       u141 0113                       u157 0047  
                     u167 0061              __CFG_CPD$OFF 0000                       _ISR 00F9  
                     _ttl 0079              __CFG_LVP$OFF 0000                      ?_ISR 0070  
                    i1l38 0107                      u8_20 0101                      u8_21 0100  
            __CFG_WRT$OFF 0000                      _adc1 0078                      _adc2 0077  
                    _main 0016                      btemp 007E                      start 000C  
           __CFG_IESO$OFF 0000                     ??_ISR 0070                     ?_main 0070  
           __CFG_WDTE$OFF 0000                     i1l760 0101                     i1l762 0105  
                   i1l764 0106                     i1l758 00F9                     _RCREG 001A  
                   _RCSTA 0018                     _SPBRG 0099                     _PORTB 0006  
                   _PORTC 0007                     _TRISB 0086                     _TRISC 0087  
                   _TXREG 0019                     _TXSTA 0098            __CFG_FCMEN$OFF 0000  
          __CFG_BOREN$OFF 0000                     pclath 000A           __end_of_spiInit 00F9  
         __end_of_spiRead 0122                     status 0003                     wtemp0 007E  
          __CFG_MCLRE$OFF 0000           __initialization 000F              __end_of_main 00A3  
                  ??_main 0020                    _SPBRGH 009A                    _TRISC3 043B  
                  _TRISC5 043D                    _SSPCON 0014                    _SSPBUF 0013  
          __CFG_PWRTE$OFF 0000          __end_of_send_int 0119                    saved_w 007E  
        __end_of_spiWrite 012F                 ??_spiInit 0076                 ??_spiRead 0073  
 __end_of__initialization 0012            __pcstackCOMMON 0070                __pmaintext 0016  
              __pintentry 0004   __size_of_spiReceiveWait 0007                   _SSPSTAT 0094  
             send_int@msg 0073                 ?_send_int 0073                 ?_spiWrite 0070  
              _initSerial 00A3                   __ptext1 0129                   __ptext2 0119  
                 __ptext3 0122                   __ptext4 00E3                   __ptext5 010E  
                 __ptext6 00A3                   __ptext7 00F9              __size_of_ISR 0015  
                 _spiInit 00E3                   _spiRead 0119      end_of_initialization 0012  
              ??_send_int 0075                ??_spiWrite 0073               spiWrite@dat 0073  
               _TXSTAbits 0098               ?_initSerial 0073            _spiReceiveWait 0122  
             _BAUDCTLbits 0187       start_initialization 000F               __end_of_ISR 010E  
__CFG_FOSC$INTRC_NOCLKOUT 0000    __end_of_spiReceiveWait 0129        initSerial@baudrate 0073  
             __pbssCOMMON 0077                 ___latbits 0002             __pcstackBANK0 0020  
     __size_of_initSerial 0040           ?_spiReceiveWait 0070         __size_of_send_int 000B  
       __size_of_spiWrite 0006                  ?_spiInit 0073                  ?_spiRead 0070  
    spiInit@sTransmitEdge 0075         interrupt_function 0004                  _PIE1bits 008C  
      spiInit@sDataSample 0073                  _PIR1bits 000C              ??_initSerial 0075  
        __size_of_spiInit 0016          __size_of_spiRead 0009         __CFG_BOR4V$BOR40V 0000  
      __end_of_initSerial 00E3             __size_of_main 008D                  _send_int 010E  
                _spiWrite 0129              spiInit@sType 0076         spiInit@sClockIdle 0074  
              _INTCONbits 000B                  intlevel1 0000          ??_spiReceiveWait 0073  
