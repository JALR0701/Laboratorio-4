

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Feb 16 14:49:52 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.10
    19                           ; Generated 31/07/2019 GMT
    20                           ; 
    21                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F887 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  008F                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  0105                     	;# 
   116  0107                     	;# 
   117  0108                     	;# 
   118  0109                     	;# 
   119  010C                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0185                     	;# 
   125  0187                     	;# 
   126  0188                     	;# 
   127  0189                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  000E                     	;# 
   146  000F                     	;# 
   147  0010                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0013                     	;# 
   151  0014                     	;# 
   152  0015                     	;# 
   153  0015                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001B                     	;# 
   160  001B                     	;# 
   161  001C                     	;# 
   162  001D                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  0081                     	;# 
   166  0085                     	;# 
   167  0086                     	;# 
   168  0087                     	;# 
   169  0088                     	;# 
   170  0089                     	;# 
   171  008C                     	;# 
   172  008D                     	;# 
   173  008E                     	;# 
   174  008F                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0094                     	;# 
   182  0095                     	;# 
   183  0096                     	;# 
   184  0097                     	;# 
   185  0098                     	;# 
   186  0099                     	;# 
   187  009A                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  0105                     	;# 
   194  0107                     	;# 
   195  0108                     	;# 
   196  0109                     	;# 
   197  010C                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  010F                     	;# 
   202  0185                     	;# 
   203  0187                     	;# 
   204  0188                     	;# 
   205  0189                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  0000                     	;# 
   209  0001                     	;# 
   210  0002                     	;# 
   211  0003                     	;# 
   212  0004                     	;# 
   213  0005                     	;# 
   214  0006                     	;# 
   215  0007                     	;# 
   216  0008                     	;# 
   217  0009                     	;# 
   218  000A                     	;# 
   219  000B                     	;# 
   220  000C                     	;# 
   221  000D                     	;# 
   222  000E                     	;# 
   223  000E                     	;# 
   224  000F                     	;# 
   225  0010                     	;# 
   226  0011                     	;# 
   227  0012                     	;# 
   228  0013                     	;# 
   229  0014                     	;# 
   230  0015                     	;# 
   231  0015                     	;# 
   232  0016                     	;# 
   233  0017                     	;# 
   234  0018                     	;# 
   235  0019                     	;# 
   236  001A                     	;# 
   237  001B                     	;# 
   238  001B                     	;# 
   239  001C                     	;# 
   240  001D                     	;# 
   241  001E                     	;# 
   242  001F                     	;# 
   243  0081                     	;# 
   244  0085                     	;# 
   245  0086                     	;# 
   246  0087                     	;# 
   247  0088                     	;# 
   248  0089                     	;# 
   249  008C                     	;# 
   250  008D                     	;# 
   251  008E                     	;# 
   252  008F                     	;# 
   253  0090                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0094                     	;# 
   260  0095                     	;# 
   261  0096                     	;# 
   262  0097                     	;# 
   263  0098                     	;# 
   264  0099                     	;# 
   265  009A                     	;# 
   266  009B                     	;# 
   267  009C                     	;# 
   268  009D                     	;# 
   269  009E                     	;# 
   270  009F                     	;# 
   271  0105                     	;# 
   272  0107                     	;# 
   273  0108                     	;# 
   274  0109                     	;# 
   275  010C                     	;# 
   276  010C                     	;# 
   277  010D                     	;# 
   278  010E                     	;# 
   279  010F                     	;# 
   280  0185                     	;# 
   281  0187                     	;# 
   282  0188                     	;# 
   283  0189                     	;# 
   284  018C                     	;# 
   285  018D                     	;# 
   286  0000                     	;# 
   287  0001                     	;# 
   288  0002                     	;# 
   289  0003                     	;# 
   290  0004                     	;# 
   291  0005                     	;# 
   292  0006                     	;# 
   293  0007                     	;# 
   294  0008                     	;# 
   295  0009                     	;# 
   296  000A                     	;# 
   297  000B                     	;# 
   298  000C                     	;# 
   299  000D                     	;# 
   300  000E                     	;# 
   301  000E                     	;# 
   302  000F                     	;# 
   303  0010                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0013                     	;# 
   307  0014                     	;# 
   308  0015                     	;# 
   309  0015                     	;# 
   310  0016                     	;# 
   311  0017                     	;# 
   312  0018                     	;# 
   313  0019                     	;# 
   314  001A                     	;# 
   315  001B                     	;# 
   316  001B                     	;# 
   317  001C                     	;# 
   318  001D                     	;# 
   319  001E                     	;# 
   320  001F                     	;# 
   321  0081                     	;# 
   322  0085                     	;# 
   323  0086                     	;# 
   324  0087                     	;# 
   325  0088                     	;# 
   326  0089                     	;# 
   327  008C                     	;# 
   328  008D                     	;# 
   329  008E                     	;# 
   330  008F                     	;# 
   331  0090                     	;# 
   332  0091                     	;# 
   333  0092                     	;# 
   334  0093                     	;# 
   335  0093                     	;# 
   336  0093                     	;# 
   337  0094                     	;# 
   338  0095                     	;# 
   339  0096                     	;# 
   340  0097                     	;# 
   341  0098                     	;# 
   342  0099                     	;# 
   343  009A                     	;# 
   344  009B                     	;# 
   345  009C                     	;# 
   346  009D                     	;# 
   347  009E                     	;# 
   348  009F                     	;# 
   349  0105                     	;# 
   350  0107                     	;# 
   351  0108                     	;# 
   352  0109                     	;# 
   353  010C                     	;# 
   354  010C                     	;# 
   355  010D                     	;# 
   356  010E                     	;# 
   357  010F                     	;# 
   358  0185                     	;# 
   359  0187                     	;# 
   360  0188                     	;# 
   361  0189                     	;# 
   362  018C                     	;# 
   363  018D                     	;# 
   364  0013                     _SSPBUF	set	19
   365  0014                     _SSPCON	set	20
   366  001E                     _ADRESH	set	30
   367  000B                     _INTCONbits	set	11
   368  0008                     _PORTD	set	8
   369  0005                     _PORTA	set	5
   370  000C                     _PIR1bits	set	12
   371  001F                     _ADCON0bits	set	31
   372  0006                     _PORTB	set	6
   373  0063                     _SSPIF	set	99
   374  0094                     _SSPSTATbits	set	148
   375  0094                     _SSPSTAT	set	148
   376  009F                     _ADCON1	set	159
   377  0085                     _TRISAbits	set	133
   378  008C                     _PIE1bits	set	140
   379  0088                     _TRISD	set	136
   380  0086                     _TRISB	set	134
   381  0085                     _TRISA	set	133
   382  043B                     _TRISC3	set	1083
   383  043D                     _TRISC5	set	1085
   384  0189                     _ANSELH	set	393
   385  0188                     _ANSEL	set	392
   386                           
   387                           ; #config settings
   388  0000                     
   389                           	psect	cinit
   390  000F                     start_initialization:	
   391  000F                     __initialization:	
   392                           
   393                           ; Clear objects allocated to COMMON
   394  000F  01F6               	clrf	__pbssCOMMON& (0+127)
   395  0010  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   396  0011  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   397  0012  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   398  0013                     end_of_initialization:	
   399                           ;End of C runtime variable initialization code
   400                           
   401  0013                     __end_of__initialization:	
   402  0013  0183               	clrf	3
   403  0014  120A  118A  28B7   	ljmp	_main	;jump to C main() function
   404                           
   405                           	psect	bssCOMMON
   406  0076                     __pbssCOMMON:	
   407  0076                     _state:	
   408  0076                     	ds	1
   409  0077                     _adc2:	
   410  0077                     	ds	1
   411  0078                     _adc1:	
   412  0078                     	ds	1
   413  0079                     _ready:	
   414  0079                     	ds	1
   415                           
   416                           	psect	cstackCOMMON
   417  0070                     __pcstackCOMMON:	
   418  0070                     ?_spiRead:	
   419  0070                     ??_spiRead:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0070                     ?_spiWrite:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0070                     ??_spiWrite:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0070                     ?_initADC:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ?_isr:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     ?_main:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     ?_spiReceiveWait:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     ??_spiReceiveWait:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0070                     spiWrite@dat:	
   444                           ; 1 bytes @ 0x0
   445                           
   446                           
   447                           ; 1 bytes @ 0x0
   448  0070                     	ds	1
   449  0071                     ??_isr:	
   450                           
   451                           ; 1 bytes @ 0x1
   452  0071                     	ds	3
   453  0074                     ??_spiInit:	
   454  0074                     ??_initADC:	
   455                           ; 1 bytes @ 0x4
   456                           
   457  0074                     spiInit@sType:	
   458                           ; 1 bytes @ 0x4
   459                           
   460                           
   461                           ; 1 bytes @ 0x4
   462  0074                     	ds	2
   463                           
   464                           	psect	cstackBANK0
   465  0020                     __pcstackBANK0:	
   466  0020                     ?_spiInit:	
   467  0020                     initADC@analog:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0020                     spiInit@sDataSample:	
   471                           ; 1 bytes @ 0x0
   472                           
   473                           
   474                           ; 1 bytes @ 0x0
   475  0020                     	ds	1
   476  0021                     spiInit@sClockIdle:	
   477                           
   478                           ; 1 bytes @ 0x1
   479  0021                     	ds	1
   480  0022                     spiInit@sTransmitEdge:	
   481                           
   482                           ; 1 bytes @ 0x2
   483  0022                     	ds	1
   484  0023                     ??_main:	
   485                           
   486                           ; 1 bytes @ 0x3
   487  0023                     	ds	1
   488                           
   489                           	psect	maintext
   490  00B7                     __pmaintext:	
   491 ;;
   492 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   493 ;;
   494 ;; *************** function _main *****************
   495 ;; Defined at:
   496 ;;		line 57 in file "SPI.c"
   497 ;; Parameters:    Size  Location     Type
   498 ;;		None
   499 ;; Auto vars:     Size  Location     Type
   500 ;;		None
   501 ;; Return value:  Size  Location     Type
   502 ;;                  1    wreg      void 
   503 ;; Registers used:
   504 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   505 ;; Tracked objects:
   506 ;;		On entry : B00/0
   507 ;;		On exit  : 0/0
   508 ;;		Unchanged: 0/0
   509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   510 ;;      Params:         0       0       0       0       0
   511 ;;      Locals:         0       0       0       0       0
   512 ;;      Temps:          0       1       0       0       0
   513 ;;      Totals:         0       1       0       0       0
   514 ;;Total ram usage:        1 bytes
   515 ;; Hardware stack levels required when called:    4
   516 ;; This function calls:
   517 ;;		_initADC
   518 ;;		_spiInit
   519 ;; This function is called by:
   520 ;;		Startup code after reset
   521 ;; This function uses a non-reentrant model
   522 ;;
   523                           
   524                           
   525                           ;psect for function _main
   526  00B7                     _main:	
   527  00B7                     l932:	
   528                           ;incstack = 0
   529                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   530                           
   531                           
   532                           ;SPI.c: 59:     ANSEL = 0b00000011;
   533  00B7  3003               	movlw	3
   534  00B8  1683               	bsf	3,5	;RP0=1, select bank3
   535  00B9  1703               	bsf	3,6	;RP1=1, select bank3
   536  00BA  0088               	movwf	8	;volatile
   537  00BB                     l934:	
   538                           
   539                           ;SPI.c: 60:     ANSELH = 0;
   540  00BB  0189               	clrf	9	;volatile
   541  00BC                     l936:	
   542                           
   543                           ;SPI.c: 62:     TRISA = 0b00100011;
   544  00BC  3023               	movlw	35
   545  00BD  1683               	bsf	3,5	;RP0=1, select bank1
   546  00BE  1303               	bcf	3,6	;RP1=0, select bank1
   547  00BF  0085               	movwf	5	;volatile
   548                           
   549                           ;SPI.c: 63:     TRISB = 0;
   550  00C0  0186               	clrf	6	;volatile
   551                           
   552                           ;SPI.c: 64:     TRISD = 0;
   553  00C1  0188               	clrf	8	;volatile
   554                           
   555                           ;SPI.c: 66:     PORTA = 0;
   556  00C2  1283               	bcf	3,5	;RP0=0, select bank0
   557  00C3  1303               	bcf	3,6	;RP1=0, select bank0
   558  00C4  0185               	clrf	5	;volatile
   559                           
   560                           ;SPI.c: 67:     PORTB = 0;
   561  00C5  0186               	clrf	6	;volatile
   562                           
   563                           ;SPI.c: 68:     PORTD = 0;
   564  00C6  0188               	clrf	8	;volatile
   565  00C7                     l938:	
   566                           
   567                           ;SPI.c: 70:     INTCONbits.GIE = 1;
   568  00C7  178B               	bsf	11,7	;volatile
   569  00C8                     l940:	
   570                           
   571                           ;SPI.c: 71:     INTCONbits.PEIE = 1;
   572  00C8  170B               	bsf	11,6	;volatile
   573  00C9                     l942:	
   574                           
   575                           ;SPI.c: 72:     PIR1bits.SSPIF = 0;
   576  00C9  118C               	bcf	12,3	;volatile
   577  00CA                     l944:	
   578                           
   579                           ;SPI.c: 73:     PIE1bits.SSPIE = 1;
   580  00CA  1683               	bsf	3,5	;RP0=1, select bank1
   581  00CB  1303               	bcf	3,6	;RP1=0, select bank1
   582  00CC  158C               	bsf	12,3	;volatile
   583  00CD                     l946:	
   584                           
   585                           ;SPI.c: 74:     TRISAbits.TRISA5 = 1;
   586  00CD  1685               	bsf	5,5	;volatile
   587  00CE                     l948:	
   588                           
   589                           ;SPI.c: 76:     spiInit(SPI_SLAVE_SS_EN, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LOW, SPI
      +                          _IDLE_2_ACTIVE);
   590  00CE  1283               	bcf	3,5	;RP0=0, select bank0
   591  00CF  1303               	bcf	3,6	;RP1=0, select bank0
   592  00D0  01A0               	clrf	spiInit@sDataSample
   593  00D1  01A1               	clrf	spiInit@sClockIdle
   594  00D2  01A2               	clrf	spiInit@sTransmitEdge
   595  00D3  3024               	movlw	36
   596  00D4  120A  118A  213D  120A  118A  	fcall	_spiInit
   597  00D9                     l950:	
   598                           
   599                           ;SPI.c: 79:        initADC(0);
   600  00D9  3000               	movlw	0
   601  00DA  120A  118A  2017  120A  118A  	fcall	_initADC
   602  00DF                     l952:	
   603                           
   604                           ;SPI.c: 80:         if(ready){
   605  00DF  0879               	movf	_ready,w
   606  00E0  1903               	btfsc	3,2
   607  00E1  28E3               	goto	u131
   608  00E2  28E4               	goto	u130
   609  00E3                     u131:	
   610  00E3  28EC               	goto	l960
   611  00E4                     u130:	
   612  00E4                     l954:	
   613                           
   614                           ;SPI.c: 81:             adc1 = ADRESH;
   615  00E4  1283               	bcf	3,5	;RP0=0, select bank0
   616  00E5  1303               	bcf	3,6	;RP1=0, select bank0
   617  00E6  081E               	movf	30,w	;volatile
   618  00E7  00A3               	movwf	??_main
   619  00E8  0823               	movf	??_main,w
   620  00E9  00F8               	movwf	_adc1
   621  00EA                     l956:	
   622                           
   623                           ;SPI.c: 82:             ready = 0;
   624  00EA  01F9               	clrf	_ready
   625  00EB                     l958:	
   626                           
   627                           ;SPI.c: 83:             ADCON0bits.GO_DONE = 1;
   628  00EB  149F               	bsf	31,1	;volatile
   629  00EC                     l960:	
   630                           
   631                           ;SPI.c: 85:        initADC(1);
   632  00EC  3001               	movlw	1
   633  00ED  120A  118A  2017  120A  118A  	fcall	_initADC
   634  00F2                     l962:	
   635                           
   636                           ;SPI.c: 86:         if(ready){
   637  00F2  0879               	movf	_ready,w
   638  00F3  1903               	btfsc	3,2
   639  00F4  28F6               	goto	u141
   640  00F5  28F7               	goto	u140
   641  00F6                     u141:	
   642  00F6  28D9               	goto	l950
   643  00F7                     u140:	
   644  00F7                     l964:	
   645                           
   646                           ;SPI.c: 87:             adc2 = ADRESH;
   647  00F7  1283               	bcf	3,5	;RP0=0, select bank0
   648  00F8  1303               	bcf	3,6	;RP1=0, select bank0
   649  00F9  081E               	movf	30,w	;volatile
   650  00FA  00A3               	movwf	??_main
   651  00FB  0823               	movf	??_main,w
   652  00FC  00F7               	movwf	_adc2
   653  00FD                     l966:	
   654                           
   655                           ;SPI.c: 88:             ready = 0;
   656  00FD  01F9               	clrf	_ready
   657  00FE                     l968:	
   658                           
   659                           ;SPI.c: 89:             ADCON0bits.GO_DONE = 1;
   660  00FE  149F               	bsf	31,1	;volatile
   661  00FF  28D9               	goto	l950
   662  0100  120A  118A  280C   	ljmp	start
   663  0103                     __end_of_main:	
   664                           
   665                           	psect	text1
   666  013D                     __ptext1:	
   667 ;; *************** function _spiInit *****************
   668 ;; Defined at:
   669 ;;		line 5 in file "SPI_Init.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;  sType           1    wreg     enum E1292
   672 ;;  sDataSample     1    0[BANK0 ] enum E1300
   673 ;;  sClockIdle      1    1[BANK0 ] enum E1304
   674 ;;  sTransmitEdg    1    2[BANK0 ] enum E1308
   675 ;; Auto vars:     Size  Location     Type
   676 ;;  sType           1    4[COMMON] enum E1292
   677 ;; Return value:  Size  Location     Type
   678 ;;                  1    wreg      void 
   679 ;; Registers used:
   680 ;;		wreg, status,2, status,0
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   686 ;;      Params:         0       3       0       0       0
   687 ;;      Locals:         1       0       0       0       0
   688 ;;      Temps:          0       0       0       0       0
   689 ;;      Totals:         1       3       0       0       0
   690 ;;Total ram usage:        4 bytes
   691 ;; Hardware stack levels used:    1
   692 ;; Hardware stack levels required when called:    3
   693 ;; This function calls:
   694 ;;		Nothing
   695 ;; This function is called by:
   696 ;;		_main
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700                           
   701                           ;psect for function _spiInit
   702  013D                     _spiInit:	
   703                           
   704                           ;incstack = 0
   705                           ; Regs used in _spiInit: [wreg+status,2+status,0]
   706                           ;spiInit@sType stored from wreg
   707  013D  00F4               	movwf	spiInit@sType
   708  013E                     l908:	
   709                           
   710                           ;SPI_Init.c: 5: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle
      +                           sClockIdle, Spi_Transmit_Edge sTransmitEdge);SPI_Init.c: 6: {;SPI_Init.c: 7:     TRISC5
      +                           = 0;
   711  013E  1683               	bsf	3,5	;RP0=1, select bank1
   712  013F  1303               	bcf	3,6	;RP1=0, select bank1
   713  0140  1287               	bcf	7,5	;volatile
   714                           
   715                           ;SPI_Init.c: 8:     if(sType & 0b00000100)
   716  0141  1D74               	btfss	spiInit@sType,2
   717  0142  2944               	goto	u121
   718  0143  2945               	goto	u120
   719  0144                     u121:	
   720  0144  294D               	goto	l914
   721  0145                     u120:	
   722  0145                     l910:	
   723                           
   724                           ;SPI_Init.c: 9:     {;SPI_Init.c: 10:         SSPSTAT = sTransmitEdge;
   725  0145  1283               	bcf	3,5	;RP0=0, select bank0
   726  0146  1303               	bcf	3,6	;RP1=0, select bank0
   727  0147  0822               	movf	spiInit@sTransmitEdge,w
   728  0148  1683               	bsf	3,5	;RP0=1, select bank1
   729  0149  1303               	bcf	3,6	;RP1=0, select bank1
   730  014A  0094               	movwf	20	;volatile
   731  014B                     l912:	
   732                           
   733                           ;SPI_Init.c: 11:         TRISC3 = 1;
   734  014B  1587               	bsf	7,3	;volatile
   735                           
   736                           ;SPI_Init.c: 12:     }
   737  014C  2955               	goto	l112
   738  014D                     l914:	
   739                           
   740                           ;SPI_Init.c: 14:     {;SPI_Init.c: 15:         SSPSTAT = sDataSample | sTransmitEdge;
   741  014D  1283               	bcf	3,5	;RP0=0, select bank0
   742  014E  1303               	bcf	3,6	;RP1=0, select bank0
   743  014F  0820               	movf	spiInit@sDataSample,w
   744  0150  0422               	iorwf	spiInit@sTransmitEdge,w
   745  0151  1683               	bsf	3,5	;RP0=1, select bank1
   746  0152  1303               	bcf	3,6	;RP1=0, select bank1
   747  0153  0094               	movwf	20	;volatile
   748  0154                     l916:	
   749                           
   750                           ;SPI_Init.c: 16:         TRISC3 = 0;
   751  0154  1187               	bcf	7,3	;volatile
   752  0155                     l112:	
   753                           ;SPI_Init.c: 17:     }
   754                           
   755                           
   756                           ;SPI_Init.c: 19:     SSPCON = sType | sClockIdle;
   757  0155  0874               	movf	spiInit@sType,w
   758  0156  1283               	bcf	3,5	;RP0=0, select bank0
   759  0157  1303               	bcf	3,6	;RP1=0, select bank0
   760  0158  0421               	iorwf	spiInit@sClockIdle,w
   761  0159  0094               	movwf	20	;volatile
   762  015A                     l113:	
   763  015A  0008               	return
   764  015B                     __end_of_spiInit:	
   765                           
   766                           	psect	text2
   767  0017                     __ptext2:	
   768 ;; *************** function _initADC *****************
   769 ;; Defined at:
   770 ;;		line 5 in file "ADC_Init.c"
   771 ;; Parameters:    Size  Location     Type
   772 ;;  analog          1    wreg     unsigned char 
   773 ;; Auto vars:     Size  Location     Type
   774 ;;  analog          1    0[BANK0 ] unsigned char 
   775 ;; Return value:  Size  Location     Type
   776 ;;                  1    wreg      void 
   777 ;; Registers used:
   778 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   779 ;; Tracked objects:
   780 ;;		On entry : 0/0
   781 ;;		On exit  : 0/0
   782 ;;		Unchanged: 0/0
   783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   784 ;;      Params:         0       0       0       0       0
   785 ;;      Locals:         0       1       0       0       0
   786 ;;      Temps:          2       0       0       0       0
   787 ;;      Totals:         2       1       0       0       0
   788 ;;Total ram usage:        3 bytes
   789 ;; Hardware stack levels used:    1
   790 ;; Hardware stack levels required when called:    3
   791 ;; This function calls:
   792 ;;		Nothing
   793 ;; This function is called by:
   794 ;;		_main
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           
   799                           ;psect for function _initADC
   800  0017                     _initADC:	
   801                           
   802                           ;incstack = 0
   803                           ; Regs used in _initADC: [wreg-fsr0h+status,2+status,0]
   804                           ;initADC@analog stored from wreg
   805  0017  1283               	bcf	3,5	;RP0=0, select bank0
   806  0018  1303               	bcf	3,6	;RP1=0, select bank0
   807  0019  00A0               	movwf	initADC@analog
   808  001A                     l918:	
   809                           
   810                           ;ADC_Init.c: 6:     INTCONbits.GIE = 1;
   811  001A  178B               	bsf	11,7	;volatile
   812                           
   813                           ;ADC_Init.c: 7:     INTCONbits.PEIE = 1;
   814  001B  170B               	bsf	11,6	;volatile
   815                           
   816                           ;ADC_Init.c: 9:     PIE1bits.ADIE = 1;
   817  001C  1683               	bsf	3,5	;RP0=1, select bank1
   818  001D  1303               	bcf	3,6	;RP1=0, select bank1
   819  001E  170C               	bsf	12,6	;volatile
   820                           
   821                           ;ADC_Init.c: 11:     PIR1bits.ADIF = 0;
   822  001F  1283               	bcf	3,5	;RP0=0, select bank0
   823  0020  1303               	bcf	3,6	;RP1=0, select bank0
   824  0021  130C               	bcf	12,6	;volatile
   825                           
   826                           ;ADC_Init.c: 13:     ADCON0bits.ADCS1 = 0;
   827  0022  139F               	bcf	31,7	;volatile
   828                           
   829                           ;ADC_Init.c: 14:     ADCON0bits.ADCS0 = 1;
   830  0023  171F               	bsf	31,6	;volatile
   831                           
   832                           ;ADC_Init.c: 15:     ADCON0bits.ADON = 1;
   833  0024  141F               	bsf	31,0	;volatile
   834                           
   835                           ;ADC_Init.c: 17:     switch(analog){
   836  0025  2876               	goto	l922
   837  0026                     l79:	
   838                           ;ADC_Init.c: 18:         case 0:
   839                           
   840                           
   841                           ;ADC_Init.c: 19:             ADCON0bits.CHS3 = 0;
   842  0026  129F               	bcf	31,5	;volatile
   843                           
   844                           ;ADC_Init.c: 20:             ADCON0bits.CHS2 = 0;
   845  0027  121F               	bcf	31,4	;volatile
   846                           
   847                           ;ADC_Init.c: 21:             ADCON0bits.CHS1 = 0;
   848  0028  119F               	bcf	31,3	;volatile
   849                           
   850                           ;ADC_Init.c: 22:             ADCON0bits.CHS0 = 0;
   851  0029  111F               	bcf	31,2	;volatile
   852                           
   853                           ;ADC_Init.c: 23:             break;
   854  002A  28B0               	goto	l924
   855  002B                     l81:	
   856                           ;ADC_Init.c: 25:         case 1:
   857                           
   858                           
   859                           ;ADC_Init.c: 26:             ADCON0bits.CHS3 = 0;
   860  002B  129F               	bcf	31,5	;volatile
   861                           
   862                           ;ADC_Init.c: 27:             ADCON0bits.CHS2 = 0;
   863  002C  121F               	bcf	31,4	;volatile
   864                           
   865                           ;ADC_Init.c: 28:             ADCON0bits.CHS1 = 0;
   866  002D  119F               	bcf	31,3	;volatile
   867                           
   868                           ;ADC_Init.c: 29:             ADCON0bits.CHS0 = 1;
   869  002E  151F               	bsf	31,2	;volatile
   870                           
   871                           ;ADC_Init.c: 30:             break;
   872  002F  28B0               	goto	l924
   873  0030                     l82:	
   874                           ;ADC_Init.c: 32:         case 2:
   875                           
   876                           
   877                           ;ADC_Init.c: 33:             ADCON0bits.CHS3 = 0;
   878  0030  129F               	bcf	31,5	;volatile
   879                           
   880                           ;ADC_Init.c: 34:             ADCON0bits.CHS2 = 0;
   881  0031  121F               	bcf	31,4	;volatile
   882                           
   883                           ;ADC_Init.c: 35:             ADCON0bits.CHS1 = 1;
   884  0032  159F               	bsf	31,3	;volatile
   885                           
   886                           ;ADC_Init.c: 36:             ADCON0bits.CHS0 = 0;
   887  0033  111F               	bcf	31,2	;volatile
   888                           
   889                           ;ADC_Init.c: 37:             break;
   890  0034  28B0               	goto	l924
   891  0035                     l83:	
   892                           ;ADC_Init.c: 39:         case 3:
   893                           
   894                           
   895                           ;ADC_Init.c: 40:             ADCON0bits.CHS3 = 0;
   896  0035  129F               	bcf	31,5	;volatile
   897                           
   898                           ;ADC_Init.c: 41:             ADCON0bits.CHS2 = 0;
   899  0036  121F               	bcf	31,4	;volatile
   900                           
   901                           ;ADC_Init.c: 42:             ADCON0bits.CHS1 = 1;
   902  0037  159F               	bsf	31,3	;volatile
   903                           
   904                           ;ADC_Init.c: 43:             ADCON0bits.CHS0 = 1;
   905  0038  151F               	bsf	31,2	;volatile
   906                           
   907                           ;ADC_Init.c: 44:             break;
   908  0039  28B0               	goto	l924
   909  003A                     l84:	
   910                           ;ADC_Init.c: 46:         case 4:
   911                           
   912                           
   913                           ;ADC_Init.c: 47:             ADCON0bits.CHS3 = 0;
   914  003A  129F               	bcf	31,5	;volatile
   915                           
   916                           ;ADC_Init.c: 48:             ADCON0bits.CHS2 = 1;
   917  003B  161F               	bsf	31,4	;volatile
   918                           
   919                           ;ADC_Init.c: 49:             ADCON0bits.CHS1 = 0;
   920  003C  119F               	bcf	31,3	;volatile
   921                           
   922                           ;ADC_Init.c: 50:             ADCON0bits.CHS0 = 0;
   923  003D  111F               	bcf	31,2	;volatile
   924                           
   925                           ;ADC_Init.c: 51:             break;
   926  003E  28B0               	goto	l924
   927  003F                     l85:	
   928                           ;ADC_Init.c: 53:         case 5:
   929                           
   930                           
   931                           ;ADC_Init.c: 54:             ADCON0bits.CHS3 = 0;
   932  003F  129F               	bcf	31,5	;volatile
   933                           
   934                           ;ADC_Init.c: 55:             ADCON0bits.CHS2 = 1;
   935  0040  161F               	bsf	31,4	;volatile
   936                           
   937                           ;ADC_Init.c: 56:             ADCON0bits.CHS1 = 0;
   938  0041  119F               	bcf	31,3	;volatile
   939                           
   940                           ;ADC_Init.c: 57:             ADCON0bits.CHS0 = 1;
   941  0042  151F               	bsf	31,2	;volatile
   942                           
   943                           ;ADC_Init.c: 58:             break;
   944  0043  28B0               	goto	l924
   945  0044                     l86:	
   946                           ;ADC_Init.c: 60:         case 6:
   947                           
   948                           
   949                           ;ADC_Init.c: 61:             ADCON0bits.CHS3 = 0;
   950  0044  129F               	bcf	31,5	;volatile
   951                           
   952                           ;ADC_Init.c: 62:             ADCON0bits.CHS2 = 1;
   953  0045  161F               	bsf	31,4	;volatile
   954                           
   955                           ;ADC_Init.c: 63:             ADCON0bits.CHS1 = 1;
   956  0046  159F               	bsf	31,3	;volatile
   957                           
   958                           ;ADC_Init.c: 64:             ADCON0bits.CHS0 = 0;
   959  0047  111F               	bcf	31,2	;volatile
   960                           
   961                           ;ADC_Init.c: 65:             break;
   962  0048  28B0               	goto	l924
   963  0049                     l87:	
   964                           ;ADC_Init.c: 67:         case 7:
   965                           
   966                           
   967                           ;ADC_Init.c: 68:             ADCON0bits.CHS3 = 0;
   968  0049  129F               	bcf	31,5	;volatile
   969                           
   970                           ;ADC_Init.c: 69:             ADCON0bits.CHS2 = 1;
   971  004A  161F               	bsf	31,4	;volatile
   972                           
   973                           ;ADC_Init.c: 70:             ADCON0bits.CHS1 = 1;
   974  004B  159F               	bsf	31,3	;volatile
   975                           
   976                           ;ADC_Init.c: 71:             ADCON0bits.CHS0 = 1;
   977  004C  151F               	bsf	31,2	;volatile
   978                           
   979                           ;ADC_Init.c: 72:             break;
   980  004D  28B0               	goto	l924
   981  004E                     l88:	
   982                           ;ADC_Init.c: 74:         case 8:
   983                           
   984                           
   985                           ;ADC_Init.c: 75:             ADCON0bits.CHS3 = 1;
   986  004E  169F               	bsf	31,5	;volatile
   987                           
   988                           ;ADC_Init.c: 76:             ADCON0bits.CHS2 = 0;
   989  004F  121F               	bcf	31,4	;volatile
   990                           
   991                           ;ADC_Init.c: 77:             ADCON0bits.CHS1 = 0;
   992  0050  119F               	bcf	31,3	;volatile
   993                           
   994                           ;ADC_Init.c: 78:             ADCON0bits.CHS0 = 0;
   995  0051  111F               	bcf	31,2	;volatile
   996                           
   997                           ;ADC_Init.c: 79:             break;
   998  0052  28B0               	goto	l924
   999  0053                     l89:	
  1000                           ;ADC_Init.c: 81:         case 9:
  1001                           
  1002                           
  1003                           ;ADC_Init.c: 82:             ADCON0bits.CHS3 = 1;
  1004  0053  169F               	bsf	31,5	;volatile
  1005                           
  1006                           ;ADC_Init.c: 83:             ADCON0bits.CHS2 = 0;
  1007  0054  121F               	bcf	31,4	;volatile
  1008                           
  1009                           ;ADC_Init.c: 84:             ADCON0bits.CHS1 = 0;
  1010  0055  119F               	bcf	31,3	;volatile
  1011                           
  1012                           ;ADC_Init.c: 85:             ADCON0bits.CHS0 = 1;
  1013  0056  151F               	bsf	31,2	;volatile
  1014                           
  1015                           ;ADC_Init.c: 86:             break;
  1016  0057  28B0               	goto	l924
  1017  0058                     l90:	
  1018                           ;ADC_Init.c: 88:         case 10:
  1019                           
  1020                           
  1021                           ;ADC_Init.c: 89:             ADCON0bits.CHS3 = 1;
  1022  0058  169F               	bsf	31,5	;volatile
  1023                           
  1024                           ;ADC_Init.c: 90:             ADCON0bits.CHS2 = 0;
  1025  0059  121F               	bcf	31,4	;volatile
  1026                           
  1027                           ;ADC_Init.c: 91:             ADCON0bits.CHS1 = 1;
  1028  005A  159F               	bsf	31,3	;volatile
  1029                           
  1030                           ;ADC_Init.c: 92:             ADCON0bits.CHS0 = 0;
  1031  005B  111F               	bcf	31,2	;volatile
  1032                           
  1033                           ;ADC_Init.c: 93:             break;
  1034  005C  28B0               	goto	l924
  1035  005D                     l91:	
  1036                           ;ADC_Init.c: 95:         case 11:
  1037                           
  1038                           
  1039                           ;ADC_Init.c: 96:             ADCON0bits.CHS3 = 1;
  1040  005D  169F               	bsf	31,5	;volatile
  1041                           
  1042                           ;ADC_Init.c: 97:             ADCON0bits.CHS2 = 0;
  1043  005E  121F               	bcf	31,4	;volatile
  1044                           
  1045                           ;ADC_Init.c: 98:             ADCON0bits.CHS1 = 1;
  1046  005F  159F               	bsf	31,3	;volatile
  1047                           
  1048                           ;ADC_Init.c: 99:             ADCON0bits.CHS0 = 1;
  1049  0060  151F               	bsf	31,2	;volatile
  1050                           
  1051                           ;ADC_Init.c: 100:             break;
  1052  0061  28B0               	goto	l924
  1053  0062                     l92:	
  1054                           ;ADC_Init.c: 102:         case 12:
  1055                           
  1056                           
  1057                           ;ADC_Init.c: 103:             ADCON0bits.CHS3 = 1;
  1058  0062  169F               	bsf	31,5	;volatile
  1059                           
  1060                           ;ADC_Init.c: 104:             ADCON0bits.CHS2 = 1;
  1061  0063  161F               	bsf	31,4	;volatile
  1062                           
  1063                           ;ADC_Init.c: 105:             ADCON0bits.CHS1 = 0;
  1064  0064  119F               	bcf	31,3	;volatile
  1065                           
  1066                           ;ADC_Init.c: 106:             ADCON0bits.CHS0 = 0;
  1067  0065  111F               	bcf	31,2	;volatile
  1068                           
  1069                           ;ADC_Init.c: 107:             break;
  1070  0066  28B0               	goto	l924
  1071  0067                     l93:	
  1072                           ;ADC_Init.c: 109:         case 13:
  1073                           
  1074                           
  1075                           ;ADC_Init.c: 110:             ADCON0bits.CHS3 = 1;
  1076  0067  169F               	bsf	31,5	;volatile
  1077                           
  1078                           ;ADC_Init.c: 111:             ADCON0bits.CHS2 = 1;
  1079  0068  161F               	bsf	31,4	;volatile
  1080                           
  1081                           ;ADC_Init.c: 112:             ADCON0bits.CHS1 = 0;
  1082  0069  119F               	bcf	31,3	;volatile
  1083                           
  1084                           ;ADC_Init.c: 113:             ADCON0bits.CHS0 = 1;
  1085  006A  151F               	bsf	31,2	;volatile
  1086                           
  1087                           ;ADC_Init.c: 114:             break;
  1088  006B  28B0               	goto	l924
  1089  006C                     l94:	
  1090                           ;ADC_Init.c: 116:         case 14:
  1091                           
  1092                           
  1093                           ;ADC_Init.c: 117:             ADCON0bits.CHS3 = 1;
  1094  006C  169F               	bsf	31,5	;volatile
  1095                           
  1096                           ;ADC_Init.c: 118:             ADCON0bits.CHS2 = 1;
  1097  006D  161F               	bsf	31,4	;volatile
  1098                           
  1099                           ;ADC_Init.c: 119:             ADCON0bits.CHS1 = 1;
  1100  006E  159F               	bsf	31,3	;volatile
  1101                           
  1102                           ;ADC_Init.c: 120:             ADCON0bits.CHS0 = 0;
  1103  006F  111F               	bcf	31,2	;volatile
  1104                           
  1105                           ;ADC_Init.c: 121:             break;
  1106  0070  28B0               	goto	l924
  1107  0071                     l95:	
  1108                           ;ADC_Init.c: 123:         case 15:
  1109                           
  1110                           
  1111                           ;ADC_Init.c: 124:             ADCON0bits.CHS3 = 1;
  1112  0071  169F               	bsf	31,5	;volatile
  1113                           
  1114                           ;ADC_Init.c: 125:             ADCON0bits.CHS2 = 1;
  1115  0072  161F               	bsf	31,4	;volatile
  1116                           
  1117                           ;ADC_Init.c: 126:             ADCON0bits.CHS1 = 1;
  1118  0073  159F               	bsf	31,3	;volatile
  1119                           
  1120                           ;ADC_Init.c: 127:             ADCON0bits.CHS0 = 1;
  1121  0074  151F               	bsf	31,2	;volatile
  1122                           
  1123                           ;ADC_Init.c: 128:             break;
  1124  0075  28B0               	goto	l924
  1125  0076                     l922:	
  1126  0076  0820               	movf	initADC@analog,w
  1127  0077  00F4               	movwf	??_initADC
  1128  0078  01F5               	clrf	??_initADC+1
  1129                           
  1130                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1131                           ; Switch size 1, requested type "simple"
  1132                           ; Number of cases is 1, Range of values is 0 to 0
  1133                           ; switch strategies available:
  1134                           ; Name         Instructions Cycles
  1135                           ; simple_byte            4     3 (average)
  1136                           ; direct_byte           11     8 (fixed)
  1137                           ; jumptable            260     6 (fixed)
  1138                           ;	Chosen strategy is simple_byte
  1139  0079  0875               	movf	??_initADC+1,w
  1140  007A  3A00               	xorlw	0	; case 0
  1141  007B  1903               	skipnz
  1142  007C  287E               	goto	l990
  1143  007D  28B0               	goto	l924
  1144  007E                     l990:	
  1145                           
  1146                           ; Switch size 1, requested type "simple"
  1147                           ; Number of cases is 16, Range of values is 0 to 15
  1148                           ; switch strategies available:
  1149                           ; Name         Instructions Cycles
  1150                           ; simple_byte           49    25 (average)
  1151                           ; direct_byte           56     8 (fixed)
  1152                           ; jumptable            260     6 (fixed)
  1153                           ;	Chosen strategy is simple_byte
  1154  007E  0874               	movf	??_initADC,w
  1155  007F  3A00               	xorlw	0	; case 0
  1156  0080  1903               	skipnz
  1157  0081  2826               	goto	l79
  1158  0082  3A01               	xorlw	1	; case 1
  1159  0083  1903               	skipnz
  1160  0084  282B               	goto	l81
  1161  0085  3A03               	xorlw	3	; case 2
  1162  0086  1903               	skipnz
  1163  0087  2830               	goto	l82
  1164  0088  3A01               	xorlw	1	; case 3
  1165  0089  1903               	skipnz
  1166  008A  2835               	goto	l83
  1167  008B  3A07               	xorlw	7	; case 4
  1168  008C  1903               	skipnz
  1169  008D  283A               	goto	l84
  1170  008E  3A01               	xorlw	1	; case 5
  1171  008F  1903               	skipnz
  1172  0090  283F               	goto	l85
  1173  0091  3A03               	xorlw	3	; case 6
  1174  0092  1903               	skipnz
  1175  0093  2844               	goto	l86
  1176  0094  3A01               	xorlw	1	; case 7
  1177  0095  1903               	skipnz
  1178  0096  2849               	goto	l87
  1179  0097  3A0F               	xorlw	15	; case 8
  1180  0098  1903               	skipnz
  1181  0099  284E               	goto	l88
  1182  009A  3A01               	xorlw	1	; case 9
  1183  009B  1903               	skipnz
  1184  009C  2853               	goto	l89
  1185  009D  3A03               	xorlw	3	; case 10
  1186  009E  1903               	skipnz
  1187  009F  2858               	goto	l90
  1188  00A0  3A01               	xorlw	1	; case 11
  1189  00A1  1903               	skipnz
  1190  00A2  285D               	goto	l91
  1191  00A3  3A07               	xorlw	7	; case 12
  1192  00A4  1903               	skipnz
  1193  00A5  2862               	goto	l92
  1194  00A6  3A01               	xorlw	1	; case 13
  1195  00A7  1903               	skipnz
  1196  00A8  2867               	goto	l93
  1197  00A9  3A03               	xorlw	3	; case 14
  1198  00AA  1903               	skipnz
  1199  00AB  286C               	goto	l94
  1200  00AC  3A01               	xorlw	1	; case 15
  1201  00AD  1903               	skipnz
  1202  00AE  2871               	goto	l95
  1203  00AF  28B0               	goto	l924
  1204  00B0                     l924:	
  1205                           
  1206                           ;ADC_Init.c: 130:     ADCON1 = 0;
  1207  00B0  1683               	bsf	3,5	;RP0=1, select bank1
  1208  00B1  1303               	bcf	3,6	;RP1=0, select bank1
  1209  00B2  019F               	clrf	31	;volatile
  1210  00B3                     l926:	
  1211                           
  1212                           ;ADC_Init.c: 132:     ADCON0bits.GO_DONE = 1;
  1213  00B3  1283               	bcf	3,5	;RP0=0, select bank0
  1214  00B4  1303               	bcf	3,6	;RP1=0, select bank0
  1215  00B5  149F               	bsf	31,1	;volatile
  1216  00B6                     l96:	
  1217  00B6  0008               	return
  1218  00B7                     __end_of_initADC:	
  1219                           
  1220                           	psect	text3
  1221  0103                     __ptext3:	
  1222 ;; *************** function _isr *****************
  1223 ;; Defined at:
  1224 ;;		line 39 in file "SPI.c"
  1225 ;; Parameters:    Size  Location     Type
  1226 ;;		None
  1227 ;; Auto vars:     Size  Location     Type
  1228 ;;		None
  1229 ;; Return value:  Size  Location     Type
  1230 ;;                  1    wreg      void 
  1231 ;; Registers used:
  1232 ;;		wreg, status,2, status,0, pclath, cstack
  1233 ;; Tracked objects:
  1234 ;;		On entry : 0/0
  1235 ;;		On exit  : 0/0
  1236 ;;		Unchanged: 0/0
  1237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1238 ;;      Params:         0       0       0       0       0
  1239 ;;      Locals:         0       0       0       0       0
  1240 ;;      Temps:          3       0       0       0       0
  1241 ;;      Totals:         3       0       0       0       0
  1242 ;;Total ram usage:        3 bytes
  1243 ;; Hardware stack levels used:    1
  1244 ;; Hardware stack levels required when called:    2
  1245 ;; This function calls:
  1246 ;;		_spiRead
  1247 ;;		_spiWrite
  1248 ;; This function is called by:
  1249 ;;		Interrupt level 1
  1250 ;; This function uses a non-reentrant model
  1251 ;;
  1252                           
  1253                           
  1254                           ;psect for function _isr
  1255  0103                     _isr:	
  1256  0103                     i1l756:	
  1257                           
  1258                           ;SPI.c: 40:    if(SSPIF == 1){
  1259  0103  1283               	bcf	3,5	;RP0=0, select bank0
  1260  0104  1303               	bcf	3,6	;RP1=0, select bank0
  1261  0105  1D8C               	btfss	12,3	;volatile
  1262  0106  2908               	goto	u3_21
  1263  0107  2909               	goto	u3_20
  1264  0108                     u3_21:	
  1265  0108  292F               	goto	i1l772
  1266  0109                     u3_20:	
  1267  0109                     i1l758:	
  1268                           
  1269                           ;SPI.c: 41:         state = spiRead();
  1270  0109  120A  118A  215B  120A  118A  	fcall	_spiRead
  1271  010E  00F1               	movwf	??_isr
  1272  010F  0871               	movf	??_isr,w
  1273  0110  00F6               	movwf	_state
  1274  0111                     i1l760:	
  1275                           
  1276                           ;SPI.c: 42:         PORTB = state;
  1277  0111  0876               	movf	_state,w
  1278  0112  1283               	bcf	3,5	;RP0=0, select bank0
  1279  0113  1303               	bcf	3,6	;RP1=0, select bank0
  1280  0114  0086               	movwf	6	;volatile
  1281  0115                     i1l762:	
  1282                           
  1283                           ;SPI.c: 43:         if (state == 1){
  1284  0115  0376               	decf	_state,w
  1285  0116  1D03               	btfss	3,2
  1286  0117  2919               	goto	u4_21
  1287  0118  291A               	goto	u4_20
  1288  0119                     u4_21:	
  1289  0119  2920               	goto	i1l766
  1290  011A                     u4_20:	
  1291  011A                     i1l764:	
  1292                           
  1293                           ;SPI.c: 44:             spiWrite(adc1);
  1294  011A  0878               	movf	_adc1,w
  1295  011B  120A  118A  216B  120A  118A  	fcall	_spiWrite
  1296  0120                     i1l766:	
  1297                           
  1298                           ;SPI.c: 46:         if (state == 2){
  1299  0120  3002               	movlw	2
  1300  0121  0676               	xorwf	_state,w
  1301  0122  1D03               	btfss	3,2
  1302  0123  2925               	goto	u5_21
  1303  0124  2926               	goto	u5_20
  1304  0125                     u5_21:	
  1305  0125  292C               	goto	i1l770
  1306  0126                     u5_20:	
  1307  0126                     i1l768:	
  1308                           
  1309                           ;SPI.c: 47:             spiWrite(adc2);
  1310  0126  0877               	movf	_adc2,w
  1311  0127  120A  118A  216B  120A  118A  	fcall	_spiWrite
  1312  012C                     i1l770:	
  1313                           
  1314                           ;SPI.c: 49:         SSPIF = 0;
  1315  012C  1283               	bcf	3,5	;RP0=0, select bank0
  1316  012D  1303               	bcf	3,6	;RP1=0, select bank0
  1317  012E  118C               	bcf	12,3	;volatile
  1318  012F                     i1l772:	
  1319                           
  1320                           ;SPI.c: 51:    if(ADCON0bits.GO_DONE == 0){
  1321  012F  189F               	btfsc	31,1	;volatile
  1322  0130  2932               	goto	u6_21
  1323  0131  2933               	goto	u6_20
  1324  0132                     u6_21:	
  1325  0132  2936               	goto	i1l55
  1326  0133                     u6_20:	
  1327  0133                     i1l774:	
  1328                           
  1329                           ;SPI.c: 52:         ready = 1;
  1330  0133  01F9               	clrf	_ready
  1331  0134  0AF9               	incf	_ready,f
  1332                           
  1333                           ;SPI.c: 53:         PIR1bits.ADIF = 0;
  1334  0135  130C               	bcf	12,6	;volatile
  1335  0136                     i1l55:	
  1336  0136  0873               	movf	??_isr+2,w
  1337  0137  008A               	movwf	10
  1338  0138  0E72               	swapf	(??_isr+1)^(0+4294967168),w
  1339  0139  0083               	movwf	3
  1340  013A  0EFE               	swapf	btemp,f
  1341  013B  0E7E               	swapf	btemp,w
  1342  013C  0009               	retfie
  1343  013D                     __end_of_isr:	
  1344                           
  1345                           	psect	intentry
  1346  0004                     __pintentry:	
  1347                           ;incstack = 0
  1348                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  1349                           
  1350  0004                     interrupt_function:	
  1351  007E                     saved_w	set	btemp
  1352  0004  00FE               	movwf	btemp
  1353  0005  0E03               	swapf	3,w
  1354  0006  00F2               	movwf	??_isr+1
  1355  0007  080A               	movf	10,w
  1356  0008  00F3               	movwf	??_isr+2
  1357  0009  120A  118A  2903   	ljmp	_isr
  1358                           
  1359                           	psect	text4
  1360  016B                     __ptext4:	
  1361 ;; *************** function _spiWrite *****************
  1362 ;; Defined at:
  1363 ;;		line 27 in file "SPI_Init.c"
  1364 ;; Parameters:    Size  Location     Type
  1365 ;;  dat             1    wreg     unsigned char 
  1366 ;; Auto vars:     Size  Location     Type
  1367 ;;  dat             1    0[COMMON] unsigned char 
  1368 ;; Return value:  Size  Location     Type
  1369 ;;                  1    wreg      void 
  1370 ;; Registers used:
  1371 ;;		wreg
  1372 ;; Tracked objects:
  1373 ;;		On entry : 0/0
  1374 ;;		On exit  : 0/0
  1375 ;;		Unchanged: 0/0
  1376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1377 ;;      Params:         0       0       0       0       0
  1378 ;;      Locals:         1       0       0       0       0
  1379 ;;      Temps:          0       0       0       0       0
  1380 ;;      Totals:         1       0       0       0       0
  1381 ;;Total ram usage:        1 bytes
  1382 ;; Hardware stack levels used:    1
  1383 ;; This function calls:
  1384 ;;		Nothing
  1385 ;; This function is called by:
  1386 ;;		_isr
  1387 ;; This function uses a non-reentrant model
  1388 ;;
  1389                           
  1390                           
  1391                           ;psect for function _spiWrite
  1392  016B                     _spiWrite:	
  1393                           
  1394                           ;incstack = 0
  1395                           ; Regs used in _spiWrite: [wreg]
  1396                           ;spiWrite@dat stored from wreg
  1397  016B  00F0               	movwf	spiWrite@dat
  1398  016C                     i1l730:	
  1399                           
  1400                           ;SPI_Init.c: 27: void spiWrite(char dat);SPI_Init.c: 28: {;SPI_Init.c: 29:     SSPBUF = 
      +                          dat;
  1401  016C  0870               	movf	spiWrite@dat,w
  1402  016D  1283               	bcf	3,5	;RP0=0, select bank0
  1403  016E  1303               	bcf	3,6	;RP1=0, select bank0
  1404  016F  0093               	movwf	19	;volatile
  1405  0170                     i1l122:	
  1406  0170  0008               	return
  1407  0171                     __end_of_spiWrite:	
  1408                           
  1409                           	psect	text5
  1410  015B                     __ptext5:	
  1411 ;; *************** function _spiRead *****************
  1412 ;; Defined at:
  1413 ;;		line 40 in file "SPI_Init.c"
  1414 ;; Parameters:    Size  Location     Type
  1415 ;;		None
  1416 ;; Auto vars:     Size  Location     Type
  1417 ;;		None
  1418 ;; Return value:  Size  Location     Type
  1419 ;;                  1    wreg      unsigned char 
  1420 ;; Registers used:
  1421 ;;		wreg, status,2, status,0, pclath, cstack
  1422 ;; Tracked objects:
  1423 ;;		On entry : 0/0
  1424 ;;		On exit  : 0/0
  1425 ;;		Unchanged: 0/0
  1426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1427 ;;      Params:         0       0       0       0       0
  1428 ;;      Locals:         0       0       0       0       0
  1429 ;;      Temps:          0       0       0       0       0
  1430 ;;      Totals:         0       0       0       0       0
  1431 ;;Total ram usage:        0 bytes
  1432 ;; Hardware stack levels used:    1
  1433 ;; Hardware stack levels required when called:    1
  1434 ;; This function calls:
  1435 ;;		_spiReceiveWait
  1436 ;; This function is called by:
  1437 ;;		_isr
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441                           
  1442                           ;psect for function _spiRead
  1443  015B                     _spiRead:	
  1444  015B                     i1l724:	
  1445                           ;incstack = 0
  1446                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1447                           
  1448                           
  1449                           ;SPI_Init.c: 42:     spiReceiveWait();
  1450  015B  120A  118A  2164  120A  118A  	fcall	_spiReceiveWait
  1451  0160                     i1l726:	
  1452                           
  1453                           ;SPI_Init.c: 43:     return(SSPBUF);
  1454  0160  1283               	bcf	3,5	;RP0=0, select bank0
  1455  0161  1303               	bcf	3,6	;RP1=0, select bank0
  1456  0162  0813               	movf	19,w	;volatile
  1457  0163                     i1l130:	
  1458  0163  0008               	return
  1459  0164                     __end_of_spiRead:	
  1460                           
  1461                           	psect	text6
  1462  0164                     __ptext6:	
  1463 ;; *************** function _spiReceiveWait *****************
  1464 ;; Defined at:
  1465 ;;		line 22 in file "SPI_Init.c"
  1466 ;; Parameters:    Size  Location     Type
  1467 ;;		None
  1468 ;; Auto vars:     Size  Location     Type
  1469 ;;		None
  1470 ;; Return value:  Size  Location     Type
  1471 ;;                  1    wreg      void 
  1472 ;; Registers used:
  1473 ;;		None
  1474 ;; Tracked objects:
  1475 ;;		On entry : 0/0
  1476 ;;		On exit  : 0/0
  1477 ;;		Unchanged: 0/0
  1478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1479 ;;      Params:         0       0       0       0       0
  1480 ;;      Locals:         0       0       0       0       0
  1481 ;;      Temps:          0       0       0       0       0
  1482 ;;      Totals:         0       0       0       0       0
  1483 ;;Total ram usage:        0 bytes
  1484 ;; Hardware stack levels used:    1
  1485 ;; This function calls:
  1486 ;;		Nothing
  1487 ;; This function is called by:
  1488 ;;		_spiRead
  1489 ;; This function uses a non-reentrant model
  1490 ;;
  1491                           
  1492                           
  1493                           ;psect for function _spiReceiveWait
  1494  0164                     _spiReceiveWait:	
  1495  0164                     i1l722:	
  1496                           ;incstack = 0
  1497                           ; Regs used in _spiReceiveWait: []
  1498                           
  1499  0164                     i1l116:	
  1500                           ;SPI_Init.c: 24:     while ( !SSPSTATbits.BF );
  1501                           
  1502  0164  1683               	bsf	3,5	;RP0=1, select bank1
  1503  0165  1303               	bcf	3,6	;RP1=0, select bank1
  1504  0166  1C14               	btfss	20,0	;volatile
  1505  0167  2969               	goto	u1_21
  1506  0168  296A               	goto	u1_20
  1507  0169                     u1_21:	
  1508  0169  2964               	goto	i1l116
  1509  016A                     u1_20:	
  1510  016A                     i1l119:	
  1511  016A  0008               	return
  1512  016B                     __end_of_spiReceiveWait:	
  1513  007E                     btemp	set	126	;btemp
  1514  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80      4       4
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_initADC

Critical Paths under _isr in COMMON

    _isr->_spiWrite

Critical Paths under _main in BANK0

    _main->_spiInit

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     478
                                              3 BANK0      1     1      0
                            _initADC
                            _spiInit
 ---------------------------------------------------------------------------------
 (1) _spiInit                                              4     1      3     456
                                              4 COMMON     1     1      0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _initADC                                              3     3      0      22
                                              4 COMMON     2     2      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  3     3      0      15
                                              1 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (3) _spiWrite                                             1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (4) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initADC
   _spiInit

 _isr (ROOT)
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       E       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4       4       5        5.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       E      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Feb 16 14:49:52 2020

             __CFG_CP$OFF 0000               _SSPSTATbits 0094                        l81 002B  
                      l90 0058                        l82 0030                        l91 005D  
                      l83 0035                        l92 0062                        l84 003A  
                      l93 0067                        l85 003F                        l94 006C  
                      l86 0044                        l95 0071                        l87 0049  
                      l79 0026                        l96 00B6                        l88 004E  
                      l89 0053                       l112 0155                       l113 015A  
                     l910 0145                       l912 014B                       l922 0076  
                     l914 014D                       l924 00B0                       l916 0154  
                     l908 013E                       l940 00C8                       l932 00B7  
                     l926 00B3                       l918 001A                       l950 00D9  
                     l942 00C9                       l934 00BB                       l960 00EC  
                     l952 00DF                       l944 00CA                       l936 00BC  
                     l962 00F2                       l954 00E4                       l946 00CD  
                     l938 00C7                       l964 00F7                       l956 00EA  
                     l948 00CE                       l990 007E                       l966 00FD  
                     l958 00EB                       l968 00FE                       u120 0145  
                     u121 0144                       u130 00E4                       u131 00E3  
                     u140 00F7                       u141 00F6              __CFG_CPD$OFF 0000  
                     _isr 0103              __CFG_LVP$OFF 0000                      ?_isr 0070  
                    i1l55 0136                      u1_20 016A                      u1_21 0169  
                    u3_20 0109                      u3_21 0108                      u4_20 011A  
                    u4_21 0119                      u5_20 0126                      u5_21 0125  
                    u6_20 0133                      u6_21 0132              __CFG_WRT$OFF 0000  
                    _adc1 0078                      _adc2 0077                      _main 00B7  
                    btemp 007E                      start 000C             __CFG_IESO$OFF 0000  
                   ??_isr 0071                     ?_main 0070             __CFG_WDTE$OFF 0000  
                   _ANSEL 0188                     i1l130 0163                     i1l122 0170  
                   i1l116 0164                     i1l119 016A                     i1l722 0164  
                   i1l730 016C                     i1l724 015B                     i1l726 0160  
                   i1l760 0111                     i1l770 012C                     i1l762 0115  
                   i1l764 011A                     i1l772 012F                     i1l756 0103  
                   i1l774 0133                     i1l766 0120                     i1l758 0109  
                   i1l768 0126                     _PORTA 0005                     _PORTB 0006  
                   _PORTD 0008                     _TRISA 0085                     _TRISB 0086  
                   _TRISD 0088                     _SSPIF 0063            __CFG_FCMEN$OFF 0000  
         __end_of_initADC 00B7                     _ready 0079                     _state 0076  
          __CFG_BOREN$OFF 0000                     pclath 000A           __end_of_spiInit 015B  
         __end_of_spiRead 0164                     status 0003                     wtemp0 007E  
          __CFG_MCLRE$OFF 0000           __initialization 000F              __end_of_main 0103  
                  ??_main 0023                    _ADCON1 009F                    _ADRESH 001E  
                  _ANSELH 0189                    _TRISC3 043B                    _TRISC5 043D  
                  _SSPCON 0014                    _SSPBUF 0013            __CFG_PWRTE$OFF 0000  
               ??_initADC 0074                    saved_w 007E          __end_of_spiWrite 0171  
               ??_spiInit 0074                 ??_spiRead 0070   __end_of__initialization 0013  
          __pcstackCOMMON 0070                __pmaintext 00B7             initADC@analog 0020  
              __pintentry 0004   __size_of_spiReceiveWait 0007                   _SSPSTAT 0094  
               ?_spiWrite 0070                   __ptext1 013D                   __ptext2 0017  
                 __ptext3 0103                   __ptext4 016B                   __ptext5 015B  
                 __ptext6 0164                   _initADC 0017              __size_of_isr 003A  
                 _spiInit 013D                   _spiRead 015B      end_of_initialization 0013  
              ??_spiWrite 0070                 _TRISAbits 0085               spiWrite@dat 0070  
          _spiReceiveWait 0164       start_initialization 000F               __end_of_isr 013D  
__CFG_FOSC$INTRC_NOCLKOUT 0000    __end_of_spiReceiveWait 016B               __pbssCOMMON 0076  
               ___latbits 0002             __pcstackBANK0 0020           ?_spiReceiveWait 0070  
       __size_of_spiWrite 0006                  ?_initADC 0070                  ?_spiInit 0020  
                ?_spiRead 0070      spiInit@sTransmitEdge 0022         interrupt_function 0004  
                _PIE1bits 008C        spiInit@sDataSample 0020                  _PIR1bits 000C  
              _ADCON0bits 001F          __size_of_initADC 00A0          __size_of_spiInit 001E  
        __size_of_spiRead 0009         __CFG_BOR4V$BOR40V 0000             __size_of_main 004C  
                _spiWrite 016B              spiInit@sType 0074         spiInit@sClockIdle 0021  
              _INTCONbits 000B                  intlevel1 0000          ??_spiReceiveWait 0070  
