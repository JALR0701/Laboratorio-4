

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Feb 16 11:13:35 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.10
    19                           ; Generated 31/07/2019 GMT
    20                           ; 
    21                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F887 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  008F                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  0105                     	;# 
   116  0107                     	;# 
   117  0108                     	;# 
   118  0109                     	;# 
   119  010C                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0185                     	;# 
   125  0187                     	;# 
   126  0188                     	;# 
   127  0189                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  000E                     	;# 
   146  000F                     	;# 
   147  0010                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0013                     	;# 
   151  0014                     	;# 
   152  0015                     	;# 
   153  0015                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001B                     	;# 
   160  001B                     	;# 
   161  001C                     	;# 
   162  001D                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  0081                     	;# 
   166  0085                     	;# 
   167  0086                     	;# 
   168  0087                     	;# 
   169  0088                     	;# 
   170  0089                     	;# 
   171  008C                     	;# 
   172  008D                     	;# 
   173  008E                     	;# 
   174  008F                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0094                     	;# 
   182  0095                     	;# 
   183  0096                     	;# 
   184  0097                     	;# 
   185  0098                     	;# 
   186  0099                     	;# 
   187  009A                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  0105                     	;# 
   194  0107                     	;# 
   195  0108                     	;# 
   196  0109                     	;# 
   197  010C                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  010F                     	;# 
   202  0185                     	;# 
   203  0187                     	;# 
   204  0188                     	;# 
   205  0189                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  0000                     	;# 
   209  0001                     	;# 
   210  0002                     	;# 
   211  0003                     	;# 
   212  0004                     	;# 
   213  0005                     	;# 
   214  0006                     	;# 
   215  0007                     	;# 
   216  0008                     	;# 
   217  0009                     	;# 
   218  000A                     	;# 
   219  000B                     	;# 
   220  000C                     	;# 
   221  000D                     	;# 
   222  000E                     	;# 
   223  000E                     	;# 
   224  000F                     	;# 
   225  0010                     	;# 
   226  0011                     	;# 
   227  0012                     	;# 
   228  0013                     	;# 
   229  0014                     	;# 
   230  0015                     	;# 
   231  0015                     	;# 
   232  0016                     	;# 
   233  0017                     	;# 
   234  0018                     	;# 
   235  0019                     	;# 
   236  001A                     	;# 
   237  001B                     	;# 
   238  001B                     	;# 
   239  001C                     	;# 
   240  001D                     	;# 
   241  001E                     	;# 
   242  001F                     	;# 
   243  0081                     	;# 
   244  0085                     	;# 
   245  0086                     	;# 
   246  0087                     	;# 
   247  0088                     	;# 
   248  0089                     	;# 
   249  008C                     	;# 
   250  008D                     	;# 
   251  008E                     	;# 
   252  008F                     	;# 
   253  0090                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0094                     	;# 
   260  0095                     	;# 
   261  0096                     	;# 
   262  0097                     	;# 
   263  0098                     	;# 
   264  0099                     	;# 
   265  009A                     	;# 
   266  009B                     	;# 
   267  009C                     	;# 
   268  009D                     	;# 
   269  009E                     	;# 
   270  009F                     	;# 
   271  0105                     	;# 
   272  0107                     	;# 
   273  0108                     	;# 
   274  0109                     	;# 
   275  010C                     	;# 
   276  010C                     	;# 
   277  010D                     	;# 
   278  010E                     	;# 
   279  010F                     	;# 
   280  0185                     	;# 
   281  0187                     	;# 
   282  0188                     	;# 
   283  0189                     	;# 
   284  018C                     	;# 
   285  018D                     	;# 
   286  0000                     	;# 
   287  0001                     	;# 
   288  0002                     	;# 
   289  0003                     	;# 
   290  0004                     	;# 
   291  0005                     	;# 
   292  0006                     	;# 
   293  0007                     	;# 
   294  0008                     	;# 
   295  0009                     	;# 
   296  000A                     	;# 
   297  000B                     	;# 
   298  000C                     	;# 
   299  000D                     	;# 
   300  000E                     	;# 
   301  000E                     	;# 
   302  000F                     	;# 
   303  0010                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0013                     	;# 
   307  0014                     	;# 
   308  0015                     	;# 
   309  0015                     	;# 
   310  0016                     	;# 
   311  0017                     	;# 
   312  0018                     	;# 
   313  0019                     	;# 
   314  001A                     	;# 
   315  001B                     	;# 
   316  001B                     	;# 
   317  001C                     	;# 
   318  001D                     	;# 
   319  001E                     	;# 
   320  001F                     	;# 
   321  0081                     	;# 
   322  0085                     	;# 
   323  0086                     	;# 
   324  0087                     	;# 
   325  0088                     	;# 
   326  0089                     	;# 
   327  008C                     	;# 
   328  008D                     	;# 
   329  008E                     	;# 
   330  008F                     	;# 
   331  0090                     	;# 
   332  0091                     	;# 
   333  0092                     	;# 
   334  0093                     	;# 
   335  0093                     	;# 
   336  0093                     	;# 
   337  0094                     	;# 
   338  0095                     	;# 
   339  0096                     	;# 
   340  0097                     	;# 
   341  0098                     	;# 
   342  0099                     	;# 
   343  009A                     	;# 
   344  009B                     	;# 
   345  009C                     	;# 
   346  009D                     	;# 
   347  009E                     	;# 
   348  009F                     	;# 
   349  0105                     	;# 
   350  0107                     	;# 
   351  0108                     	;# 
   352  0109                     	;# 
   353  010C                     	;# 
   354  010C                     	;# 
   355  010D                     	;# 
   356  010E                     	;# 
   357  010F                     	;# 
   358  0185                     	;# 
   359  0187                     	;# 
   360  0188                     	;# 
   361  0189                     	;# 
   362  018C                     	;# 
   363  018D                     	;# 
   364  0013                     _SSPBUF	set	19
   365  0014                     _SSPCON	set	20
   366  001E                     _ADRESH	set	30
   367  0006                     _PORTB	set	6
   368  0005                     _PORTA	set	5
   369  000C                     _PIR1bits	set	12
   370  001F                     _ADCON0bits	set	31
   371  000B                     _INTCONbits	set	11
   372  0063                     _SSPIF	set	99
   373  0094                     _SSPSTATbits	set	148
   374  0094                     _SSPSTAT	set	148
   375  009F                     _ADCON1	set	159
   376  008C                     _PIE1bits	set	140
   377  0086                     _TRISB	set	134
   378  0085                     _TRISA	set	133
   379  043B                     _TRISC3	set	1083
   380  043D                     _TRISC5	set	1085
   381  0188                     _ANSEL	set	392
   382                           
   383                           ; #config settings
   384  0000                     
   385                           	psect	cinit
   386  000F                     start_initialization:	
   387  000F                     __initialization:	
   388                           
   389                           ; Clear objects allocated to COMMON
   390  000F  01F6               	clrf	__pbssCOMMON& (0+127)
   391  0010  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   392  0011  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   393  0012  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   394  0013                     end_of_initialization:	
   395                           ;End of C runtime variable initialization code
   396                           
   397  0013                     __end_of__initialization:	
   398  0013  0183               	clrf	3
   399  0014  120A  118A  28B7   	ljmp	_main	;jump to C main() function
   400                           
   401                           	psect	bssCOMMON
   402  0076                     __pbssCOMMON:	
   403  0076                     _adc2:	
   404  0076                     	ds	1
   405  0077                     _adc1:	
   406  0077                     	ds	1
   407  0078                     _state:	
   408  0078                     	ds	1
   409  0079                     _ready:	
   410  0079                     	ds	1
   411                           
   412                           	psect	cstackCOMMON
   413  0070                     __pcstackCOMMON:	
   414  0070                     ?_spiRead:	
   415  0070                     ??_spiRead:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0070                     ?_spiWrite:	
   419                           ; 1 bytes @ 0x0
   420                           
   421  0070                     ??_spiWrite:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0070                     ?_initADC:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0070                     ?_ISR:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0070                     ?_main:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0070                     ?_spiReceiveWait:	
   434                           ; 1 bytes @ 0x0
   435                           
   436  0070                     ??_spiReceiveWait:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0070                     spiWrite@dat:	
   440                           ; 1 bytes @ 0x0
   441                           
   442                           
   443                           ; 1 bytes @ 0x0
   444  0070                     	ds	1
   445  0071                     ??_ISR:	
   446                           
   447                           ; 1 bytes @ 0x1
   448  0071                     	ds	3
   449  0074                     ??_spiInit:	
   450  0074                     ??_initADC:	
   451                           ; 1 bytes @ 0x4
   452                           
   453  0074                     spiInit@sType:	
   454                           ; 1 bytes @ 0x4
   455                           
   456                           
   457                           ; 1 bytes @ 0x4
   458  0074                     	ds	2
   459                           
   460                           	psect	cstackBANK0
   461  0020                     __pcstackBANK0:	
   462  0020                     ?_spiInit:	
   463  0020                     initADC@analog:	
   464                           ; 1 bytes @ 0x0
   465                           
   466  0020                     spiInit@sDataSample:	
   467                           ; 1 bytes @ 0x0
   468                           
   469                           
   470                           ; 1 bytes @ 0x0
   471  0020                     	ds	1
   472  0021                     spiInit@sClockIdle:	
   473                           
   474                           ; 1 bytes @ 0x1
   475  0021                     	ds	1
   476  0022                     spiInit@sTransmitEdge:	
   477                           
   478                           ; 1 bytes @ 0x2
   479  0022                     	ds	1
   480  0023                     ??_main:	
   481                           
   482                           ; 1 bytes @ 0x3
   483  0023                     	ds	1
   484                           
   485                           	psect	maintext
   486  00B7                     __pmaintext:	
   487 ;;
   488 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   489 ;;
   490 ;; *************** function _main *****************
   491 ;; Defined at:
   492 ;;		line 57 in file "SPI.c"
   493 ;; Parameters:    Size  Location     Type
   494 ;;		None
   495 ;; Auto vars:     Size  Location     Type
   496 ;;		None
   497 ;; Return value:  Size  Location     Type
   498 ;;                  1    wreg      void 
   499 ;; Registers used:
   500 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   501 ;; Tracked objects:
   502 ;;		On entry : B00/0
   503 ;;		On exit  : 0/0
   504 ;;		Unchanged: 0/0
   505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   506 ;;      Params:         0       0       0       0       0
   507 ;;      Locals:         0       0       0       0       0
   508 ;;      Temps:          0       1       0       0       0
   509 ;;      Totals:         0       1       0       0       0
   510 ;;Total ram usage:        1 bytes
   511 ;; Hardware stack levels required when called:    4
   512 ;; This function calls:
   513 ;;		_initADC
   514 ;;		_spiInit
   515 ;; This function is called by:
   516 ;;		Startup code after reset
   517 ;; This function uses a non-reentrant model
   518 ;;
   519                           
   520                           
   521                           ;psect for function _main
   522  00B7                     _main:	
   523  00B7                     l912:	
   524                           ;incstack = 0
   525                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   526                           
   527                           
   528                           ;SPI.c: 59:     TRISA = 0B00000011;
   529  00B7  3003               	movlw	3
   530  00B8  1683               	bsf	3,5	;RP0=1, select bank1
   531  00B9  1303               	bcf	3,6	;RP1=0, select bank1
   532  00BA  0085               	movwf	5	;volatile
   533  00BB                     l914:	
   534                           
   535                           ;SPI.c: 60:     TRISB = 0;
   536  00BB  0186               	clrf	6	;volatile
   537  00BC                     l916:	
   538                           
   539                           ;SPI.c: 62:     ANSEL = 0b00000011;
   540  00BC  3003               	movlw	3
   541  00BD  1683               	bsf	3,5	;RP0=1, select bank3
   542  00BE  1703               	bsf	3,6	;RP1=1, select bank3
   543  00BF  0088               	movwf	8	;volatile
   544                           
   545                           ;SPI.c: 64:     PORTA = 0;
   546  00C0  1283               	bcf	3,5	;RP0=0, select bank0
   547  00C1  1303               	bcf	3,6	;RP1=0, select bank0
   548  00C2  0185               	clrf	5	;volatile
   549                           
   550                           ;SPI.c: 65:     PORTB = 0;
   551  00C3  0186               	clrf	6	;volatile
   552  00C4                     l918:	
   553                           
   554                           ;SPI.c: 67:     PIR1bits.SSPIF = 0;
   555  00C4  118C               	bcf	12,3	;volatile
   556  00C5                     l920:	
   557                           
   558                           ;SPI.c: 68:     PIE1bits.SSPIE = 1;
   559  00C5  1683               	bsf	3,5	;RP0=1, select bank1
   560  00C6  1303               	bcf	3,6	;RP1=0, select bank1
   561  00C7  158C               	bsf	12,3	;volatile
   562  00C8                     l922:	
   563                           
   564                           ;SPI.c: 70:     spiInit(SPI_SLAVE_SS_EN, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LOW, SPI
      +                          _IDLE_2_ACTIVE);
   565  00C8  1283               	bcf	3,5	;RP0=0, select bank0
   566  00C9  1303               	bcf	3,6	;RP1=0, select bank0
   567  00CA  01A0               	clrf	spiInit@sDataSample
   568  00CB  01A1               	clrf	spiInit@sClockIdle
   569  00CC  01A2               	clrf	spiInit@sTransmitEdge
   570  00CD  3024               	movlw	36
   571  00CE  120A  118A  213A  120A  118A  	fcall	_spiInit
   572  00D3                     l924:	
   573                           
   574                           ;SPI.c: 73:         initADC(0);
   575  00D3  3000               	movlw	0
   576  00D4  120A  118A  2017  120A  118A  	fcall	_initADC
   577  00D9                     l926:	
   578                           
   579                           ;SPI.c: 74:         if(ready){
   580  00D9  0879               	movf	_ready,w
   581  00DA  1903               	btfsc	3,2
   582  00DB  28DD               	goto	u131
   583  00DC  28DE               	goto	u130
   584  00DD                     u131:	
   585  00DD  28E8               	goto	l934
   586  00DE                     u130:	
   587  00DE                     l928:	
   588                           
   589                           ;SPI.c: 75:             PORTB = ADRESH;
   590  00DE  1283               	bcf	3,5	;RP0=0, select bank0
   591  00DF  1303               	bcf	3,6	;RP1=0, select bank0
   592  00E0  081E               	movf	30,w	;volatile
   593  00E1  0086               	movwf	6	;volatile
   594                           
   595                           ;SPI.c: 76:             adc1 = ADRESH;
   596  00E2  081E               	movf	30,w	;volatile
   597  00E3  00A3               	movwf	??_main
   598  00E4  0823               	movf	??_main,w
   599  00E5  00F7               	movwf	_adc1
   600  00E6                     l930:	
   601                           
   602                           ;SPI.c: 77:             ready = 0;
   603  00E6  01F9               	clrf	_ready
   604  00E7                     l932:	
   605                           
   606                           ;SPI.c: 78:             ADCON0bits.GO_DONE = 1;
   607  00E7  149F               	bsf	31,1	;volatile
   608  00E8                     l934:	
   609                           
   610                           ;SPI.c: 80:         initADC(1);
   611  00E8  3001               	movlw	1
   612  00E9  120A  118A  2017  120A  118A  	fcall	_initADC
   613  00EE                     l936:	
   614                           
   615                           ;SPI.c: 81:         if(ready){
   616  00EE  0879               	movf	_ready,w
   617  00EF  1903               	btfsc	3,2
   618  00F0  28F2               	goto	u141
   619  00F1  28F3               	goto	u140
   620  00F2                     u141:	
   621  00F2  28D3               	goto	l924
   622  00F3                     u140:	
   623  00F3                     l938:	
   624                           
   625                           ;SPI.c: 82:             PORTB = ADRESH;
   626  00F3  1283               	bcf	3,5	;RP0=0, select bank0
   627  00F4  1303               	bcf	3,6	;RP1=0, select bank0
   628  00F5  081E               	movf	30,w	;volatile
   629  00F6  0086               	movwf	6	;volatile
   630                           
   631                           ;SPI.c: 83:             adc2 = ADRESH;
   632  00F7  081E               	movf	30,w	;volatile
   633  00F8  00A3               	movwf	??_main
   634  00F9  0823               	movf	??_main,w
   635  00FA  00F6               	movwf	_adc2
   636  00FB                     l940:	
   637                           
   638                           ;SPI.c: 84:             ready = 0;
   639  00FB  01F9               	clrf	_ready
   640  00FC                     l942:	
   641                           
   642                           ;SPI.c: 85:             ADCON0bits.GO_DONE = 1;
   643  00FC  149F               	bsf	31,1	;volatile
   644  00FD  28D3               	goto	l924
   645  00FE  120A  118A  280C   	ljmp	start
   646  0101                     __end_of_main:	
   647                           
   648                           	psect	text1
   649  013A                     __ptext1:	
   650 ;; *************** function _spiInit *****************
   651 ;; Defined at:
   652 ;;		line 5 in file "SPI_Init.c"
   653 ;; Parameters:    Size  Location     Type
   654 ;;  sType           1    wreg     enum E1292
   655 ;;  sDataSample     1    0[BANK0 ] enum E1300
   656 ;;  sClockIdle      1    1[BANK0 ] enum E1304
   657 ;;  sTransmitEdg    1    2[BANK0 ] enum E1308
   658 ;; Auto vars:     Size  Location     Type
   659 ;;  sType           1    4[COMMON] enum E1292
   660 ;; Return value:  Size  Location     Type
   661 ;;                  1    wreg      void 
   662 ;; Registers used:
   663 ;;		wreg, status,2, status,0
   664 ;; Tracked objects:
   665 ;;		On entry : 0/0
   666 ;;		On exit  : 0/0
   667 ;;		Unchanged: 0/0
   668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   669 ;;      Params:         0       3       0       0       0
   670 ;;      Locals:         1       0       0       0       0
   671 ;;      Temps:          0       0       0       0       0
   672 ;;      Totals:         1       3       0       0       0
   673 ;;Total ram usage:        4 bytes
   674 ;; Hardware stack levels used:    1
   675 ;; Hardware stack levels required when called:    3
   676 ;; This function calls:
   677 ;;		Nothing
   678 ;; This function is called by:
   679 ;;		_main
   680 ;; This function uses a non-reentrant model
   681 ;;
   682                           
   683                           
   684                           ;psect for function _spiInit
   685  013A                     _spiInit:	
   686                           
   687                           ;incstack = 0
   688                           ; Regs used in _spiInit: [wreg+status,2+status,0]
   689                           ;spiInit@sType stored from wreg
   690  013A  00F4               	movwf	spiInit@sType
   691  013B                     l888:	
   692                           
   693                           ;SPI_Init.c: 5: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle
      +                           sClockIdle, Spi_Transmit_Edge sTransmitEdge);SPI_Init.c: 6: {;SPI_Init.c: 7:     TRISC5
      +                           = 0;
   694  013B  1683               	bsf	3,5	;RP0=1, select bank1
   695  013C  1303               	bcf	3,6	;RP1=0, select bank1
   696  013D  1287               	bcf	7,5	;volatile
   697                           
   698                           ;SPI_Init.c: 8:     if(sType & 0b00000100)
   699  013E  1D74               	btfss	spiInit@sType,2
   700  013F  2941               	goto	u121
   701  0140  2942               	goto	u120
   702  0141                     u121:	
   703  0141  294A               	goto	l894
   704  0142                     u120:	
   705  0142                     l890:	
   706                           
   707                           ;SPI_Init.c: 9:     {;SPI_Init.c: 10:         SSPSTAT = sTransmitEdge;
   708  0142  1283               	bcf	3,5	;RP0=0, select bank0
   709  0143  1303               	bcf	3,6	;RP1=0, select bank0
   710  0144  0822               	movf	spiInit@sTransmitEdge,w
   711  0145  1683               	bsf	3,5	;RP0=1, select bank1
   712  0146  1303               	bcf	3,6	;RP1=0, select bank1
   713  0147  0094               	movwf	20	;volatile
   714  0148                     l892:	
   715                           
   716                           ;SPI_Init.c: 11:         TRISC3 = 1;
   717  0148  1587               	bsf	7,3	;volatile
   718                           
   719                           ;SPI_Init.c: 12:     }
   720  0149  2952               	goto	l104
   721  014A                     l894:	
   722                           
   723                           ;SPI_Init.c: 14:     {;SPI_Init.c: 15:         SSPSTAT = sDataSample | sTransmitEdge;
   724  014A  1283               	bcf	3,5	;RP0=0, select bank0
   725  014B  1303               	bcf	3,6	;RP1=0, select bank0
   726  014C  0820               	movf	spiInit@sDataSample,w
   727  014D  0422               	iorwf	spiInit@sTransmitEdge,w
   728  014E  1683               	bsf	3,5	;RP0=1, select bank1
   729  014F  1303               	bcf	3,6	;RP1=0, select bank1
   730  0150  0094               	movwf	20	;volatile
   731  0151                     l896:	
   732                           
   733                           ;SPI_Init.c: 16:         TRISC3 = 0;
   734  0151  1187               	bcf	7,3	;volatile
   735  0152                     l104:	
   736                           ;SPI_Init.c: 17:     }
   737                           
   738                           
   739                           ;SPI_Init.c: 19:     SSPCON = sType | sClockIdle;
   740  0152  0874               	movf	spiInit@sType,w
   741  0153  1283               	bcf	3,5	;RP0=0, select bank0
   742  0154  1303               	bcf	3,6	;RP1=0, select bank0
   743  0155  0421               	iorwf	spiInit@sClockIdle,w
   744  0156  0094               	movwf	20	;volatile
   745  0157                     l105:	
   746  0157  0008               	return
   747  0158                     __end_of_spiInit:	
   748                           
   749                           	psect	text2
   750  0017                     __ptext2:	
   751 ;; *************** function _initADC *****************
   752 ;; Defined at:
   753 ;;		line 5 in file "ADC_Init.c"
   754 ;; Parameters:    Size  Location     Type
   755 ;;  analog          1    wreg     unsigned char 
   756 ;; Auto vars:     Size  Location     Type
   757 ;;  analog          1    0[BANK0 ] unsigned char 
   758 ;; Return value:  Size  Location     Type
   759 ;;                  1    wreg      void 
   760 ;; Registers used:
   761 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   762 ;; Tracked objects:
   763 ;;		On entry : 0/0
   764 ;;		On exit  : 0/0
   765 ;;		Unchanged: 0/0
   766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   767 ;;      Params:         0       0       0       0       0
   768 ;;      Locals:         0       1       0       0       0
   769 ;;      Temps:          2       0       0       0       0
   770 ;;      Totals:         2       1       0       0       0
   771 ;;Total ram usage:        3 bytes
   772 ;; Hardware stack levels used:    1
   773 ;; Hardware stack levels required when called:    3
   774 ;; This function calls:
   775 ;;		Nothing
   776 ;; This function is called by:
   777 ;;		_main
   778 ;; This function uses a non-reentrant model
   779 ;;
   780                           
   781                           
   782                           ;psect for function _initADC
   783  0017                     _initADC:	
   784                           
   785                           ;incstack = 0
   786                           ; Regs used in _initADC: [wreg-fsr0h+status,2+status,0]
   787                           ;initADC@analog stored from wreg
   788  0017  1283               	bcf	3,5	;RP0=0, select bank0
   789  0018  1303               	bcf	3,6	;RP1=0, select bank0
   790  0019  00A0               	movwf	initADC@analog
   791  001A                     l898:	
   792                           
   793                           ;ADC_Init.c: 6:     INTCONbits.GIE = 1;
   794  001A  178B               	bsf	11,7	;volatile
   795                           
   796                           ;ADC_Init.c: 7:     INTCONbits.PEIE = 1;
   797  001B  170B               	bsf	11,6	;volatile
   798                           
   799                           ;ADC_Init.c: 9:     PIE1bits.ADIE = 1;
   800  001C  1683               	bsf	3,5	;RP0=1, select bank1
   801  001D  1303               	bcf	3,6	;RP1=0, select bank1
   802  001E  170C               	bsf	12,6	;volatile
   803                           
   804                           ;ADC_Init.c: 11:     PIR1bits.ADIF = 0;
   805  001F  1283               	bcf	3,5	;RP0=0, select bank0
   806  0020  1303               	bcf	3,6	;RP1=0, select bank0
   807  0021  130C               	bcf	12,6	;volatile
   808                           
   809                           ;ADC_Init.c: 13:     ADCON0bits.ADCS1 = 0;
   810  0022  139F               	bcf	31,7	;volatile
   811                           
   812                           ;ADC_Init.c: 14:     ADCON0bits.ADCS0 = 1;
   813  0023  171F               	bsf	31,6	;volatile
   814                           
   815                           ;ADC_Init.c: 15:     ADCON0bits.ADON = 1;
   816  0024  141F               	bsf	31,0	;volatile
   817                           
   818                           ;ADC_Init.c: 17:     switch(analog){
   819  0025  2876               	goto	l902
   820  0026                     l71:	
   821                           ;ADC_Init.c: 18:         case 0:
   822                           
   823                           
   824                           ;ADC_Init.c: 19:             ADCON0bits.CHS3 = 0;
   825  0026  129F               	bcf	31,5	;volatile
   826                           
   827                           ;ADC_Init.c: 20:             ADCON0bits.CHS2 = 0;
   828  0027  121F               	bcf	31,4	;volatile
   829                           
   830                           ;ADC_Init.c: 21:             ADCON0bits.CHS1 = 0;
   831  0028  119F               	bcf	31,3	;volatile
   832                           
   833                           ;ADC_Init.c: 22:             ADCON0bits.CHS0 = 0;
   834  0029  111F               	bcf	31,2	;volatile
   835                           
   836                           ;ADC_Init.c: 23:             break;
   837  002A  28B0               	goto	l904
   838  002B                     l73:	
   839                           ;ADC_Init.c: 25:         case 1:
   840                           
   841                           
   842                           ;ADC_Init.c: 26:             ADCON0bits.CHS3 = 0;
   843  002B  129F               	bcf	31,5	;volatile
   844                           
   845                           ;ADC_Init.c: 27:             ADCON0bits.CHS2 = 0;
   846  002C  121F               	bcf	31,4	;volatile
   847                           
   848                           ;ADC_Init.c: 28:             ADCON0bits.CHS1 = 0;
   849  002D  119F               	bcf	31,3	;volatile
   850                           
   851                           ;ADC_Init.c: 29:             ADCON0bits.CHS0 = 1;
   852  002E  151F               	bsf	31,2	;volatile
   853                           
   854                           ;ADC_Init.c: 30:             break;
   855  002F  28B0               	goto	l904
   856  0030                     l74:	
   857                           ;ADC_Init.c: 32:         case 2:
   858                           
   859                           
   860                           ;ADC_Init.c: 33:             ADCON0bits.CHS3 = 0;
   861  0030  129F               	bcf	31,5	;volatile
   862                           
   863                           ;ADC_Init.c: 34:             ADCON0bits.CHS2 = 0;
   864  0031  121F               	bcf	31,4	;volatile
   865                           
   866                           ;ADC_Init.c: 35:             ADCON0bits.CHS1 = 1;
   867  0032  159F               	bsf	31,3	;volatile
   868                           
   869                           ;ADC_Init.c: 36:             ADCON0bits.CHS0 = 0;
   870  0033  111F               	bcf	31,2	;volatile
   871                           
   872                           ;ADC_Init.c: 37:             break;
   873  0034  28B0               	goto	l904
   874  0035                     l75:	
   875                           ;ADC_Init.c: 39:         case 3:
   876                           
   877                           
   878                           ;ADC_Init.c: 40:             ADCON0bits.CHS3 = 0;
   879  0035  129F               	bcf	31,5	;volatile
   880                           
   881                           ;ADC_Init.c: 41:             ADCON0bits.CHS2 = 0;
   882  0036  121F               	bcf	31,4	;volatile
   883                           
   884                           ;ADC_Init.c: 42:             ADCON0bits.CHS1 = 1;
   885  0037  159F               	bsf	31,3	;volatile
   886                           
   887                           ;ADC_Init.c: 43:             ADCON0bits.CHS0 = 1;
   888  0038  151F               	bsf	31,2	;volatile
   889                           
   890                           ;ADC_Init.c: 44:             break;
   891  0039  28B0               	goto	l904
   892  003A                     l76:	
   893                           ;ADC_Init.c: 46:         case 4:
   894                           
   895                           
   896                           ;ADC_Init.c: 47:             ADCON0bits.CHS3 = 0;
   897  003A  129F               	bcf	31,5	;volatile
   898                           
   899                           ;ADC_Init.c: 48:             ADCON0bits.CHS2 = 1;
   900  003B  161F               	bsf	31,4	;volatile
   901                           
   902                           ;ADC_Init.c: 49:             ADCON0bits.CHS1 = 0;
   903  003C  119F               	bcf	31,3	;volatile
   904                           
   905                           ;ADC_Init.c: 50:             ADCON0bits.CHS0 = 0;
   906  003D  111F               	bcf	31,2	;volatile
   907                           
   908                           ;ADC_Init.c: 51:             break;
   909  003E  28B0               	goto	l904
   910  003F                     l77:	
   911                           ;ADC_Init.c: 53:         case 5:
   912                           
   913                           
   914                           ;ADC_Init.c: 54:             ADCON0bits.CHS3 = 0;
   915  003F  129F               	bcf	31,5	;volatile
   916                           
   917                           ;ADC_Init.c: 55:             ADCON0bits.CHS2 = 1;
   918  0040  161F               	bsf	31,4	;volatile
   919                           
   920                           ;ADC_Init.c: 56:             ADCON0bits.CHS1 = 0;
   921  0041  119F               	bcf	31,3	;volatile
   922                           
   923                           ;ADC_Init.c: 57:             ADCON0bits.CHS0 = 1;
   924  0042  151F               	bsf	31,2	;volatile
   925                           
   926                           ;ADC_Init.c: 58:             break;
   927  0043  28B0               	goto	l904
   928  0044                     l78:	
   929                           ;ADC_Init.c: 60:         case 6:
   930                           
   931                           
   932                           ;ADC_Init.c: 61:             ADCON0bits.CHS3 = 0;
   933  0044  129F               	bcf	31,5	;volatile
   934                           
   935                           ;ADC_Init.c: 62:             ADCON0bits.CHS2 = 1;
   936  0045  161F               	bsf	31,4	;volatile
   937                           
   938                           ;ADC_Init.c: 63:             ADCON0bits.CHS1 = 1;
   939  0046  159F               	bsf	31,3	;volatile
   940                           
   941                           ;ADC_Init.c: 64:             ADCON0bits.CHS0 = 0;
   942  0047  111F               	bcf	31,2	;volatile
   943                           
   944                           ;ADC_Init.c: 65:             break;
   945  0048  28B0               	goto	l904
   946  0049                     l79:	
   947                           ;ADC_Init.c: 67:         case 7:
   948                           
   949                           
   950                           ;ADC_Init.c: 68:             ADCON0bits.CHS3 = 0;
   951  0049  129F               	bcf	31,5	;volatile
   952                           
   953                           ;ADC_Init.c: 69:             ADCON0bits.CHS2 = 1;
   954  004A  161F               	bsf	31,4	;volatile
   955                           
   956                           ;ADC_Init.c: 70:             ADCON0bits.CHS1 = 1;
   957  004B  159F               	bsf	31,3	;volatile
   958                           
   959                           ;ADC_Init.c: 71:             ADCON0bits.CHS0 = 1;
   960  004C  151F               	bsf	31,2	;volatile
   961                           
   962                           ;ADC_Init.c: 72:             break;
   963  004D  28B0               	goto	l904
   964  004E                     l80:	
   965                           ;ADC_Init.c: 74:         case 8:
   966                           
   967                           
   968                           ;ADC_Init.c: 75:             ADCON0bits.CHS3 = 1;
   969  004E  169F               	bsf	31,5	;volatile
   970                           
   971                           ;ADC_Init.c: 76:             ADCON0bits.CHS2 = 0;
   972  004F  121F               	bcf	31,4	;volatile
   973                           
   974                           ;ADC_Init.c: 77:             ADCON0bits.CHS1 = 0;
   975  0050  119F               	bcf	31,3	;volatile
   976                           
   977                           ;ADC_Init.c: 78:             ADCON0bits.CHS0 = 0;
   978  0051  111F               	bcf	31,2	;volatile
   979                           
   980                           ;ADC_Init.c: 79:             break;
   981  0052  28B0               	goto	l904
   982  0053                     l81:	
   983                           ;ADC_Init.c: 81:         case 9:
   984                           
   985                           
   986                           ;ADC_Init.c: 82:             ADCON0bits.CHS3 = 1;
   987  0053  169F               	bsf	31,5	;volatile
   988                           
   989                           ;ADC_Init.c: 83:             ADCON0bits.CHS2 = 0;
   990  0054  121F               	bcf	31,4	;volatile
   991                           
   992                           ;ADC_Init.c: 84:             ADCON0bits.CHS1 = 0;
   993  0055  119F               	bcf	31,3	;volatile
   994                           
   995                           ;ADC_Init.c: 85:             ADCON0bits.CHS0 = 1;
   996  0056  151F               	bsf	31,2	;volatile
   997                           
   998                           ;ADC_Init.c: 86:             break;
   999  0057  28B0               	goto	l904
  1000  0058                     l82:	
  1001                           ;ADC_Init.c: 88:         case 10:
  1002                           
  1003                           
  1004                           ;ADC_Init.c: 89:             ADCON0bits.CHS3 = 1;
  1005  0058  169F               	bsf	31,5	;volatile
  1006                           
  1007                           ;ADC_Init.c: 90:             ADCON0bits.CHS2 = 0;
  1008  0059  121F               	bcf	31,4	;volatile
  1009                           
  1010                           ;ADC_Init.c: 91:             ADCON0bits.CHS1 = 1;
  1011  005A  159F               	bsf	31,3	;volatile
  1012                           
  1013                           ;ADC_Init.c: 92:             ADCON0bits.CHS0 = 0;
  1014  005B  111F               	bcf	31,2	;volatile
  1015                           
  1016                           ;ADC_Init.c: 93:             break;
  1017  005C  28B0               	goto	l904
  1018  005D                     l83:	
  1019                           ;ADC_Init.c: 95:         case 11:
  1020                           
  1021                           
  1022                           ;ADC_Init.c: 96:             ADCON0bits.CHS3 = 1;
  1023  005D  169F               	bsf	31,5	;volatile
  1024                           
  1025                           ;ADC_Init.c: 97:             ADCON0bits.CHS2 = 0;
  1026  005E  121F               	bcf	31,4	;volatile
  1027                           
  1028                           ;ADC_Init.c: 98:             ADCON0bits.CHS1 = 1;
  1029  005F  159F               	bsf	31,3	;volatile
  1030                           
  1031                           ;ADC_Init.c: 99:             ADCON0bits.CHS0 = 1;
  1032  0060  151F               	bsf	31,2	;volatile
  1033                           
  1034                           ;ADC_Init.c: 100:             break;
  1035  0061  28B0               	goto	l904
  1036  0062                     l84:	
  1037                           ;ADC_Init.c: 102:         case 12:
  1038                           
  1039                           
  1040                           ;ADC_Init.c: 103:             ADCON0bits.CHS3 = 1;
  1041  0062  169F               	bsf	31,5	;volatile
  1042                           
  1043                           ;ADC_Init.c: 104:             ADCON0bits.CHS2 = 1;
  1044  0063  161F               	bsf	31,4	;volatile
  1045                           
  1046                           ;ADC_Init.c: 105:             ADCON0bits.CHS1 = 0;
  1047  0064  119F               	bcf	31,3	;volatile
  1048                           
  1049                           ;ADC_Init.c: 106:             ADCON0bits.CHS0 = 0;
  1050  0065  111F               	bcf	31,2	;volatile
  1051                           
  1052                           ;ADC_Init.c: 107:             break;
  1053  0066  28B0               	goto	l904
  1054  0067                     l85:	
  1055                           ;ADC_Init.c: 109:         case 13:
  1056                           
  1057                           
  1058                           ;ADC_Init.c: 110:             ADCON0bits.CHS3 = 1;
  1059  0067  169F               	bsf	31,5	;volatile
  1060                           
  1061                           ;ADC_Init.c: 111:             ADCON0bits.CHS2 = 1;
  1062  0068  161F               	bsf	31,4	;volatile
  1063                           
  1064                           ;ADC_Init.c: 112:             ADCON0bits.CHS1 = 0;
  1065  0069  119F               	bcf	31,3	;volatile
  1066                           
  1067                           ;ADC_Init.c: 113:             ADCON0bits.CHS0 = 1;
  1068  006A  151F               	bsf	31,2	;volatile
  1069                           
  1070                           ;ADC_Init.c: 114:             break;
  1071  006B  28B0               	goto	l904
  1072  006C                     l86:	
  1073                           ;ADC_Init.c: 116:         case 14:
  1074                           
  1075                           
  1076                           ;ADC_Init.c: 117:             ADCON0bits.CHS3 = 1;
  1077  006C  169F               	bsf	31,5	;volatile
  1078                           
  1079                           ;ADC_Init.c: 118:             ADCON0bits.CHS2 = 1;
  1080  006D  161F               	bsf	31,4	;volatile
  1081                           
  1082                           ;ADC_Init.c: 119:             ADCON0bits.CHS1 = 1;
  1083  006E  159F               	bsf	31,3	;volatile
  1084                           
  1085                           ;ADC_Init.c: 120:             ADCON0bits.CHS0 = 0;
  1086  006F  111F               	bcf	31,2	;volatile
  1087                           
  1088                           ;ADC_Init.c: 121:             break;
  1089  0070  28B0               	goto	l904
  1090  0071                     l87:	
  1091                           ;ADC_Init.c: 123:         case 15:
  1092                           
  1093                           
  1094                           ;ADC_Init.c: 124:             ADCON0bits.CHS3 = 1;
  1095  0071  169F               	bsf	31,5	;volatile
  1096                           
  1097                           ;ADC_Init.c: 125:             ADCON0bits.CHS2 = 1;
  1098  0072  161F               	bsf	31,4	;volatile
  1099                           
  1100                           ;ADC_Init.c: 126:             ADCON0bits.CHS1 = 1;
  1101  0073  159F               	bsf	31,3	;volatile
  1102                           
  1103                           ;ADC_Init.c: 127:             ADCON0bits.CHS0 = 1;
  1104  0074  151F               	bsf	31,2	;volatile
  1105                           
  1106                           ;ADC_Init.c: 128:             break;
  1107  0075  28B0               	goto	l904
  1108  0076                     l902:	
  1109  0076  0820               	movf	initADC@analog,w
  1110  0077  00F4               	movwf	??_initADC
  1111  0078  01F5               	clrf	??_initADC+1
  1112                           
  1113                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1114                           ; Switch size 1, requested type "simple"
  1115                           ; Number of cases is 1, Range of values is 0 to 0
  1116                           ; switch strategies available:
  1117                           ; Name         Instructions Cycles
  1118                           ; simple_byte            4     3 (average)
  1119                           ; direct_byte           11     8 (fixed)
  1120                           ; jumptable            260     6 (fixed)
  1121                           ;	Chosen strategy is simple_byte
  1122  0079  0875               	movf	??_initADC+1,w
  1123  007A  3A00               	xorlw	0	; case 0
  1124  007B  1903               	skipnz
  1125  007C  287E               	goto	l964
  1126  007D  28B0               	goto	l904
  1127  007E                     l964:	
  1128                           
  1129                           ; Switch size 1, requested type "simple"
  1130                           ; Number of cases is 16, Range of values is 0 to 15
  1131                           ; switch strategies available:
  1132                           ; Name         Instructions Cycles
  1133                           ; simple_byte           49    25 (average)
  1134                           ; direct_byte           56     8 (fixed)
  1135                           ; jumptable            260     6 (fixed)
  1136                           ;	Chosen strategy is simple_byte
  1137  007E  0874               	movf	??_initADC,w
  1138  007F  3A00               	xorlw	0	; case 0
  1139  0080  1903               	skipnz
  1140  0081  2826               	goto	l71
  1141  0082  3A01               	xorlw	1	; case 1
  1142  0083  1903               	skipnz
  1143  0084  282B               	goto	l73
  1144  0085  3A03               	xorlw	3	; case 2
  1145  0086  1903               	skipnz
  1146  0087  2830               	goto	l74
  1147  0088  3A01               	xorlw	1	; case 3
  1148  0089  1903               	skipnz
  1149  008A  2835               	goto	l75
  1150  008B  3A07               	xorlw	7	; case 4
  1151  008C  1903               	skipnz
  1152  008D  283A               	goto	l76
  1153  008E  3A01               	xorlw	1	; case 5
  1154  008F  1903               	skipnz
  1155  0090  283F               	goto	l77
  1156  0091  3A03               	xorlw	3	; case 6
  1157  0092  1903               	skipnz
  1158  0093  2844               	goto	l78
  1159  0094  3A01               	xorlw	1	; case 7
  1160  0095  1903               	skipnz
  1161  0096  2849               	goto	l79
  1162  0097  3A0F               	xorlw	15	; case 8
  1163  0098  1903               	skipnz
  1164  0099  284E               	goto	l80
  1165  009A  3A01               	xorlw	1	; case 9
  1166  009B  1903               	skipnz
  1167  009C  2853               	goto	l81
  1168  009D  3A03               	xorlw	3	; case 10
  1169  009E  1903               	skipnz
  1170  009F  2858               	goto	l82
  1171  00A0  3A01               	xorlw	1	; case 11
  1172  00A1  1903               	skipnz
  1173  00A2  285D               	goto	l83
  1174  00A3  3A07               	xorlw	7	; case 12
  1175  00A4  1903               	skipnz
  1176  00A5  2862               	goto	l84
  1177  00A6  3A01               	xorlw	1	; case 13
  1178  00A7  1903               	skipnz
  1179  00A8  2867               	goto	l85
  1180  00A9  3A03               	xorlw	3	; case 14
  1181  00AA  1903               	skipnz
  1182  00AB  286C               	goto	l86
  1183  00AC  3A01               	xorlw	1	; case 15
  1184  00AD  1903               	skipnz
  1185  00AE  2871               	goto	l87
  1186  00AF  28B0               	goto	l904
  1187  00B0                     l904:	
  1188                           
  1189                           ;ADC_Init.c: 130:     ADCON1 = 0;
  1190  00B0  1683               	bsf	3,5	;RP0=1, select bank1
  1191  00B1  1303               	bcf	3,6	;RP1=0, select bank1
  1192  00B2  019F               	clrf	31	;volatile
  1193  00B3                     l906:	
  1194                           
  1195                           ;ADC_Init.c: 132:     ADCON0bits.GO_DONE = 1;
  1196  00B3  1283               	bcf	3,5	;RP0=0, select bank0
  1197  00B4  1303               	bcf	3,6	;RP1=0, select bank0
  1198  00B5  149F               	bsf	31,1	;volatile
  1199  00B6                     l88:	
  1200  00B6  0008               	return
  1201  00B7                     __end_of_initADC:	
  1202                           
  1203                           	psect	text3
  1204  0101                     __ptext3:	
  1205 ;; *************** function _ISR *****************
  1206 ;; Defined at:
  1207 ;;		line 33 in file "SPI.c"
  1208 ;; Parameters:    Size  Location     Type
  1209 ;;		None
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;		None
  1212 ;; Return value:  Size  Location     Type
  1213 ;;                  1    wreg      void 
  1214 ;; Registers used:
  1215 ;;		wreg, status,2, status,0, pclath, cstack
  1216 ;; Tracked objects:
  1217 ;;		On entry : 0/0
  1218 ;;		On exit  : 0/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1221 ;;      Params:         0       0       0       0       0
  1222 ;;      Locals:         0       0       0       0       0
  1223 ;;      Temps:          3       0       0       0       0
  1224 ;;      Totals:         3       0       0       0       0
  1225 ;;Total ram usage:        3 bytes
  1226 ;; Hardware stack levels used:    1
  1227 ;; Hardware stack levels required when called:    2
  1228 ;; This function calls:
  1229 ;;		_spiRead
  1230 ;;		_spiWrite
  1231 ;; This function is called by:
  1232 ;;		Interrupt level 1
  1233 ;; This function uses a non-reentrant model
  1234 ;;
  1235                           
  1236                           
  1237                           ;psect for function _ISR
  1238  0101                     _ISR:	
  1239  0101                     i1l748:	
  1240                           
  1241                           ;SPI.c: 34:     INTCONbits.GIE = 0;
  1242  0101  138B               	bcf	11,7	;volatile
  1243                           
  1244                           ;SPI.c: 35:     INTCONbits.PEIE = 0;
  1245  0102  130B               	bcf	11,6	;volatile
  1246                           
  1247                           ;SPI.c: 37:     if(ADCON0bits.GO_DONE == 0){
  1248  0103  1283               	bcf	3,5	;RP0=0, select bank0
  1249  0104  1303               	bcf	3,6	;RP1=0, select bank0
  1250  0105  189F               	btfsc	31,1	;volatile
  1251  0106  2908               	goto	u3_21
  1252  0107  2909               	goto	u3_20
  1253  0108                     u3_21:	
  1254  0108  290C               	goto	i1l43
  1255  0109                     u3_20:	
  1256  0109                     i1l750:	
  1257                           
  1258                           ;SPI.c: 38:         ready = 1;
  1259  0109  01F9               	clrf	_ready
  1260  010A  0AF9               	incf	_ready,f
  1261                           
  1262                           ;SPI.c: 39:         PIR1bits.ADIF = 0;
  1263  010B  130C               	bcf	12,6	;volatile
  1264  010C                     i1l43:	
  1265                           ;SPI.c: 40:     }
  1266                           
  1267                           
  1268                           ;SPI.c: 42:     if(SSPIF == 1){
  1269  010C  1D8C               	btfss	12,3	;volatile
  1270  010D  290F               	goto	u4_21
  1271  010E  2910               	goto	u4_20
  1272  010F                     u4_21:	
  1273  010F  2931               	goto	i1l764
  1274  0110                     u4_20:	
  1275  0110                     i1l752:	
  1276                           
  1277                           ;SPI.c: 43:         state = spiRead();
  1278  0110  120A  118A  2158  120A  118A  	fcall	_spiRead
  1279  0115  00F1               	movwf	??_ISR
  1280  0116  0871               	movf	??_ISR,w
  1281  0117  00F8               	movwf	_state
  1282  0118                     i1l754:	
  1283                           
  1284                           ;SPI.c: 44:         if (state == 0){
  1285  0118  0878               	movf	_state,w
  1286  0119  1D03               	btfss	3,2
  1287  011A  291C               	goto	u5_21
  1288  011B  291D               	goto	u5_20
  1289  011C                     u5_21:	
  1290  011C  2923               	goto	i1l758
  1291  011D                     u5_20:	
  1292  011D                     i1l756:	
  1293                           
  1294                           ;SPI.c: 45:          spiWrite(adc1);
  1295  011D  0877               	movf	_adc1,w
  1296  011E  120A  118A  2168  120A  118A  	fcall	_spiWrite
  1297  0123                     i1l758:	
  1298                           
  1299                           ;SPI.c: 47:         if (state == 1){
  1300  0123  0378               	decf	_state,w
  1301  0124  1D03               	btfss	3,2
  1302  0125  2927               	goto	u6_21
  1303  0126  2928               	goto	u6_20
  1304  0127                     u6_21:	
  1305  0127  292E               	goto	i1l762
  1306  0128                     u6_20:	
  1307  0128                     i1l760:	
  1308                           
  1309                           ;SPI.c: 48:             spiWrite(adc2);
  1310  0128  0876               	movf	_adc2,w
  1311  0129  120A  118A  2168  120A  118A  	fcall	_spiWrite
  1312  012E                     i1l762:	
  1313                           
  1314                           ;SPI.c: 50:         SSPIF = 0;
  1315  012E  1283               	bcf	3,5	;RP0=0, select bank0
  1316  012F  1303               	bcf	3,6	;RP1=0, select bank0
  1317  0130  118C               	bcf	12,3	;volatile
  1318  0131                     i1l764:	
  1319                           
  1320                           ;SPI.c: 53:     INTCONbits.GIE = 1;
  1321  0131  178B               	bsf	11,7	;volatile
  1322  0132                     i1l766:	
  1323                           
  1324                           ;SPI.c: 54:     INTCONbits.PEIE = 1;
  1325  0132  170B               	bsf	11,6	;volatile
  1326  0133                     i1l47:	
  1327  0133  0873               	movf	??_ISR+2,w
  1328  0134  008A               	movwf	10
  1329  0135  0E72               	swapf	(??_ISR+1)^(0+4294967168),w
  1330  0136  0083               	movwf	3
  1331  0137  0EFE               	swapf	btemp,f
  1332  0138  0E7E               	swapf	btemp,w
  1333  0139  0009               	retfie
  1334  013A                     __end_of_ISR:	
  1335                           
  1336                           	psect	intentry
  1337  0004                     __pintentry:	
  1338                           ;incstack = 0
  1339                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  1340                           
  1341  0004                     interrupt_function:	
  1342  007E                     saved_w	set	btemp
  1343  0004  00FE               	movwf	btemp
  1344  0005  0E03               	swapf	3,w
  1345  0006  00F2               	movwf	??_ISR+1
  1346  0007  080A               	movf	10,w
  1347  0008  00F3               	movwf	??_ISR+2
  1348  0009  120A  118A  2901   	ljmp	_ISR
  1349                           
  1350                           	psect	text4
  1351  0168                     __ptext4:	
  1352 ;; *************** function _spiWrite *****************
  1353 ;; Defined at:
  1354 ;;		line 27 in file "SPI_Init.c"
  1355 ;; Parameters:    Size  Location     Type
  1356 ;;  dat             1    wreg     unsigned char 
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;  dat             1    0[COMMON] unsigned char 
  1359 ;; Return value:  Size  Location     Type
  1360 ;;                  1    wreg      void 
  1361 ;; Registers used:
  1362 ;;		wreg
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1368 ;;      Params:         0       0       0       0       0
  1369 ;;      Locals:         1       0       0       0       0
  1370 ;;      Temps:          0       0       0       0       0
  1371 ;;      Totals:         1       0       0       0       0
  1372 ;;Total ram usage:        1 bytes
  1373 ;; Hardware stack levels used:    1
  1374 ;; This function calls:
  1375 ;;		Nothing
  1376 ;; This function is called by:
  1377 ;;		_ISR
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           
  1382                           ;psect for function _spiWrite
  1383  0168                     _spiWrite:	
  1384                           
  1385                           ;incstack = 0
  1386                           ; Regs used in _spiWrite: [wreg]
  1387                           ;spiWrite@dat stored from wreg
  1388  0168  00F0               	movwf	spiWrite@dat
  1389  0169                     i1l722:	
  1390                           
  1391                           ;SPI_Init.c: 27: void spiWrite(char dat);SPI_Init.c: 28: {;SPI_Init.c: 29:     SSPBUF = 
      +                          dat;
  1392  0169  0870               	movf	spiWrite@dat,w
  1393  016A  1283               	bcf	3,5	;RP0=0, select bank0
  1394  016B  1303               	bcf	3,6	;RP1=0, select bank0
  1395  016C  0093               	movwf	19	;volatile
  1396  016D                     i1l114:	
  1397  016D  0008               	return
  1398  016E                     __end_of_spiWrite:	
  1399                           
  1400                           	psect	text5
  1401  0158                     __ptext5:	
  1402 ;; *************** function _spiRead *****************
  1403 ;; Defined at:
  1404 ;;		line 40 in file "SPI_Init.c"
  1405 ;; Parameters:    Size  Location     Type
  1406 ;;		None
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;		None
  1409 ;; Return value:  Size  Location     Type
  1410 ;;                  1    wreg      unsigned char 
  1411 ;; Registers used:
  1412 ;;		wreg, status,2, status,0, pclath, cstack
  1413 ;; Tracked objects:
  1414 ;;		On entry : 0/0
  1415 ;;		On exit  : 0/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1418 ;;      Params:         0       0       0       0       0
  1419 ;;      Locals:         0       0       0       0       0
  1420 ;;      Temps:          0       0       0       0       0
  1421 ;;      Totals:         0       0       0       0       0
  1422 ;;Total ram usage:        0 bytes
  1423 ;; Hardware stack levels used:    1
  1424 ;; Hardware stack levels required when called:    1
  1425 ;; This function calls:
  1426 ;;		_spiReceiveWait
  1427 ;; This function is called by:
  1428 ;;		_ISR
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           
  1433                           ;psect for function _spiRead
  1434  0158                     _spiRead:	
  1435  0158                     i1l716:	
  1436                           ;incstack = 0
  1437                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1438                           
  1439                           
  1440                           ;SPI_Init.c: 42:     spiReceiveWait();
  1441  0158  120A  118A  2161  120A  118A  	fcall	_spiReceiveWait
  1442  015D                     i1l718:	
  1443                           
  1444                           ;SPI_Init.c: 43:     return(SSPBUF);
  1445  015D  1283               	bcf	3,5	;RP0=0, select bank0
  1446  015E  1303               	bcf	3,6	;RP1=0, select bank0
  1447  015F  0813               	movf	19,w	;volatile
  1448  0160                     i1l122:	
  1449  0160  0008               	return
  1450  0161                     __end_of_spiRead:	
  1451                           
  1452                           	psect	text6
  1453  0161                     __ptext6:	
  1454 ;; *************** function _spiReceiveWait *****************
  1455 ;; Defined at:
  1456 ;;		line 22 in file "SPI_Init.c"
  1457 ;; Parameters:    Size  Location     Type
  1458 ;;		None
  1459 ;; Auto vars:     Size  Location     Type
  1460 ;;		None
  1461 ;; Return value:  Size  Location     Type
  1462 ;;                  1    wreg      void 
  1463 ;; Registers used:
  1464 ;;		None
  1465 ;; Tracked objects:
  1466 ;;		On entry : 0/0
  1467 ;;		On exit  : 0/0
  1468 ;;		Unchanged: 0/0
  1469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1470 ;;      Params:         0       0       0       0       0
  1471 ;;      Locals:         0       0       0       0       0
  1472 ;;      Temps:          0       0       0       0       0
  1473 ;;      Totals:         0       0       0       0       0
  1474 ;;Total ram usage:        0 bytes
  1475 ;; Hardware stack levels used:    1
  1476 ;; This function calls:
  1477 ;;		Nothing
  1478 ;; This function is called by:
  1479 ;;		_spiRead
  1480 ;; This function uses a non-reentrant model
  1481 ;;
  1482                           
  1483                           
  1484                           ;psect for function _spiReceiveWait
  1485  0161                     _spiReceiveWait:	
  1486  0161                     i1l714:	
  1487                           ;incstack = 0
  1488                           ; Regs used in _spiReceiveWait: []
  1489                           
  1490  0161                     i1l108:	
  1491                           ;SPI_Init.c: 24:     while ( !SSPSTATbits.BF );
  1492                           
  1493  0161  1683               	bsf	3,5	;RP0=1, select bank1
  1494  0162  1303               	bcf	3,6	;RP1=0, select bank1
  1495  0163  1C14               	btfss	20,0	;volatile
  1496  0164  2966               	goto	u1_21
  1497  0165  2967               	goto	u1_20
  1498  0166                     u1_21:	
  1499  0166  2961               	goto	i1l108
  1500  0167                     u1_20:	
  1501  0167                     i1l111:	
  1502  0167  0008               	return
  1503  0168                     __end_of_spiReceiveWait:	
  1504  007E                     btemp	set	126	;btemp
  1505  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80      4       4
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_initADC

Critical Paths under _ISR in COMMON

    _ISR->_spiWrite

Critical Paths under _main in BANK0

    _main->_spiInit

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     478
                                              3 BANK0      1     1      0
                            _initADC
                            _spiInit
 ---------------------------------------------------------------------------------
 (1) _spiInit                                              4     1      3     456
                                              4 COMMON     1     1      0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _initADC                                              3     3      0      22
                                              4 COMMON     2     2      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  3     3      0      15
                                              1 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (3) _spiWrite                                             1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (4) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initADC
   _spiInit

 _ISR (ROOT)
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       E       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4       4       5        5.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       E      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Feb 16 11:13:35 2020

             __CFG_CP$OFF 0000               _SSPSTATbits 0094                        l71 0026  
                      l80 004E                        l81 0053                        l73 002B  
                      l82 0058                        l74 0030                        l83 005D  
                      l75 0035                        l84 0062                        l76 003A  
                      l85 0067                        l77 003F                        l86 006C  
                      l78 0044                        l87 0071                        l79 0049  
                      l88 00B6                       l104 0152                       l105 0157  
                     l902 0076                       l904 00B0                       l920 00C5  
                     l912 00B7                       l906 00B3                       l930 00E6  
                     l922 00C8                       l914 00BB                       l940 00FB  
                     l932 00E7                       l924 00D3                       l916 00BC  
                     l942 00FC                       l934 00E8                       l926 00D9  
                     l918 00C4                       l936 00EE                       l928 00DE  
                     l890 0142                       l938 00F3                       l964 007E  
                     l892 0148                       l894 014A                       l896 0151  
                     l888 013B                       l898 001A                       u120 0142  
                     u121 0141                       u130 00DE                       u131 00DD  
                     u140 00F3                       u141 00F2              __CFG_CPD$OFF 0000  
                     _ISR 0101              __CFG_LVP$OFF 0000                      ?_ISR 0070  
                    i1l43 010C                      i1l47 0133                      u1_20 0167  
                    u1_21 0166                      u3_20 0109                      u3_21 0108  
                    u4_20 0110                      u4_21 010F                      u5_20 011D  
                    u5_21 011C                      u6_20 0128                      u6_21 0127  
            __CFG_WRT$OFF 0000                      _adc1 0077                      _adc2 0076  
                    _main 00B7                      btemp 007E                      start 000C  
           __CFG_IESO$OFF 0000                     ??_ISR 0071                     ?_main 0070  
           __CFG_WDTE$OFF 0000                     _ANSEL 0188                     i1l111 0167  
                   i1l122 0160                     i1l114 016D                     i1l108 0161  
                   i1l714 0161                     i1l722 0169                     i1l716 0158  
                   i1l718 015D                     i1l750 0109                     i1l760 0128  
                   i1l752 0110                     i1l762 012E                     i1l754 0118  
                   i1l756 011D                     i1l764 0131                     i1l748 0101  
                   i1l766 0132                     i1l758 0123                     _PORTA 0005  
                   _PORTB 0006                     _TRISA 0085                     _TRISB 0086  
                   _SSPIF 0063            __CFG_FCMEN$OFF 0000           __end_of_initADC 00B7  
                   _ready 0079                     _state 0078            __CFG_BOREN$OFF 0000  
                   pclath 000A           __end_of_spiInit 0158           __end_of_spiRead 0161  
                   status 0003                     wtemp0 007E            __CFG_MCLRE$OFF 0000  
         __initialization 000F              __end_of_main 0101                    ??_main 0023  
                  _ADCON1 009F                    _ADRESH 001E                    _TRISC3 043B  
                  _TRISC5 043D                    _SSPCON 0014                    _SSPBUF 0013  
          __CFG_PWRTE$OFF 0000                 ??_initADC 0074                    saved_w 007E  
        __end_of_spiWrite 016E                 ??_spiInit 0074                 ??_spiRead 0070  
 __end_of__initialization 0013            __pcstackCOMMON 0070                __pmaintext 00B7  
           initADC@analog 0020                __pintentry 0004   __size_of_spiReceiveWait 0007  
                 _SSPSTAT 0094                 ?_spiWrite 0070                   __ptext1 013A  
                 __ptext2 0017                   __ptext3 0101                   __ptext4 0168  
                 __ptext5 0158                   __ptext6 0161                   _initADC 0017  
            __size_of_ISR 0039                   _spiInit 013A                   _spiRead 0158  
    end_of_initialization 0013                ??_spiWrite 0070               spiWrite@dat 0070  
          _spiReceiveWait 0161       start_initialization 000F               __end_of_ISR 013A  
__CFG_FOSC$INTRC_NOCLKOUT 0000    __end_of_spiReceiveWait 0168               __pbssCOMMON 0076  
               ___latbits 0002             __pcstackBANK0 0020           ?_spiReceiveWait 0070  
       __size_of_spiWrite 0006                  ?_initADC 0070                  ?_spiInit 0020  
                ?_spiRead 0070      spiInit@sTransmitEdge 0022         interrupt_function 0004  
                _PIE1bits 008C        spiInit@sDataSample 0020                  _PIR1bits 000C  
              _ADCON0bits 001F          __size_of_initADC 00A0          __size_of_spiInit 001E  
        __size_of_spiRead 0009         __CFG_BOR4V$BOR40V 0000             __size_of_main 004A  
                _spiWrite 0168              spiInit@sType 0074         spiInit@sClockIdle 0021  
              _INTCONbits 000B                  intlevel1 0000          ??_spiReceiveWait 0070  
